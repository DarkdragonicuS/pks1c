
&НаКлиенте
Процедура СформироватьЗаявкиБезРабот(Команда)
	СформироватьОтчетЗаявкиБезРабот();
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетЗаявкиБезРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыЗаявок.Регистратор КАК Заявка,
		|	СтатусыЗаявок.Регистратор.ТемаЗаявки КАК Тема,
		|	СтатусыЗаявок.Регистратор.Клиент КАК Клиент,
		|	СтатусыЗаявок.Регистратор.Автор КАК Автор,
		|	СтатусыЗаявок.Регистратор.ДатаЗакрытия КАК ДатаЗакрытия,
		|	СтатусыЗаявок.Регистратор.ДатаОткрытия КАК ДатаОткрытия,
		|	ИсторияИзмененийДокументов.Автор КАК АвторЗакрытия,
		|	СтатусыЗаявок.Регистратор.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.СтатусыЗаявок КАК СтатусыЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийДокументов КАК ИсторияИзмененийДокументов
		|		ПО СтатусыЗаявок.Регистратор = ИсторияИзмененийДокументов.Документ
		|		И СтатусыЗаявок.Регистратор.ДатаЗакрытия = ИсторияИзмененийДокументов.Период
		|ГДЕ
		|	СтатусыЗаявок.Статус = &Статус
		|	И СтатусыЗаявок.Регистратор НЕ В
		|		(ВЫБРАТЬ
		|			ПочасовыеРаботы.Заявка
		|		ИЗ
		|			РегистрСведений.ПочасовыеРаботы КАК ПочасовыеРаботы)
		|	И СтатусыЗаявок.ДатаИзменения МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗакрытия,
		|	ДатаОткрытия";
	
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаявок.Закрыта);
	Запрос.УстановитьПараметр("ДатаНачала",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Период));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОтчетОЗаявкахБезРабот.Очистить();
    Макет = Обработки.РМБ.ПолучитьМакет("ОтчетОЗаявкахБезРабот");	
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строки");
	ОтчетОЗаявкахБезРабот.Вывести(ОбластьШапка);
	НомерСтроки = 1;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры,ВыборкаДетальныеЗаписи);
		
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Клиент",ВыборкаДетальныеЗаписи.Клиент);
		//ОбластьСтроки.Параметры.КлиентСсылка = СтруктураРасшифровки;
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.КлиентСсылка = ВыборкаДетальныеЗаписи.Клиент;
				
		//СтруктураРасшифровки = Новый Структура;
		//СтруктураРасшифровки.Вставить("Заявка",ВыборкаДетальныеЗаписи.Заявка);
		//ОбластьСтроки.Параметры.Заявка = СтруктураРасшифровки;
		ОбластьСтроки.Параметры.Заявка = ВыборкаДетальныеЗаписи.Заявка;
		
		ОтчетОЗаявкахБезРабот.Вывести(ОбластьСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	вПериод = ОткрытьФормуМодально("Обработка.ВыпадающийВыборПериода.Форма.Форма2");
	Если ЗначениеЗаполнено(вПериод) Тогда
		Период = вПериод;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Период = НачалоМесяца(ТекущаяДата());
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчет()
	МесячныйОтчет.Очистить();
	
	Макет = Обработки.РМБ.ПолучитьМакет("МакетОтчет");	
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строки");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ЗапросРабот = Новый Запрос;
	ЗапросРабот.Текст = 
		"ВЫБРАТЬ
		|	ПочасовыеРаботы.Удаленка КАК Удаленка,
		|	ПочасовыеРаботы.Сверхурочка КАК Сверхурочка,
		|	СУММА(ПочасовыеРаботы.ВремяЗатраты) КАК ВремяЗатраты,
		|	ПочасовыеРаботы.Организация КАК Организация,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
		|	ПочасовыеРаботы.Организация.Наименование КАК ОрганизацияНаименование
		|ПОМЕСТИТЬ РаботыОбщие
		|ИЗ
		|	РегистрСведений.ПочасовыеРаботы КАК ПочасовыеРаботы
		|ГДЕ
		|	ПочасовыеРаботы.Регистратор.Дата МЕЖДУ &От И &До
		|
		|СГРУППИРОВАТЬ ПО
		|	ПочасовыеРаботы.Организация,
		|	ПочасовыеРаботы.Удаленка,
		|	ПочасовыеРаботы.Сверхурочка,
		|	ПочасовыеРаботы.Организация.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботыОбщие.Организация КАК Организация,
		|	ЕСТЬNULL(РаботыОбщие.ВремяЗатраты, 0) КАК ВремяЗатраты,
		|	РаботыОбщие.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ РаботыВыездныеНорм
		|ИЗ
		|	РаботыОбщие КАК РаботыОбщие
		|ГДЕ
		|	НЕ РаботыОбщие.Удаленка
		|	И НЕ РаботыОбщие.Сверхурочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботыОбщие.Организация КАК Организация,
		|	ЕСТЬNULL(РаботыОбщие.ВремяЗатраты, 0) КАК ВремяЗатраты,
		|	РаботыОбщие.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ РаботыВыездныеСУ
		|ИЗ
		|	РаботыОбщие КАК РаботыОбщие
		|ГДЕ
		|	НЕ РаботыОбщие.Удаленка
		|	И РаботыОбщие.Сверхурочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботыОбщие.Организация КАК Организация,
		|	ЕСТЬNULL(РаботыОбщие.ВремяЗатраты, 0) КАК ВремяЗатраты,
		|	РаботыОбщие.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ РаботыУдаленныеНорм
		|ИЗ
		|	РаботыОбщие КАК РаботыОбщие
		|ГДЕ
		|	РаботыОбщие.Удаленка
		|	И НЕ РаботыОбщие.Сверхурочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботыОбщие.Организация КАК Организация,
		|	ЕСТЬNULL(РаботыОбщие.ВремяЗатраты, 0) КАК ВремяЗатраты,
		|	РаботыОбщие.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ РаботыУдаленныеСУ
		|ИЗ
		|	РаботыОбщие КАК РаботыОбщие
		|ГДЕ
		|	РаботыОбщие.Удаленка
		|	И РаботыОбщие.Сверхурочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботыОбщие.Организация КАК Контрагент,
		|	СУММА(ЕСТЬNULL(РаботыВыездныеНорм.ВремяЗатраты, 0)) КАК ЧасыВыездНорма,
		|	СУММА(ЕСТЬNULL(РаботыВыездныеСУ.ВремяЗатраты, 0)) КАК ЧасыВыездСверхурочка,
		|	СУММА(ЕСТЬNULL(РаботыУдаленныеНорм.ВремяЗатраты, 0)) КАК ЧасыУдаленкаНорма,
		|	СУММА(ЕСТЬNULL(РаботыУдаленныеСУ.ВремяЗатраты, 0)) КАК ЧасыУдаленкаСверхурочка,
		|	РаботыОбщие.ОрганизацияНаименование КАК ОрганизацияНаименование,
		|	СУММА(ЕСТЬNULL(РаботыВыездныеНорм.ВремяЗатраты, 0) + ЕСТЬNULL(РаботыВыездныеСУ.ВремяЗатраты, 0) + ЕСТЬNULL(РаботыУдаленныеНорм.ВремяЗатраты, 0) + ЕСТЬNULL(РаботыУдаленныеСУ.ВремяЗатраты, 0)) КАК ЧасыИтог
		|ПОМЕСТИТЬ РаботыПроведенные
		|ИЗ
		|	РаботыОбщие КАК РаботыОбщие
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаботыВыездныеСУ КАК РаботыВыездныеСУ
		|		ПО РаботыОбщие.НомерСтроки = РаботыВыездныеСУ.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаботыВыездныеНорм КАК РаботыВыездныеНорм
		|		ПО РаботыОбщие.НомерСтроки = РаботыВыездныеНорм.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаботыУдаленныеНорм КАК РаботыУдаленныеНорм
		|		ПО РаботыОбщие.НомерСтроки = РаботыУдаленныеНорм.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаботыУдаленныеСУ КАК РаботыУдаленныеСУ
		|		ПО РаботыОбщие.НомерСтроки = РаботыУдаленныеСУ.НомерСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботыОбщие.Организация,
		|	РаботыОбщие.ОрганизацияНаименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговораОбслуживанияСрезПоследних.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ АбонентскиеБезПроведенныхРабот
		|ИЗ
		|	РегистрСведений.ДоговораОбслуживания.СрезПоследних(
		|			&От,
		|			НЕ Контрагент В
		|					(ВЫБРАТЬ
		|						РаботыОбщие.Организация КАК Контрагент
		|					ИЗ
		|						РаботыОбщие КАК РаботыОбщие)) КАК ДоговораОбслуживанияСрезПоследних
		|ГДЕ
		|	ДоговораОбслуживанияСрезПоследних.АбонентскаяПлата
		|	И НЕ ДоговораОбслуживанияСрезПоследних.ЧерныйСписок
		|	И (ДоговораОбслуживанияСрезПоследних.СрокДействия > &От
		|			ИЛИ ДоговораОбслуживанияСрезПоследних.СрокДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(АбонентскиеБезПроведенныхРабот.Контрагент, РаботыПроведенные.Контрагент) КАК Контрагент,
		|	СУММА(ЕСТЬNULL(РаботыПроведенные.ЧасыВыездНорма, 0)) КАК ЧасыВыездНорма,
		|	СУММА(ЕСТЬNULL(РаботыПроведенные.ЧасыВыездСверхурочка, 0)) КАК ЧасыВыездСверхурочка,
		|	СУММА(ЕСТЬNULL(РаботыПроведенные.ЧасыУдаленкаНорма, 0)) КАК ЧасыУдаленкаНорма,
		|	СУММА(ЕСТЬNULL(РаботыПроведенные.ЧасыУдаленкаСверхурочка, 0)) КАК ЧасыУдаленкаСверхурочка,
		|	СУММА(ЕСТЬNULL(РаботыПроведенные.ЧасыИтог, 0)) КАК ЧасыИтог,
		|	ЕСТЬNULL(АбонентскиеБезПроведенныхРабот.Контрагент.Наименование, РаботыПроведенные.Контрагент.Наименование) КАК ОрганизацияНаименование
		|ИЗ
		|	РаботыПроведенные КАК РаботыПроведенные
		|		ПОЛНОЕ СОЕДИНЕНИЕ АбонентскиеБезПроведенныхРабот КАК АбонентскиеБезПроведенныхРабот
		|		ПО РаботыПроведенные.Контрагент = АбонентскиеБезПроведенныхРабот.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(АбонентскиеБезПроведенныхРабот.Контрагент, РаботыПроведенные.Контрагент),
		|	ЕСТЬNULL(АбонентскиеБезПроведенныхРабот.Контрагент.Наименование, РаботыПроведенные.Контрагент.Наименование)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОрганизацияНаименование";
	
	ЗапросРабот.УстановитьПараметр("От", НачалоМесяца(Период));
	ЗапросРабот.УстановитьПараметр("До", КонецМесяца(Период));
	
	РезультатЗапросаРабот = ЗапросРабот.Выполнить();	
	ВыборкаРабот = РезультатЗапросаРабот.Выбрать();
	
	МесячныйОтчет.Вывести(ОбластьШапка);
	
	ЧасыОбщийИтог = 0;
	СуммаЧасовОбщийИтог = 0;
	АбонентскаяПлатаОбщийИтог = 0;
	НомерСтроки = 1;
	
	Пока ВыборкаРабот.Следующий() Цикл
		ВыборкаЦен = ЗапросЦен(ВыборкаРабот.Контрагент, Период);
		
		Если ВыборкаЦен.Количество() = 0 Тогда
			Сообщение = "ОШИБКА! С контрагенотом " + ВыборкаРабот.Контрагент + " к выбранному месяцу не был заключен договор обслуживания.";
			Сообщить(Сообщение);
			Продолжить;
		КонецЕсли;
		
		Если Не ВыборкаЦен.АбонентскаяПлата Тогда
			КОплатеЧасовУдСУ = ВыборкаЦен.ТарифСверхурочный * ВыборкаРабот.ЧасыУдаленкаСверхурочка;
			КОплатеЧасовВыездСУ = ВыборкаЦен.ТарифСверхурочный * ВыборкаРабот.ЧасыВыездСверхурочка;
			КОплатеЧасовУдНорм = ВыборкаЦен.Тариф * ВыборкаРабот.ЧасыУдаленкаНорма;
			КОплатеЧасовВыездНорм = ВыборкаЦен.Тариф * ВыборкаРабот.ЧасыВыездНорма;
			АбонПлата = 0;
		Иначе
			КОплатеЧасовУдСУ = ВыборкаЦен.ТарифСверхурочный * ВыборкаРабот.ЧасыУдаленкаСверхурочка;
			КОплатеЧасовВыездСУ = ВыборкаЦен.ТарифСверхурочный * ВыборкаРабот.ЧасыВыездСверхурочка;
			КОплатеЧасовУдНорм = 0;
			КОплатеЧасовВыездНорм = 0;
			АбонПлата = ВыборкаЦен.Тариф;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры,ВыборкаРабот);
		
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.СуммаУдаленкаНорма = КОплатеЧасовУдНорм;
		ОбластьСтроки.Параметры.СуммаВыездНорма = КОплатеЧасовВыездНорм;
		ОбластьСтроки.Параметры.СуммаУдаленкаСверхурочка = КОплатеЧасовУдСУ;
		ОбластьСтроки.Параметры.СуммаВыездСверхурочка = КОплатеЧасовВыездСУ;
		ОбластьСтроки.Параметры.СуммаЧасовИтог = КОплатеЧасовУдНорм + КОплатеЧасовВыездНорм + КОплатеЧасовУдСУ + КОплатеЧасовВыездСУ;
		ОбластьСтроки.Параметры.АбонентскаяПлата = АбонПлата;	
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Организация",ВыборкаРабот.Контрагент);
		СтруктураРасшифровки.Вставить("Период",Период);
		ОбластьСтроки.Параметры.МесячныйОтчет = СтруктураРасшифровки;
		
		ЧасыОбщийИтог = ЧасыОбщийИтог + ВыборкаРабот.ЧасыИтог;
		СуммаЧасовОбщийИтог = СуммаЧасовОбщийИтог + КОплатеЧасовУдНорм + КОплатеЧасовВыездНорм + КОплатеЧасовУдСУ + КОплатеЧасовВыездСУ;
		АбонентскаяПлатаОбщийИтог = АбонентскаяПлатаОбщийИтог + АбонПлата;
		
		МесячныйОтчет.Вывести(ОбластьСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ЧасыОбщийИтог = ЧасыОбщийИтог;
	ОбластьПодвал.Параметры.СуммаЧасовОбщийИтог = СуммаЧасовОбщийИтог;
	ОбластьПодвал.Параметры.АбонентскаяПлатаОбщийИтог = АбонентскаяПлатаОбщийИтог;
	
	МесячныйОтчет.Вывести(ОбластьПодвал);
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокОперацийНаСервере()	
	//1. Всего почасовок/ проведено почасовок
	ЗаполнитьВсегоПроведено();	
	
	//2. Итоги часов/сумм
	
	
	СписокКонтрагентов = АутсорсРаботы.ОбслуживащиесяКонтрагентыЗаПериод(НачалоМесяца(Период),КонецМесяца(Период));
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокОпераций(Команда)
	СформироватьСписокОперацийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсегоПроведено()
	КоличествоПочасовок = 0;
	Проведено = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДневнойОтчетПочасовыхРабот.Проведен
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Проведено,
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Документ.ДневнойОтчетПочасовыхРабот КАК ДневнойОтчетПочасовыхРабот
		|ГДЕ
		|	ДневнойОтчетПочасовыхРабот.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Период));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КоличествоПочасовок = ВыборкаДетальныеЗаписи.Количество;
		Проведено = ВыборкаДетальныеЗаписи.Проведено;
	КонецЕсли;

	СозданоПочасовыхРабот = КоличествоПочасовок;
	ПроведеноПочасовыхРабот = Проведено;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетКоманда(Команда)
	СформироватьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда	
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Отчет.МесячныйОтчет.Форма.ФормаОтчета",Расшифровка,,Новый УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНесоответствующиеСверхурочки(Команда)
	СформироватьНесоответствующиеСверхурочкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьНесоответствующиеСверхурочкиНаСервере()
	ОтчетОНесоответствующихСверхурочках.Очистить();
	
	Макет = Обработки.РМБ.ПолучитьМакет("ОтчетОНесоответствующихСверхурочках");	
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строки");
	СверхурочкаНачало = Константы.СверхурочкаНачало.Получить();
	СверхурочкаКонец = Константы.СверхурочкаКонец.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПочасовыеРаботы.ВремяПрибытия КАК ВремяПрибытия,
		|	ПочасовыеРаботы.ВремяЗавершения КАК ВремяЗавершения,
		|	ПочасовыеРаботы.Сверхурочка КАК Сверхурочка,
		|	ПочасовыеРаботы.Регистратор КАК Регистратор,
		|	ПочасовыеРаботы.Период КАК Дата,
		|	ПочасовыеРаботы.Исполнитель КАК Исполнитель,
		|	ПочасовыеРаботы.Организация КАК Организация,
		|	ПочасовыеРаботы.СоставРабот КАК СоставРабот
		|ИЗ
		|	РегистрСведений.ПочасовыеРаботы КАК ПочасовыеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО (НАЧАЛОПЕРИОДА(ПочасовыеРаботы.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕНЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикДежурств КАК ГрафикДежурств
		|		ПО (НАЧАЛОПЕРИОДА(ПочасовыеРаботы.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ГрафикДежурств.Дата, ДЕНЬ))
		|ГДЕ
		|	ПочасовыеРаботы.Период МЕЖДУ &ПериодНачало И &ПериодКонец
		|	И (НЕ ПочасовыеРаботы.Сверхурочка
		|				И (ПочасовыеРаботы.ВремяПрибытия < &СверхурочкаКонец
		|					ИЛИ ВЫБОР
		|						КОГДА ДанныеПроизводственногоКалендаря.ВидДня = &ПредпраздничныйДень
		|							ТОГДА ПочасовыеРаботы.ВремяЗавершения > ДОБАВИТЬКДАТЕ(&СверхурочкаНачало, ЧАС, -1)
		|						ИНАЧЕ ПочасовыеРаботы.ВремяЗавершения > &СверхурочкаНачало
		|					КОНЕЦ
		|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня В (&НерабочиеДни)
		|						И ВЫБОР
		|							КОГДА ПочасовыеРаботы.Исполнитель = ГрафикДежурств.Сотрудник
		|								ТОГДА ГрафикДежурств.Сверхурочка
		|							ИНАЧЕ ИСТИНА
		|						КОНЕЦ)
		|			ИЛИ ПочасовыеРаботы.Сверхурочка
		|				И НЕ(ПочасовыеРаботы.ВремяПрибытия < &СверхурочкаКонец
		|						ИЛИ ВЫБОР
		|							КОГДА ДанныеПроизводственногоКалендаря.ВидДня = &ПредпраздничныйДень
		|								ТОГДА ПочасовыеРаботы.ВремяЗавершения > ДОБАВИТЬКДАТЕ(&СверхурочкаНачало, ЧАС, -1)
		|							ИНАЧЕ ПочасовыеРаботы.ВремяЗавершения > &СверхурочкаНачало
		|						КОНЕЦ
		|						ИЛИ ДанныеПроизводственногоКалендаря.ВидДня В (&НерабочиеДни)
		|							И ВЫБОР
		|								КОГДА ПочасовыеРаботы.Исполнитель = ГрафикДежурств.Сотрудник
		|									ТОГДА ГрафикДежурств.Сверхурочка
		|								ИНАЧЕ ИСТИНА
		|							КОНЕЦ))
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сверхурочка,
		|	Дата,
		|	ВремяПрибытия,
		|	ВремяЗавершения";
	
	НерабочиеДни = Новый Массив;
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	
	Запрос.УстановитьПараметр("ПериодКонец", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ПериодНачало", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("СверхурочкаНачало",СверхурочкаНачало);
	Запрос.УстановитьПараметр("СверхурочкаКонец",СверхурочкаКонец);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",КалендарныеГрафики.ОсновнойПроизводственныйКалендарь());
	Запрос.УстановитьПараметр("ПредпраздничныйДень",Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	Запрос.УстановитьПараметр("НерабочиеДни",НерабочиеДни);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ОтчетОНесоответствующихСверхурочках.Вывести(ОбластьШапка);
	НомерСтроки = 1;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтроки.Параметры,ВыборкаДетальныеЗаписи);
		
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.ПочасовойОтчет = ВыборкаДетальныеЗаписи.Регистратор;
		
		ОтчетОНесоответствующихСверхурочках.Вывести(ОбластьСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОНесоответствующихСверхурочкахОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Если ТипЗнч(Расшифровка) = Тип("ДокументСсылка.ДневнойОтчетПочасовыхРабот") Тогда	
		СтандартнаяОбработка = Ложь;
		//ОткрытьФорму("Документ.ДневнойОтчетПочасовыхРабот.ФормаОбъекта",Расшифровка,,Новый УникальныйИдентификатор());
		ОткрытьЗначение(Расшифровка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТаблицаСчетовСчетВыставленПриИзмененииНаСервере(Контрагент,СчетВыставлен)
	НаборЗаписей = РегистрыСведений.ВыставленныеСчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	СтрокаЗаписи = НаборЗаписей.Добавить();
	СтрокаЗаписи.Период = Период;
	СтрокаЗаписи.Контрагент = Контрагент;
	СтрокаЗаписи.Выставлен = СчетВыставлен;
	НаборЗаписей.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовСчетВыставленПриИзменении(Элемент)
	ТаблицаСчетовСчетВыставленПриИзмененииНаСервере(Элементы.ТаблицаСчетов.ТекущиеДанные.Контрагент,Элементы.ТаблицаСчетов.ТекущиеДанные.СчетВыставлен);
	ОбновитьТекстВыставленоСчетов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элементы.ТаблицаСчетов.ТекущиеДанные.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстВыставленоСчетов()
	НеобходимоСчетов = ТаблицаСчетов.Количество();
	ВыставленоСчетов = 0;
	Для Каждого Счет Из ТаблицаСчетов Цикл
		ВыставленоСчетов = ВыставленоСчетов + ?(Счет.СчетВыставлен,1,0);
	КонецЦикла;
	Элементы.ТекстВыставленоСчетов.Заголовок = "Выставлено счетов: " + ВыставленоСчетов + "/" + НеобходимоСчетов;
КонецПроцедуры