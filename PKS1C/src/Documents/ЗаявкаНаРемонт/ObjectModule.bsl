
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = Склад.ПрефиксДокументов + "-";
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	
	СуммаТоваровИУслуг = 0;
	
	Для Каждого СуммаУслуг ИЗ ЗИПиУслуги Цикл
		
		СуммаТоваровИУслуг = СуммаТоваровИУслуг + СуммаУслуг.Сумма;
		
	КонецЦикла;
	
	
	СуммаОплат = 0;
	
	Для Каждого СуммаПлатежей ИЗ Оплата Цикл
		
		СуммаОплат = СуммаОплат + СуммаПлатежей.Оплата;
		
	КонецЦикла;
	
	
КонецПроцедуры

//Процедура ОбработкаПроведения(Отказ, Режим)
//	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
//	// Данный фрагмент построен конструктором.
//	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
//	
//	// регистр ОстаткиТоваров Расход
//	Движения.ОстаткиТоваров.Записывать = Истина;
//	Для Каждого ТекСтрокаЗИПиУслуги Из ЗИПиУслуги Цикл
//		Если ТекСтрокаЗИПиУслуги.Номенклатура.ВидНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
//			Движение = Движения.ОстаткиТоваров.Добавить();
//			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Движение.Период = Дата;
//			Движение.Номенклатура = ТекСтрокаЗИПиУслуги.Номенклатура;
//			Движение.Склад = Склад;
//			Движение.Количество = ТекСтрокаЗИПиУслуги.Количество;
//		КонецЕсли;
//	КонецЦикла;	
//	
//	Движения.Записать();
//	
//	//Если Режим = РежимПроведенияДокумента.Оперативный Тогда
//	///////////////////////////////////////////////////////////	
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ОстаткиТоваровОстатки.Номенклатура,
//		|	ОстаткиТоваровОстатки.Склад,
//		|	-ОстаткиТоваровОстатки.КоличествоОстаток КАК Количество
//		|ИЗ
//		|	РегистрНакопления.ОстаткиТоваров.Остатки(
//		|			,
//		|			Склад = &Склад
//		|				И Номенклатура В
//		|					(ВЫБРАТЬ
//		|						ЗаявкаНаРемонтЗИПиУслуги.Номенклатура
//		|					ИЗ
//		|						Документ.ЗаявкаНаРемонт.ЗИПиУслуги КАК ЗаявкаНаРемонтЗИПиУслуги
//		|					ГДЕ
//		|						ЗаявкаНаРемонтЗИПиУслуги.Ссылка = &Ссылка)) КАК ОстаткиТоваровОстатки
//		|ГДЕ
//		|	ОстаткиТоваровОстатки.КоличествоОстаток < 0";
//		
//		Запрос.УстановитьПараметр("Склад", Склад);
//		Запрос.УстановитьПараметр("Ссылка", Ссылка);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		Если НЕ РезультатЗапроса.Пустой() Тогда
//			
//			Отказ = Истина;
//			
//			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//			
//			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//				
//				Сообщить("Недостаточно товара " + ВыборкаДетальныеЗаписи.Номенклатура + " в количестве " + ВыборкаДетальныеЗаписи.Количество);
//				
//			КонецЦикла;
//			
//		КонецЕсли;
//	////////////////////////////////////////////////////////////	
//	//КонецЕсли;
//	
//	Если НЕ Отказ Тогда
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	СебестоимостьТоваровОстатки.Номенклатура,
//		|	СебестоимостьТоваровОстатки.Склад,
//		|	СебестоимостьТоваровОстатки.СуммаОстаток КАК Сумма
//		|ИЗ
//		|	РегистрНакопления.СебестоимостьТоваров.Остатки(
//		|			&МоментВремени,
//		|			Склад = &Склад
//		|				И Номенклатура В
//		|					(ВЫБРАТЬ
//		|						ЗаявкаНаРемонтЗИПиУслуги.Номенклатура
//		|					ИЗ
//		|						Документ.ЗаявкаНаРемонт.ЗИПиУслуги КАК ЗаявкаНаРемонтЗИПиУслуги
//		|					ГДЕ
//		|						ЗаявкаНаРемонтЗИПиУслуги.Ссылка = &Ссылка)) КАК СебестоимостьТоваровОстатки
//		|ГДЕ
//		|	СебестоимостьТоваровОстатки.Номенклатура.ВидНоменклатуры <> &ВидНоменклатуры";
//		
//		Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
//		Запрос.УстановитьПараметр("Склад", Склад);
//		Запрос.УстановитьПараметр("Ссылка", Ссылка);
//		Запрос.УстановитьПараметр("ВидНоменклатуры", Перечисления.ТипыНоменклатуры.Услуга);
//		
//		РезультатЗапроса = Запрос.Выполнить();
//		
//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//		
//		Движения.СебестоимостьТоваров.Записывать = Истина;
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			
//			
//			ЗапросКолво = Новый Запрос;
//			ЗапросКолво.Текст = 
//			"ВЫБРАТЬ
//			|	ОстаткиТоваровОстатки.Номенклатура,
//			|	ОстаткиТоваровОстатки.Склад,
//			|	ОстаткиТоваровОстатки.КоличествоОстаток Как Количество
//			|ИЗ
//			|	РегистрНакопления.ОстаткиТоваров.Остатки(&МоментВремени, ) КАК ОстаткиТоваровОстатки
//			|ГДЕ
//			|	ОстаткиТоваровОстатки.Номенклатура = &ИскомаяНоменклатура";
//			
//			ЗапросКолво.УстановитьПараметр("МоментВремени", МоментВремени());
//			ЗапросКолво.УстановитьПараметр("ИскомаяНоменклатура", ВыборкаДетальныеЗаписи.Номенклатура);
//			
//			РезультатЗапросаКолво = ЗапросКолво.Выполнить();
//			
//			ВыборкаДетальныеЗаписиКолво = РезультатЗапросаКолво.Выбрать();
//			
//			Пока ВыборкаДетальныеЗаписиКолво.Следующий() Цикл
//				ОстатокНоменклатуры =  ВыборкаДетальныеЗаписиКолво.Количество;
//			КонецЦикла;
//			
//			
//			СебестоимостьЕдиницы = ВыборкаДетальныеЗаписи.Сумма / ОстатокНоменклатуры;
//			//Запись в регистр Себестоимость
//			Движение = Движения.СебестоимостьТоваров.Добавить();
//			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Движение.Период = Дата;
//			Движение.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
//			Движение.Склад = Склад;
//			
//			СтрокаТЧ = ЗИПиУслуги.Найти(ВыборкаДетальныеЗаписи.Номенклатура, "Номенклатура");
//			
//			Движение.Сумма = СебестоимостьЕдиницы * СтрокаТЧ.Количество;
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРемонт") Тогда
		// Заполнение шапки
		IMEI = ДанныеЗаполнения.IMEI;
		ВидОборудования = ДанныеЗаполнения.ВидОборудования;
		Клиент = ДанныеЗаполнения.Клиент;
		Модель = ДанныеЗаполнения.Модель;
		ПретензииКРаботе = "ГАРАНТИЙНЫЙ РЕМОНТ ПО ЗАЯВКЕ """ + ДанныеЗаполнения.Номер + """ со слов клиенета: ";
		Производитель = ДанныеЗаполнения.Производитель;
		СерийныйНомер = ДанныеЗаполнения.СерийныйНомер;
		Склад = ДанныеЗаполнения.Склад;
		СтатусЗаявки = Перечисления.СтатусыЗаявки.Принята;
		СуммаОплат = ДанныеЗаполнения.СуммаОплат;
		СуммаТоваровИУслуг = ДанныеЗаполнения.СуммаТоваровИУслуг;
		ТехническийПредставитель = ДанныеЗаполнения.ТехническийПредставитель;
		Характеристика = ДанныеЗаполнения.Характеристика;
		//Для Каждого ТекСтрокаЗИПиУслуги Из ДанныеЗаполнения.ЗИПиУслуги Цикл
		//	НоваяСтрока = ЗИПиУслуги.Добавить();
		//	НоваяСтрока.ЕденицаИзмерения = ТекСтрокаЗИПиУслуги.ЕденицаИзмерения;
		//	НоваяСтрока.Количество = ТекСтрокаЗИПиУслуги.Количество;
		//	НоваяСтрока.Номенклатура = ТекСтрокаЗИПиУслуги.Номенклатура;
		//	НоваяСтрока.Сумма = ТекСтрокаЗИПиУслуги.Сумма;
		//	НоваяСтрока.Цена = ТекСтрокаЗИПиУслуги.Цена;
		//КонецЦикла;
		//Для Каждого ТекСтрокаОплата Из ДанныеЗаполнения.Оплата Цикл
		//	НоваяСтрока = Оплата.Добавить();
		//	НоваяСтрока.ДатаПлатежа = ТекСтрокаОплата.ДатаПлатежа;
		//	НоваяСтрока.Оплата = ТекСтрокаОплата.Оплата;
		//КонецЦикла;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры
