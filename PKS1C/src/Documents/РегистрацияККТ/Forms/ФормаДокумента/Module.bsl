&НаКлиенте
Процедура ЗаписатьНастройкиККТ(Команда)
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	fptr.open();

	Если fptr.isOpened() Тогда
		//записываем параметры подключения к ОФД
		Если Не Объект.Автономность Тогда
			СерверОФД = СерверОФД();
			ПортОФД = ПортОФД();
			Если СерверОФД <> Неопределено И ПортОФД <> Неопределено Тогда
//				fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 273);
//			    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, СерверОФД);
//			    fptr.writeDeviceSetting();
//				fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 274);
//			    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, ПортОФД);
//			    fptr.writeDeviceSetting();

//				ЗаданиеJSON = "
//				|{""type"": ""setDeviceParameters""},
//				|""deviceParameters"" : [
//		        |{
//		        |   ""key"" : 273,
//		        |   ""value"" : " + СерверОФД + "
//		        |},
//		        |{
//		        |   ""key"" : 274,
//		        |   ""value"" : " + ПортОФД + "
//		        |}
//		        |]";

//				ЗаданиеJSON = "
//				|{
//				|   ""type"": ""setDeviceParameters"",
//				|
//				|   ""deviceParameters"" : [
//				|         {
//				|            ""key"" : 273,
//				|            ""value"" : """ + СерверОФД + """
//				|         },
//				|         {
//				|            ""key"" : 274,
//				|            ""value"" : """ + Формат(ПортОФД,"ЧГ=") + """ 
//				|         }
//				|      ]
//				|}";
//				fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
//    			fptr.processJson();
//
//			    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
//			    
//			    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
//			    
//			    Сообщить("Настройки ОФД записаны в ККТ.");
//			    
//			    Для Каждого Параметр Из result.deviceParameters Цикл
//			    	Если Параметр.Свойство("errorDescription") Тогда
//			    		Если Параметр.key = 273 Тогда
//			    			тАдресОФД = "Не установлен: " + Параметр.errorDescription; 
//			    		ИначеЕсли Параметр.key = 274 Тогда
//			    			тПортОФД = "Не установлен: " + Параметр.errorDescription;
//			    		КонецЕсли;
//			    	Иначе
//			    		Если Параметр.key = 273 Тогда
//			    			тАдресОФД = Параметр.value; 
//			    		ИначеЕсли Параметр.key = 274 Тогда
//			    			тПортОФД = Параметр.value;
//			    		КонецЕсли;
//			    	КонецЕсли;
//			    КонецЦикла;
//			    ПредварительныйРезультатРегистрации = "Записаны настройки:" + Символы.ПС + "Адрес ОФД: " + тАдресОФД + Символы.ПС + "Порт ОФД: " + тПортОФД;\
				ЗаписьНастроекОФДвККТ(fptr);
			Иначе
				Сообщить("Проверьте настройки подключения к ОФД!");
			КонецЕсли;
		КонецЕсли;
		
		fptr.close();
	Иначе
		Сообщить(fptr.errorDescription());
		fptr.close();
	КонецЕсли;
	
	fptr = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ВерсияФФДПриИзменении(Элемент)
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры


&НаКлиенте
Процедура АвтономностьПриИзменении(Элемент)
	//СведениеФФД1002АвтономныйРежим = Объект.Автономность;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Объект.Автономность);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Причина1ИзменениеАдресаПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина1ИзменениеАдреса);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Причина2СменаОФДПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина2СменаОФД);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Причина3ИзменениеСведенийОПримененииККТВСоставеАУПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина3ИзменениеСведенийОПримененииККТВСоставеАУ);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолныйВидФормы = Истина;
	СинхронноеИзменениеРеквизитов = Истина;
	Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		СведениеФФД1056Шифрование = Истина;
	Иначе
		ЧтениеПризнаковРегистрации();
	КонецЕсли;
	УстановкаВерсииФФД();
	УправлениеВидимостью(); 
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ВидФормыПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиККТ(Команда)
		Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	fptr.open();

	Если fptr.isOpened() Тогда
//		fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 273);
//		fptr.ReadDeviceSetting();
//		тАдресОФД = fptr.GetParamString(fptr.LIBFPTR_PARAM_SETTING_VALUE);
//		fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 274);
//		fptr.ReadDeviceSetting();
//	    тПортОФД = fptr.GetParamString(fptr.LIBFPTR_PARAM_SETTING_VALUE);
//	    ПредварительныйРезультатРегистрации = "Адрес ОФД: " + тАдресОФД + Символы.ПС + "Порт ОФД: " + Формат(тПортОФД,"ЧГ=");
		ПрочитатьНастройкиОФДсККТ(fptr);
		fptr.close();
	Иначе
		Сообщить(fptr.errorDescription());
		fptr.close();
	КонецЕсли;
	
	fptr = Неопределено;
КонецПроцедуры


&НаКлиенте
Процедура НайтиФНПоЗаводскомуНомеру(Команда)
	Если Не ЗначениеЗаполнено(ЗаводскойНомер) Тогда
		Сообщить("ОШИБКА! Введите заводской номер");
		Возврат;
	КонецЕсли;
	
	ФискальныйНакопитель = ПолучитьФискальныйНакопитель(ЗаводскойНомер);
	
	Если Не ФискальныйНакопитель = 0 Тогда
		Объект.ФискальныйНакопитель = ФискальныйНакопитель;
		МодельФН = ПолучитьМодельФискальногоНакопителя(ФискальныйНакопитель);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста                              
Функция ПолучитьФискальныйНакопитель(ЗаводскойНомер)
	ФискальныйНакопитель = Справочники.ФискальныеНакопители.НайтиПоКоду(СтрЗаменить(Строка(ЗаводскойНомер), Символы.НПП, ""));	
	Если ФискальныйНакопитель = Справочники.ФискальныеНакопители.ПустаяСсылка() Тогда
		Сообщить("Фискальных накопителей не найдено");
		Возврат 0;
	КонецЕсли;
	Возврат ФискальныйНакопитель;
КонецФункции

&НаКлиенте
Процедура НомерФДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодельФН = ПолучитьМодельФискальногоНакопителя(ВыбранноеЗначение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМодельФискальногоНакопителя(ФН)
	Возврат ФН.Модель;
КонецФункции

//&НаСервереБезКонтекста
//Функция ПередЗаписьюНаСервере(ВидФормы, ЗаводскойНомер, МодельФН)
//	Если ВидФормы = "Короткий" И Справочники.ФискальныеНакопители.НайтиПоКоду(ЗаводскойНомер) = Справочники.ФискальныеНакопители.ПустаяСсылка() Тогда
//		ФН = Справочники.ФискальныеНакопители.СоздатьЭлемент();
//		ФН.Код = ЗаводскойНомер;
//		ФН.Наименование = Формат(ЗаводскойНомер, "ЧГ=0");
//		ФН.Модель = МодельФН;
//		
//		Попытка
//			ФН.Записать();
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			Возврат Ложь;
//		КонецПопытки;
//		Сообщить("Фискальный накопитель " + ЗаводскойНомер + " был успешно записан");
//		Возврат ФН.Ссылка;
//	КонецЕсли;
//КонецФункции

&НаКлиенте
Процедура СформироватьЗаявление(Команда)
	Если ЭтаФорма.Модифицированность Тогда 
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ЗаписатьПродолжить","Записать и продолжить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);		
		Ответ = Вопрос("Перед формированием заявления необходимо записать документ. Продолжить?", СписокКнопок,,"ЗаписатьПродолжить","Продолжить?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаЗаявления = КаталогВременныхФайлов() + "Регистрация_" + ЗНККМ() + "_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd" )+ ".xls";
	
	ИННКлиента = ИННКлиента();
	КППКлиента = КППКлиента();
	ОГРНКлиента = ОГРНКлиента();
	ВидОперации = ВидОперации();
	
	НачалоИННКолонка = 40;
	НачалоИННСтрока = 4;
	
	НачалоКППКолонка = 40;
	НачалоКППСтрока = 6;
	
	НачалоОГРНКолонка = 40;
	НачалоОГРНСтрока = 1;
	
	ВидДокументаСтрока = 12;
	ВидДокументаКолонка = 27;
	
	НачалоПричиныПеререгистрацииСтрока = 15;
	НачалоПричиныПеререгистрацииКолонка = 33;
	
	НачалоПользовательККТКолонка = 1;
	НачалоПользовательККТСтрока = 17;
	
	НачалоПредставительКолонка = 1;
	НачалоПредставительСтрока = 36;
	
	ДостоверностьКолонка = 2;
	ДостоверностьСтрока = 33;
	
	НачалоДатаКолонка = 28;
	НачалоДатаСтрока = 45; 	
	
	НачалоККТКолонка = 55; 
	НачалоККТСтрока = 13;
	
	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие") Тогда               //регистрация/перерегистрация
	    ДатаВступленияПриказаФормы = Дата(2022,3,1);
	
		Если ТекущаяДата() < ДатаВступленияПриказаФормы Тогда 
			Ответ = Вопрос("Использовать новую форму?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НоваяФормаЗаявления = Истина;
			Иначе
				НоваяФормаЗаявления = Ложь;
			КонецЕсли;
		Иначе
			НоваяФормаЗаявления = Истина;
		КонецЕсли;
		
		Если НоваяФормаЗаявления Тогда
			ЗаписьМакета(ИмяФайлаЗаявления,"ЗаявлениеОРегистрации2022");
		Иначе
			ЗаписьМакета(ИмяФайлаЗаявления,"ЗаявлениеОРегистрации");
		КонецЕсли;
		
		Попытка
			// Создать объект. 
			Excel = Новый COMОбъект("Excel.Application"); 
		Исключение    
			Сообщить("Не удалось инициализировать Excel");    
			Возврат;    
		КонецПопытки;   
		
		Попытка
		    // Если при отработке следующего фрагмента кода произойдет ошибка
		    // объект "Excel.Application" будет закрыт.

		    // Открыть книгу, содержащую шаблон оформления.
			Excel.Workbooks.Open(ИмяФайлаЗаявления);
			Excel.DisplayAlerts = Ложь;
		    НомерКниги = Excel.Workbooks.Count;
		    Книга        = Excel.Workbooks.Item(НомерКниги);
		    //Лист        = Excel.ActiveSheet;
			
			//**************************************************
			//********************ЛИСТ 1************************
			//**************************************************
			Лист        = Excel.Sheets(1);
			
			//ИНН            
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоИННСтрока, НачалоИННКолонка, 12, 1, 3, 0, ИННКлиента());
			
			//КПП
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоКППСтрока, НачалоКППКолонка, 9, 1, 3, 0, КППКлиента());
			
			//ОГРН
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоОГРНСтрока, НачалоОГРНКолонка, 15, 1, 3, 0, ОГРНКлиента());
			
			//Регистрация/перерегистрация
			ЗаписьДанныхВКлеткиБланка(Лист, ВидДокументаСтрока, ВидДокументаКолонка, 1, 1, 0,0, ?(ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация"),"1","2"));
			
			//Причины перерегистрации
			Если ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда				
				Для НомерПричины = 1 По 8 Цикл
					Лист.Cells(НачалоПричиныПеререгистрацииСтрока, НачалоПричиныПеререгистрацииКолонка + (НомерПричины - 1) * 6).Value  = ?(ПроверитьБит(Объект.ПричиныПеререгистрации,НомерПричины),"1","2");
				КонецЦикла;
			Иначе
				Для НомерПричины = 1 По 8 Цикл
					Лист.Cells(НачалоПричиныПеререгистрацииСтрока, НачалоПричиныПеререгистрацииКолонка + (НомерПричины - 1) * 6).Value  = "2";
				КонецЦикла;
			КонецЕсли;
			
			//Пользователь ККТ
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоПользовательККТСтрока, НачалоПользовательККТКолонка, 40, 3, 3, 1, ИмяКлиента());
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоПредставительСтрока, НачалоПредставительКолонка, 20, 3, 3, 1, ИмяПредставителя());
			
			//Заполняет пользователь ККТ
			ЗаписьДанныхВКлеткиБланка(Лист, 33, 2, 1, 1, 3, 0, "1");
			
			//Дата
			ДатаСтрока = ДатаСтрока();
			//Число
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоДатаСтрока, НачалоДатаКолонка, 2, 1, 3, 0, Сред(ДатаСтрока,1,2));
			//Месяц
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоДатаСтрока, НачалоДатаКолонка + 3*3, 2, 1, 3, 0, Сред(ДатаСтрока,3,2));
			//Год
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоДатаСтрока, НачалоДатаКолонка + 3*6, 4, 1, 3, 0, Сред(ДатаСтрока,5,4));
			
			//**************************************************
			//********************ЛИСТ 2************************
			//**************************************************
			Лист        = Excel.Sheets(2);
			//Лист.Cells(48, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
				ЗаписьДанныхВКлеткиБланка(Лист, 21, 22, 20, 1, 3, 0, РНККТ());
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 3************************
			//**************************************************
			Лист        = Excel.Sheets(3);
			
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоККТСтрока, НачалоККТКолонка, 20, 2, 3, 1, ВРег(НаименованиеККТ()));			
			ЗаписьДанныхВКлеткиБланка(Лист, 17, 55, 20, 2, 3, 1, ЗНККТ());
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 55, 20, 6, 3, 1, НаименованиеФН());
			ЗаписьДанныхВКлеткиБланка(Лист, 33, 55, 20, 1, 3, 1, ЗНФН());
			ЗаписьДанныхВКлеткиБланка(Лист, 38, 31, 6, 1, 3, 0, АдресККТИндекс());
			ЗаписьДанныхВКлеткиБланка(Лист, 38, 115, 2, 1, 3, 0, АдресККТРегион());
			ЗаписьДанныхВКлеткиБланка(Лист, 40, 31, 29, 1, 3, 0, АдресККТРайон());
			ЗаписьДанныхВКлеткиБланка(Лист, 42, 31, 29, 1, 3, 0, АдресККТГород());
			ЗаписьДанныхВКлеткиБланка(Лист, 44, 31, 29, 1, 3, 0, АдресККТНаселенныйПункт());
			
			//**************************************************
			//********************ЛИСТ 4************************
			//**************************************************
			Лист        = Excel.Sheets(4);
			
			ЗаписьДанныхВКлеткиБланка(Лист, 9, 31, 30, 1, 3, 0, АдресККТУлица());
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 31, 8, 1, 3, 0, АдресККТДом()); 
			ЗаписьДанныхВКлеткиБланка(Лист, 13, 31, 8, 1, 3, 0, АдресККТКорпус());
			ЗаписьДанныхВКлеткиБланка(Лист, 15, 31, 8, 1, 3, 0, АдресККТКвартира());
			ЗаписьДанныхВКлеткиБланка(Лист, 18, 52, 20, 4, 3, 1, АдресККТМестоПрименения());
			ЗаписьДанныхВКлеткиБланка(Лист, 27, 52, 1, 1, 0, 0, ?(Объект.Автономность,"1","2"));
			
			//**************************************************
			//********************ЛИСТ 5************************
			//**************************************************
			Лист        = Excel.Sheets(5);
			//Лист.Cells(52, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,1),"1","2"));	//080
			ЗаписьДанныхВКлеткиБланка(Лист, 18, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,2),"1","2"));  //090
			ЗаписьДанныхВКлеткиБланка(Лист, 23, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,10),"1","2")); //095
			ЗаписьДанныхВКлеткиБланка(Лист, 29, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,3),"1","2"));  //100
			Если НоваяФормаЗаявления Тогда																						
				ЗаписьДанныхВКлеткиБланка(Лист, 33, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,4),"1","2"));//105
				ЗаписьДанныхВКлеткиБланка(Лист, 37, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,5),"1","2"));//110
				ЗаписьДанныхВКлеткиБланка(Лист, 42, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,11),"1","2"));//120
			Иначе
				ЗаписьДанныхВКлеткиБланка(Лист, 32, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,4),"1","2"));//105
				ЗаписьДанныхВКлеткиБланка(Лист, 35, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,5),"1","2"));//110
				ЗаписьДанныхВКлеткиБланка(Лист, 39, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,6),"1","2"));//130
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 6************************
			//**************************************************
			Лист        = Excel.Sheets(6);

			Если НоваяФормаЗаявления Тогда
				ЗаписьДанныхВКлеткиБланка(Лист, 10, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,6),"1","2")); //130
				ЗаписьДанныхВКлеткиБланка(Лист, 15, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,7),"1","2")); //140
				ЗаписьДанныхВКлеткиБланка(Лист, 19, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,8),"1","2")); //150
				ЗаписьДанныхВКлеткиБланка(Лист, 24, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,9),"1","2")); //155
			Иначе
				ЗаписьДанныхВКлеткиБланка(Лист, 10, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,7),"1","2")); //140
				ЗаписьДанныхВКлеткиБланка(Лист, 14, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,8),"1","2")); //150
				ЗаписьДанныхВКлеткиБланка(Лист, 18, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,9),"1","2")); //155
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 7************************
			//**************************************************
			Лист        = Excel.Sheets(7);
			Если НоваяФормаЗаявления Тогда
				ЗаписьДанныхВКлеткиБланка(Лист, 11, 53, 20, 1, 3, 1, Объект.НомерАвтомата); //110.1
				
				//110.2
				ЗаписьДанныхВКлеткиБланка(Лист, 19, 31, 6, 1, 3, 0, Формат(Объект.АдресАУИндекс,"ЧГ="));
				ЗаписьДанныхВКлеткиБланка(Лист, 19, 115, 2, 1, 3, 0, ВРег(Объект.АдресАУРегион));
				ЗаписьДанныхВКлеткиБланка(Лист, 21, 31, 29, 1, 3, 0, ВРег(Объект.АдресАУРайон));
				ЗаписьДанныхВКлеткиБланка(Лист, 23, 31, 29, 1, 3, 0, ВРег(Объект.АдресАУГород));
				ЗаписьДанныхВКлеткиБланка(Лист, 25, 31, 29, 1, 3, 0, ВРег(Объект.АдресАУНаселенныйПункт));
				ЗаписьДанныхВКлеткиБланка(Лист, 27, 31, 30, 1, 3, 0, ВРег(Объект.АдресАУУлица));
				ЗаписьДанныхВКлеткиБланка(Лист, 29, 31, 8, 1, 3, 0, ВРег(Объект.АдресАУДом)); 
				ЗаписьДанныхВКлеткиБланка(Лист, 31, 31, 8, 1, 3, 0, ВРег(Объект.АдресАУКорпус));
				ЗаписьДанныхВКлеткиБланка(Лист, 33, 31, 8, 1, 3, 0, ВРег(Объект.АдресАУКвартира));
			КонецЕсли;

			//**************************************************
			//********************ЛИСТ 8************************
			//**************************************************
			Лист        = Excel.Sheets(8);
			Если НоваяФормаЗаявления Тогда
				ЗаписьДанныхВКлеткиБланка(Лист, 9, 53, 20, 3, 3, 1, ВРег(Объект.АдресАУМестоПрименения)); //110.3
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 9************************
			//**************************************************
			Лист        = Excel.Sheets(9);

			ЗаписьДанныхВКлеткиБланка(Лист, 12, 55, 20, 4, 3, 1, НаименованиеОФД());
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 55, 12, 1, 3, 0, ИННОФД());

			//**************************************************
			//********************ЛИСТ 10************************
			//**************************************************
			Лист        = Excel.Sheets(10);

			//ФН не поврежден
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 56, 1, 1, 3, 1, "2");
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда				
				ЗаписьДанныхВКлеткиБланка(Лист, 18, 56, 8, 1, 3, 0, ФД());
				
				ДатаРегистрацииСтрока = ДатаРегистрациииСтрока();
				ЗаписьДанныхВКлеткиБланка(Лист, 22, 56, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,1,2));
				ЗаписьДанныхВКлеткиБланка(Лист, 22, 65, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,3,2));
				ЗаписьДанныхВКлеткиБланка(Лист, 22, 74, 4, 1, 3, 0, Сред(ДатаРегистрацииСтрока,5,4));
				ЗаписьДанныхВКлеткиБланка(Лист, 26, 56, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,9,2));
				ЗаписьДанныхВКлеткиБланка(Лист, 26, 65, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,11,2));
				
				ЗаписьДанныхВКлеткиБланка(Лист, 29, 56, 10, 1, 3, 0, ФПД());
				
				//замена ФН
				Если ПроверитьБит(Объект.ПричиныПеререгистрации,4) И ЗначениеЗаполнено(Объект.ДокументЗакрытияФН) Тогда
					ДатаЗакрытияСтрока = ДатаЗакрытияСтрока();
					
					ЗаписьДанныхВКлеткиБланка(Лист, 34, 56, 8, 1, 3, 0, ФДЗ());
				
					ДатаРегистрацииСтрока = ДатаРегистрациииСтрока();
					ЗаписьДанныхВКлеткиБланка(Лист, 38, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,1,2));
					ЗаписьДанныхВКлеткиБланка(Лист, 38, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,3,2));
					ЗаписьДанныхВКлеткиБланка(Лист, 38, 74, 4, 1, 3, 0, Сред(ДатаЗакрытияСтрока,5,4));
					ЗаписьДанныхВКлеткиБланка(Лист, 42, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,9,2));
					ЗаписьДанныхВКлеткиБланка(Лист, 42, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,11,2));
					
					ЗаписьДанныхВКлеткиБланка(Лист, 45, 56, 10, 1, 3, 0, ФПДЗ());

				КонецЕсли;
			КонецЕсли;
		
			Если Не ИспользуетсяАУ() Тогда
				Excel.Sheets(8).Delete();
				Excel.Sheets(7).Delete();
			КонецЕсли;
			
			ЗаписьДанныхВКлеткиБланка(Excel.Sheets(1), 26, 36, 3, 1, 3, 0, Формат(Excel.Sheets.Count,"ЧЦ=3; ЧВН="));
			Для НомерЛиста = 1 ПО Excel.Sheets.Count Цикл
				ЗаписьДанныхВКлеткиБланка(Excel.Sheets(НомерЛиста), 6, 76, 3, 1, 3, 0, Формат(НомерЛиста,"ЧЦ=3; ЧВН="));
			КонецЦикла;
			
			Excel.Visible = Истина;

		Исключение    
		    Сообщить(ОписаниеОшибки());
		    Excel.Quit();  
			УдалитьФайлы(ИмяФайлаЗаявления);
		КонецПопытки;
	Иначе 		//снятие с учета
		ЗаписьМакета(ИмяФайлаЗаявления,"ЗаявлениеОСнятии");
		Попытка
			// Создать объект. 
			Excel = Новый COMОбъект("Excel.Application"); 
		Исключение    
			Сообщить("Не удалось инициализировать Excel");    
			Возврат;    
		КонецПопытки;
		
		Попытка
			Excel.Workbooks.Open(ИмяФайлаЗаявления);
			Excel.DisplayAlerts = Ложь;
		    НомерКниги = Excel.Workbooks.Count;
		    Книга        = Excel.Workbooks.Item(НомерКниги);
			
			//**************************************************
			//********************ЛИСТ 1************************
			//**************************************************
			Лист        = Excel.Sheets(1);
			
			//ИНН
			ЗаписьДанныхВКлеткиБланка(Лист, 1, 40, 12, 1, 3, 0, ИННКлиента());
			
			//Пользователь
			ЗаписьДанныхВКлеткиБланка(Лист, 10, 1, 40, 3, 3, 1, ИмяКлиента());
			
			ЗаписьДанныхВКлеткиБланка(Лист, 20, 55, 20, 1, 3, 1, ВРег(НаименованиеККТ()));			
			ЗаписьДанныхВКлеткиБланка(Лист, 22, 55, 20, 1, 3, 1, ЗНККТ());

			//ККТ не похищена
			ЗаписьДанныхВКлеткиБланка(Лист, 24, 55, 1, 1, 3, 1, "2");
			
			//ККТ не потеряна
			ЗаписьДанныхВКлеткиБланка(Лист, 27, 55, 1, 1, 3, 1, "2");
			
			//Заявлление от пользователя
			ЗаписьДанныхВКлеткиБланка(Лист, 37, 2, 1, 1, 3, 1, "1");
			ЗаписьДанныхВКлеткиБланка(Лист, 40, 1, 20, 3, 3, 1, ИмяПредставителя());
			
			//Дата
			ДатаСтрока = ДатаСтрока();
			//Число
			ЗаписьДанныхВКлеткиБланка(Лист, 49, 28, 2, 1, 3, 0, Сред(ДатаСтрока,1,2));
			//Месяц
			ЗаписьДанныхВКлеткиБланка(Лист, 49, 28+ 3*3, 2, 1, 3, 0, Сред(ДатаСтрока,3,2));
			//Год
			ЗаписьДанныхВКлеткиБланка(Лист, 49, 28 + 3*6, 4, 1, 3, 0, Сред(ДатаСтрока,5,4));
			
			//**************************************************
			//********************ЛИСТ 2************************
			//**************************************************
			Лист        = Excel.Sheets(2);

			//**************************************************
			//********************ЛИСТ 3************************
			//**************************************************
			Лист        = Excel.Sheets(3);
			
			ЗаписьДанныхВКлеткиБланка(Лист, 6, 40, 9, 1, 3, 0, КППКлиента());
			ЗаписьДанныхВКлеткиБланка(Лист, 1, 40, 15, 1, 3, 0, ОГРНКлиента());

			//ККТ не утеряна, ФН исправен
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 56, 1, 1, 3, 1, "2");
			
			//дата закрытия
			ДатаЗакрытияСтрока = ДатаРегистрациииСтрока();
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,1,2));
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,3,2));
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 74, 4, 1, 3, 0, Сред(ДатаЗакрытияСтрока,5,4));
			ЗаписьДанныхВКлеткиБланка(Лист, 25, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,9,2));
			ЗаписьДанныхВКлеткиБланка(Лист, 25, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,11,2));
			
			ЗаписьДанныхВКлеткиБланка(Лист, 17, 56, 8, 1, 3, 0, ФД());
			ЗаписьДанныхВКлеткиБланка(Лист, 28, 56, 10, 1, 3, 0, ФПД());
			
			//Нумерация листов
			ЗаписьДанныхВКлеткиБланка(Excel.Sheets(1), 30, 36, 3, 1, 3, 0, Формат(Excel.Sheets.Count,"ЧЦ=3; ЧВН="));
			ЗаписьДанныхВКлеткиБланка(Excel.Sheets(3), 6, 76, 3, 1, 3, 0, Формат("003","ЧЦ=3; ЧВН="));
			
			Excel.Visible = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		    Excel.Quit();  
			УдалитьФайлы(ИмяФайлаЗаявления);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗНККМ()
	Возврат Объект.ККТ.Код;
КонецФункции

&НаСервере
Функция ИННКлиента()
	Возврат Объект.Клиент.ИНН;
КонецФункции

&НаСервере
Функция ВидОперации()
	Возврат Объект.ВидОперации;
КонецФункции

&НаСервере
Функция ИмяКлиента()
	Возврат ВРег(Объект.Клиент.ПолноеНаименование);
КонецФункции

&НаСервере
Функция ИмяПредставителя()
	Возврат ВРег(Объект.Клиент.Представитель);
КонецФункции

&НаСервере
Функция ДатаСтрока()
	Возврат Строка(Формат(Объект.Дата,"ДФ=ddMMyyyy"));
КонецФункции

&НаСервере
Функция ДатаРегистрациииСтрока()
	Возврат Строка(Формат(Объект.ДатаФормированияФП,"ДФ=ddMMyyyyHHmm"));
КонецФункции

&НаСервере
Функция ДатаЗакрытияСтрока()
	Возврат Строка(Формат(Объект.ДокументЗакрытияФН.ДатаФормированияФП,"ДФ=ddMMyyyyHHmm"));
КонецФункции

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Элементы.СтраницаПричиныПеререгистрации.Видимость = ?(ВидОперации()=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация"),Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	Если ПолныйВидФормы Тогда		
		Элементы.ЗаводскойНомер.Видимость = Ложь;
		Элементы.МодельФН.Видимость = Ложь;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Ложь;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Ложь;
		
		Элементы.РегистрационныйНомерККТ.Видимость = Истина;
	    Элементы.НомерФД.Видимость = Истина;
	    Элементы.ДатаФормированияФП.Видимость = Истина;
	    Элементы.ФП.Видимость = Истина;
	    Элементы.ОператорФискальныхДанных.Видимость = ?(Объект.Автономность,Ложь,Истина);
	    Элементы.Автономность.Видимость = Истина;
	    Элементы.ВидОперации.Видимость = Истина;
		Элементы.СтраницаПричиныПеререгистрации.Видимость = ?(ВидОперации()=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация"),Истина,Ложь);
		Элементы.ГруппаПричиныПеререгистрацииФФД.Видимость = ?(Объект.ВерсияФФД<>ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105"),Истина,Ложь);
		Элементы.СтраницаМестоПримененияККТ.Видимость = Истина;
		Элементы.СтраницаСведенияОбИспользованииККТ.Видимость = Истина;
		Элементы.ДокументЗакрытияФН.Видимость = Причина4ЗаменаФН;
	
	Иначе		
		Элементы.ЗаводскойНомер.Видимость = Истина;
		Элементы.МодельФН.Видимость = Истина;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Истина;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Истина;
		
		Элементы.РегистрационныйНомерККТ.Видимость = Ложь;
	    Элементы.НомерФД.Видимость = Ложь;
	    Элементы.ДатаФормированияФП.Видимость = Ложь;
	    Элементы.ФП.Видимость = Ложь;
	    Элементы.ОператорФискальныхДанных.Видимость = Ложь;
	    Элементы.Автономность.Видимость = Ложь;
	    Элементы.ВидОперации.Видимость = Ложь;   
		Элементы.СтраницаПричиныПеререгистрации.Видимость = Ложь;
		Элементы.СтраницаМестоПримененияККТ.Видимость = Ложь;
		Элементы.СтраницаСведенияОбИспользованииККТ.Видимость = Ложь;
		Элементы.СтраницаСНО.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеПричинПеререгистрации()
	КодПричинПеререгистрации = ПолучитьКодПричинПеререгистрации();
	Причина1ИзменениеАдреса = ПроверитьБит(КодПричинПеререгистрации,1);
	Причина2СменаОФД = ПроверитьБит(КодПричинПеререгистрации,2);
	Причина3ИзменениеСведенийОПримененииККТВСоставеАУ = ПроверитьБит(КодПричинПеререгистрации,3);
	Причина4ЗаменаФН = ПроверитьБит(КодПричинПеререгистрации,4);
	Причина5ПереходНаРаботуСОФД = ПроверитьБит(КодПричинПеререгистрации,5);
	Причина6ПереходВАвтономныйРежим = ПроверитьБит(КодПричинПеререгистрации,6);
	Причина7ИзменениеРеквизитовОрганизации = ПроверитьБит(КодПричинПеререгистрации,7);
	Причина8Иные = ПроверитьБит(КодПричинПеререгистрации,8);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеПричинПеререгистрацииФФД()
	КодПричинПеререгистрацииФФД = Объект.КодПричиныПеререгистрацииККТФФД;
	ПричинаФФД0ЗаменаФН = ПроверитьБит(КодПричинПеререгистрацииФФД,0);
	ПричинаФФД1СменаОФД = ПроверитьБит(КодПричинПеререгистрацииФФД,1);
	ПричинаФФД2ИзменениеПользователя = ПроверитьБит(КодПричинПеререгистрацииФФД,2);
	ПричинаФФД3ИзменениеАдреса = ПроверитьБит(КодПричинПеререгистрацииФФД,3);
	ПричинаФФД4ПереходНаРаботуСОФД = ПроверитьБит(КодПричинПеререгистрацииФФД,4);
	ПричинаФФД5ПереходВАвтономныйРежим = ПроверитьБит(КодПричинПеререгистрацииФФД,5);
	ПричинаФФД6ИзменениеВерсииККТ = ПроверитьБит(КодПричинПеререгистрацииФФД,6);
	ПричинаФФД7ИзменениеСНО = ПроверитьБит(КодПричинПеререгистрацииФФД,7);
	ПричинаФФД8ИзменениеНомераУстройства = ПроверитьБит(КодПричинПеререгистрацииФФД,8);
	ПричинаФФД9ПереводВНеавтоматическийРежим = ПроверитьБит(КодПричинПеререгистрацииФФД,9);
	ПричинаФФД10ПереводВАвтоматическийРежим = ПроверитьБит(КодПричинПеререгистрацииФФД,10);
	ПричинаФФД11ПереводВРежимБСО = ПроверитьБит(КодПричинПеререгистрацииФФД,11);
	ПричинаФФД12ВыходИзРежимаБСО = ПроверитьБит(КодПричинПеререгистрацииФФД,12);
	ПричинаФФД13ВыходИзРежимаРасчетовВИнтернет = ПроверитьБит(КодПричинПеререгистрацииФФД,13);
	ПричинаФФД14ПереводВРежимРасчетовВИнтернет = ПроверитьБит(КодПричинПеререгистрацииФФД,14);
	ПричинаФФД15ВыходИзРежимаПлатежногоАгента = ПроверитьБит(КодПричинПеререгистрацииФФД,15);
	ПричинаФФД16ПереводВРежимПлатежногоАгента = ПроверитьБит(КодПричинПеререгистрацииФФД,16);
	ПричинаФФД17ВыходИзРежимаАзартныхИгр = ПроверитьБит(КодПричинПеререгистрацииФФД,17);
	ПричинаФФД18ПереводВРежимАзартныхИгр = ПроверитьБит(КодПричинПеререгистрацииФФД,18);
	ПричинаФФД19ВыходИзРежимаЛотерей = ПроверитьБит(КодПричинПеререгистрацииФФД,19);
	ПричинаФФД20ПереводВРежимЛотерей = ПроверитьБит(КодПричинПеререгистрацииФФД,20);
	ПричинаФФД21СменаФФД = ПроверитьБит(КодПричинПеререгистрацииФФД,21);
	ПричинаФФД31Иные = ПроверитьБит(КодПричинПеререгистрацииФФД,31);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСведенийОбИспользованииККТ()
	КодСведенийОбИспользованииККТ = ПолучитьКодСведенийОбИспользованииККТ();
	Сведение080 = ПроверитьБит(КодСведенийОбИспользованииККТ,1);
	Сведение090 = ПроверитьБит(КодСведенийОбИспользованииККТ,2);
	Сведение100 = ПроверитьБит(КодСведенийОбИспользованииККТ,3);
	Сведение105 = ПроверитьБит(КодСведенийОбИспользованииККТ,4);
	Сведение110 = ПроверитьБит(КодСведенийОбИспользованииККТ,5);
	Сведение120 = ПроверитьБит(КодСведенийОбИспользованииККТ,11);
	Сведение130 = ПроверитьБит(КодСведенийОбИспользованииККТ,6);
	Сведение140 = ПроверитьБит(КодСведенийОбИспользованииККТ,7);
	Сведение150 = ПроверитьБит(КодСведенийОбИспользованииККТ,8);
	Сведение155 = ПроверитьБит(КодСведенийОбИспользованииККТ,9);
	Сведение095 = ПроверитьБит(КодСведенийОбИспользованииККТ,10);
КонецПроцедуры


&НаСервере
Функция ПолучитьКодПричинПеререгистрации()
	Возврат Объект.ПричиныПеререгистрации;
КонецФункции

&НаСервере
Функция ПолучитьКодСведенийОбИспользованииККТ()
	Возврат Объект.СведенияОбИспользованииККТ;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаписьПризнаковРегистрации();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаПереходВАвтономныйРежимПриИзменении(Элемент)
	Если Причина6ПереходВАвтономныйРежим Тогда
		Причина5ПереходНаРаботуСОФД = Ложь;
	КонецЕсли;
	Если Причина6ПереходВАвтономныйРежим И СинхронноеИзменениеРеквизитов Тогда
		ПричинаФФД4ПереходНаРаботуСОФД = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина6ПереходВАвтономныйРежим);
	КонецЕсли;
	Если Причина6ПереходВАвтономныйРежим Тогда
		Объект.Автономность = Истина;
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Причина7ИзменениеРеквизитовОрганизацииПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина7ИзменениеРеквизитовОрганизации);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Причина8ИныеПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина8Иные);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД0ЗаменаФНПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД0ЗаменаФН);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД1СменаОФДПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД1СменаОФД);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД2ИзменениеПользователяПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД2ИзменениеПользователя);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД3ИзменениеАдресаПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД3ИзменениеАдреса);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД4ПереходНаРаботуСОФДПриИзменении(Элемент)
	Если ПричинаФФД4ПереходНаРаботуСОФД Тогда
		ПричинаФФД5ПереходВАвтономныйРежим = Ложь;;
	КонецЕсли;
	Если ПричинаФФД4ПереходНаРаботуСОФД И СинхронноеИзменениеРеквизитов Тогда
		Причина6ПереходВАвтономныйРежим = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД4ПереходНаРаботуСОФД);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД5ПереходВАвтономныйРежимПриИзменении(Элемент)
	Если ПричинаФФД5ПереходВАвтономныйРежим Тогда
		ПричинаФФД4ПереходНаРаботуСОФД = Ложь;
	КонецЕсли;
	Если ПричинаФФД5ПереходВАвтономныйРежим И СинхронноеИзменениеРеквизитов Тогда
		Причина5ПереходНаРаботуСОФД = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД5ПереходВАвтономныйРежим);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД6ИзменениеВерсииККТПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД6ИзменениеВерсииККТ);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД7ИзменениеСНОПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД7ИзменениеСНО);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД8ИзменениеНомераУстройстваПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД8ИзменениеНомераУстройства);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД9ПереводВНеавтоматическийРежимПриИзменении(Элемент)
	Если ПричинаФФД9ПереводВНеавтоматическийРежим Тогда
		ПричинаФФД10ПереводВАвтоматическийРежим = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД9ПереводВНеавтоматическийРежим);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД10ПереводВАвтоматическийРежимПриИзменении(Элемент)
	Если ПричинаФФД10ПереводВАвтоматическийРежим Тогда
		ПричинаФФД9ПереводВНеавтоматическийРежим = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД10ПереводВАвтоматическийРежим);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД11ПереводВРежимБСОПриИзменении(Элемент)
	Если ПричинаФФД11ПереводВРежимБСО Тогда
		ПричинаФФД12ВыходИзРежимаБСО = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД11ПереводВРежимБСО);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД12ВыходИзРежимаБСОПриИзменении(Элемент)
	Если ПричинаФФД12ВыходИзРежимаБСО Тогда
		ПричинаФФД11ПереводВРежимБСО = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД12ВыходИзРежимаБСО);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД13ВыходИзРежимаРасчетовВИнтернетПриИзменении(Элемент)
	Если ПричинаФФД13ВыходИзРежимаРасчетовВИнтернет Тогда
		ПричинаФФД14ПереводВРежимРасчетовВИнтернет = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД13ВыходИзРежимаРасчетовВИнтернет);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД14ПереводВРежимРасчетовВИнтернетПриИзменении(Элемент)
	Если ПричинаФФД14ПереводВРежимРасчетовВИнтернет Тогда
		ПричинаФФД13ВыходИзРежимаРасчетовВИнтернет = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД14ПереводВРежимРасчетовВИнтернет);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД15ВыходИзРежимаПлатежногоАгентаПриИзменении(Элемент)
	Если ПричинаФФД15ВыходИзРежимаПлатежногоАгента Тогда
		ПричинаФФД16ПереводВРежимПлатежногоАгента = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД15ВыходИзРежимаПлатежногоАгента);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД16ПереводВРежимПлатежногоАгентаПриИзменении(Элемент)
	Если ПричинаФФД16ПереводВРежимПлатежногоАгента Тогда
		ПричинаФФД15ВыходИзРежимаПлатежногоАгента = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД16ПереводВРежимПлатежногоАгента);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД17ВыходИзРежимаАзартныхИгрПриИзменении(Элемент)
	Если ПричинаФФД17ВыходИзРежимаАзартныхИгр Тогда
		ПричинаФФД18ПереводВРежимАзартныхИгр = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД17ВыходИзРежимаАзартныхИгр);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД18ПереводВРежимАзартныхИгрПриИзменении(Элемент)
	Если ПричинаФФД18ПереводВРежимАзартныхИгр Тогда
		ПричинаФФД17ВыходИзРежимаАзартныхИгр = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД18ПереводВРежимАзартныхИгр);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД19ВыходИзРежимаЛотерейПриИзменении(Элемент)
	Если ПричинаФФД19ВыходИзРежимаЛотерей Тогда
		ПричинаФФД20ПереводВРежимЛотерей = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД19ВыходИзРежимаЛотерей);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД20ПереводВРежимЛотерейПриИзменении(Элемент)
	Если ПричинаФФД20ПереводВРежимЛотерей Тогда
		ПричинаФФД19ВыходИзРежимаЛотерей = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД20ПереводВРежимЛотерей);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД21СменаФФДПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД21СменаФФД);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ПричинаФФД31ИныеПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,ПричинаФФД31Иные);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	ВерсияФФД = Объект.ВерсияФФД;
	
	Элементы.Автономность.Доступность = ?(Причина5ПереходНаРаботуСОФД ИЛИ Причина6ПереходВАвтономныйРежим,Ложь,Истина);
	Элементы.СведениеФФД1056Шифрование.Доступность = НЕ Объект.Автономность;

	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		Элементы.Сведение120.Доступность = Истина;
		Элементы.СведениеФФДМаркировка.Доступность = Истина;
		Элементы.СведениеФФДЛомбарднаяДеятельность.Доступность = Истина;
		Элементы.СведениеФФДСтраховаяДеятельность.Доступность = Истина;
		
		Элементы.СведениеАгента0БанковскийАгент.Доступность = Ложь;
		Элементы.СведениеАгента1БанковскийСубагент.Доступность = Ложь;
		Элементы.СведениеАгента2ПлАгент.Доступность = Ложь;
		Элементы.СведениеАгента3ПлСубагент.Доступность = Ложь;
		Элементы.СведениеАгента4Поверенный.Доступность = Ложь;
		Элементы.СведениеАгента5Комиссионер.Доступность = Ложь;
		Элементы.СведениеАгента6Агент.Доступность = Ложь;
	Иначе
		Элементы.Сведение120.Доступность = Ложь;
		Элементы.СведениеФФДМаркировка.Доступность = Ложь;
		Элементы.СведениеФФДЛомбарднаяДеятельность.Доступность = Ложь;
		Элементы.СведениеФФДСтраховаяДеятельность.Доступность = Ложь;
		
		Элементы.СведениеАгента0БанковскийАгент.Доступность = Истина;
		Элементы.СведениеАгента1БанковскийСубагент.Доступность = Истина;
		Элементы.СведениеАгента2ПлАгент.Доступность = Истина;
		Элементы.СведениеАгента3ПлСубагент.Доступность = Истина;
		Элементы.СведениеАгента4Поверенный.Доступность = Истина;
		Элементы.СведениеАгента5Комиссионер.Доступность = Истина;
		Элементы.СведениеАгента6Агент.Доступность = Истина;
	КонецЕсли;
	
	Если СведениеФФД1001АвтоматическийРежим Тогда
		Элементы.НомерАвтомата.Доступность = Истина;
	Иначе
		Элементы.НомерАвтомата.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Причина5ПереходНаРаботуСОФДПриИзменении(Элемент)
	Если Причина5ПереходНаРаботуСОФД Тогда
		Причина6ПереходВАвтономныйРежим = Ложь;
	КонецЕсли;
	Если Причина5ПереходНаРаботуСОФД И СинхронноеИзменениеРеквизитов Тогда
		ПричинаФФД5ПереходВАвтономныйРежим = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина5ПереходНаРаботуСОФД);
	КонецЕсли;
	Если Причина5ПереходНаРаботуСОФД Тогда
		Объект.Автономность = Ложь;
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаСервере
Функция КППКлиента()
	Возврат Объект.Клиент.КПП;
КонецФункции

&НаСервере
Функция ОГРНКлиента()
	Возврат Объект.Клиент.ОГРН;
КонецФункции

&НаКлиенте
Процедура ЗаписьДанныхВКлеткиБланка(Лист,НачальнаяСтрока,НачальнаяКолонка,МаксимальноеКоличествоКлетокГоризонтально,МаксимальноеКоличествоКлетокВертикально,ЯчеекМеждуКлеткамиГоризонтально, ЯчеекМеждуКлеткамиВертикально, Данные)
	ДлинаДанных = СтрДлина(Данные);
	НомерСтроки = НачальнаяСтрока;
	НомерКолонки = НачальнаяКолонка;
	
	Для НомерСимвола = 1 По ДлинаДанных Цикл
		Лист.Cells(НомерСтроки,НомерКолонки).Value = Сред(Данные,НомерСимвола,1);
		НомерКолонки = НомерКолонки + ЯчеекМеждуКлеткамиГоризонтально;
		Если НомерКолонки >= НачальнаяКолонка + (МаксимальноеКоличествоКлетокГоризонтально) * ЯчеекМеждуКлеткамиГоризонтально Тогда 
			НомерКолонки = НачальнаяКолонка;
			НомерСтроки = НомерСтроки + ЯчеекМеждуКлеткамиВертикально + 1;
			Если НомерСтроки > НачальнаяСтрока + (МаксимальноеКоличествоКлетокВертикально - 1)*(ЯчеекМеждуКлеткамиВертикально + 1) Тогда 
				//слишком длинное наименование обрезаем
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НаименованиеККТ()
	Возврат ВРег(Объект.ККТ.Модель.Производитель.Наименование + " " + Объект.ККТ.Модель.Наименование);
КонецФункции

&НаСервере
Функция ЗНККТ()
	Возврат Формат(Объект.ККТ.Код,"ЧГ=");
КонецФункции

&НаСервере
Функция НаименованиеФН()
	Возврат ВРег(Объект.ФискальныйНакопитель.Модель.НаименованиеПолное);
КонецФункции

&НаСервере
Функция ЗНФН()
	Возврат Формат(Объект.ФискальныйНакопитель.Код,"ЧГ=");
КонецФункции

&НаСервере
Функция РНККТ()
	Возврат Формат(Объект.РегистрационныйНомерККТ,"ЧГ=");
КонецФункции

&НаСервере
Функция АдресККТИндекс()
	Возврат Формат(Объект.АдресККТИндекс,"ЧГ=");
КонецФункции

&НаСервере
Функция АдресККТРегион()
	Возврат Формат(Объект.АдресККТРегион,"ЧГ=");
КонецФункции

&НаСервере
Функция АдресККТРайон()
	Возврат ВРег(Объект.АдресККТРайон);
КонецФункции

&НаСервере
Функция АдресККТГород()
	Возврат ВРег(Объект.АдресККТГород);
КонецФункции

&НаСервере
Функция АдресККТНаселенныйПункт()
	Возврат ВРег(Объект.АдресККТНаселенныйПункт);
КонецФункции

&НаСервере
Функция АдресККТУлица()
	Возврат ВРег(Объект.АдресККТУлица);
КонецФункции

&НаСервере
Функция АдресККТДом()
	Возврат ВРег(Объект.АдресККТДом);
КонецФункции

&НаСервере
Функция АдресККТКорпус()
	Возврат ВРег(Объект.АдресККТКорпус);
КонецФункции

&НаСервере
Функция АдресККТКвартира()
	Возврат ВРег(Объект.АдресККТКвартира);
КонецФункции

&НаСервере
Функция АдресККТМестоПрименения()
	Возврат ВРег(Объект.АдресККТМестоПрименения);
КонецФункции

&НаСервере
Функция НаименованиеОФД()
	Возврат ВРег(Объект.ОператорФискальныхДанных.Наименование);
КонецФункции

&НаСервере
Функция ИННОФД()
	Возврат Формат(Объект.ОператорФискальныхДанных.ИНН,"ЧГ=");
КонецФункции

&НаСервере
Функция ФПД()
	Возврат СтрЗаменить(Объект.ФискальныйПризнак," ","");
КонецФункции

&НаСервере
Функция ФД()
	Возврат СтрЗаменить(Объект.НомерФД," ","");
КонецФункции

&НаСервере
Функция ФПДЗ()
	Возврат СтрЗаменить(Объект.ДокументЗакрытияФН.ФискальныйПризнак," ","");
КонецФункции

&НаСервере
Функция ФДЗ()
	Возврат СтрЗаменить(Объект.ДокументЗакрытияФН.НомерФД," ","");
КонецФункции

&НаКлиенте
Процедура Причина4ЗаменаФНПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Причина4ЗаменаФН);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ДокументЗакрытияФННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ВидОперации,Клиент",ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие"),Объект.Клиент);
	ПараметрыОтбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Документ.РегистрацияККТ.ФормаВыбора", ПараметрыОтбора, Элемент,,,,Новый ОписаниеОповещения("РезультатЗакрытияВыбораДокументаЗакрытия",ЭтаФорма));
	//Форма = ПолучитьФорму("Документ.РегистрацияККТ.ФормаВыбора",ПараметрыОтбора,Элемент);
	//Объект.ДокументЗакрытияФН = Форма.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗакрытияВыбораДокументаЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Объект.ДокументЗакрытияФН = РезультатЗакрытия;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМакет(ИмяМакета)
	Макет = Документы.РегистрацияККТ.ПолучитьМакет(ИмяМакета);
	Возврат Макет;
КонецФункции

&НаКлиенте
Процедура ЗаписьМакета(ИмяФайла,ИмяМакета)
	Макет = ПолучитьМакет(ИмяМакета);
	Макет.Записать(ИмяФайла);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбАдресе(Адрес)
	Возврат РаботаСАдресами.СведенияОбАдресе(Адрес);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыАдресаПоКлассификатору(Команда)
	Если Команда.Имя = "ЗаполнитьПоКлассификаторуАдресККТ" Тогда
		Адрес = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов[0].Значение;
		Если ЗначениеЗаполнено(Адрес) Тогда	
			АдресСтруктурированный = СведенияОбАдресе(Адрес);
			Объект.АдресККТИндекс = АдресСтруктурированный.Индекс;
			Объект.АдресККТРегион = АдресСтруктурированный.КодРегиона;
			Объект.АдресККТРегионНаименование = АдресСтруктурированный.Регион + " " + НРег(АдресСтруктурированный.РегионТипКраткий);
			Объект.АдресККТРайон = АдресСтруктурированный.Район + " " + НРег(АдресСтруктурированный.РайонТипКраткий);
			Объект.АдресККТГород = АдресСтруктурированный.Город + " " + НРег(АдресСтруктурированный.ГородТипКраткий);
			Если АдресСтруктурированный.Город <> АдресСтруктурированный.НаселенныйПункт  Тогда
				Объект.АдресККТНаселенныйПункт = АдресСтруктурированный.НаселенныйПункт + " " + НРег(АдресСтруктурированный.НаселенныйПунктТипКраткий);
			Иначе
				Объект.АдресККТНаселенныйПункт = "";
			КонецЕсли;
			Объект.АдресККТУлица = АдресСтруктурированный.Улица + " " + НРег(АдресСтруктурированный.УлицаТипКраткий);
			Объект.АдресККТДом = АдресСтруктурированный.Здание.Номер;
			Объект.АдресККТДомТип = НРег(АдресСтруктурированный.Здание.ТипЗдания);
			
			Если АдресСтруктурированный.Помещения.Количество() <> 0 Тогда
				Объект.АдресККТКвартира = АдресСтруктурированный.Помещения[0].Номер;
				Объект.АдресККТКвартираТип = НРег(АдресСтруктурированный.Помещения[0].ТипПомещения);
			Иначе
				Объект.АдресККТКвартира = "";
				Объект.АдресККТКвартираТип = "";
			КонецЕсли;
			Если АдресСтруктурированный.Корпуса.Количество() <> 0 Тогда
				Объект.АдресККТКорпус = АдресСтруктурированный.Корпуса[0].Номер;
				Объект.АдресККТКорпусТип = НРег(АдресСтруктурированный.Корпуса[0].ТипКорпуса);
			Иначе
				Объект.АдресККТКорпус = "";
				Объект.АдресККТКорпусТип = "";
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли  Команда.Имя = "ЗаполнитьПоКлассификаторуАдресАУ" Тогда
		Адрес = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов[1].Значение;
		Если ЗначениеЗаполнено(Адрес) Тогда	
			АдресСтруктурированный = СведенияОбАдресе(Адрес);
			Объект.АдресАУИндекс = АдресСтруктурированный.Индекс;
			Объект.АдресАУРегион = АдресСтруктурированный.КодРегиона;
			Объект.АдресАУРегионНаименование = АдресСтруктурированный.Регион + " " + АдресСтруктурированный.РегионТипКраткий;
			Объект.АдресАУРайон = АдресСтруктурированный.Район + " " + АдресСтруктурированный.РайонТипКраткий;
			Объект.АдресАУГород = АдресСтруктурированный.Город + " " + АдресСтруктурированный.ГородТипКраткий;
			Если АдресСтруктурированный.Город <> АдресСтруктурированный.НаселенныйПункт  Тогда
				Объект.АдресККТНаселенныйПункт = АдресСтруктурированный.НаселенныйПункт + " " + НРег(АдресСтруктурированный.НаселенныйПунктТипКраткий);
			Иначе
				Объект.АдресККТНаселенныйПункт = "";
			КонецЕсли;
			Объект.АдресАУУлица = АдресСтруктурированный.Улица + " " + АдресСтруктурированный.УлицаТипКраткий;
			Объект.АдресАУДом = АдресСтруктурированный.Здание.Номер;
			Объект.АдресАУДомТип = НРег(АдресСтруктурированный.Здание.ТипЗдания);
			
			Если АдресСтруктурированный.Помещения.Количество() <> 0 Тогда
				Объект.АдресАУКвартира = АдресСтруктурированный.Помещения[0].Номер;
				Объект.АдресАУКвартираТип = НРег(АдресСтруктурированный.Помещения[0].ТипПомещения);
			Иначе
				Объект.АдресАУКвартира = "";
				Объект.АдресАУКвартираТип = "";
			КонецЕсли;
			Если АдресСтруктурированный.Корпуса.Количество() <> 0 Тогда
				Объект.АдресАУКорпус = АдресСтруктурированный.Корпуса[0].Номер;
				Объект.АдресАУКорпусТип = НРег(АдресСтруктурированный.Корпуса[0].ТипКорпуса);
			Иначе
				Объект.АдресАУКорпус = "";
				Объект.АдресАУКорпусТип = "";
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресПоКлассификторуНаСервере(ГруппаКИ)
	Если ГруппаКИ = "ГруппаМестоПримененияККТ" Тогда
		Адрес = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов[0].Значение;
		Если ЗначениеЗаполнено(Адрес) Тогда	
			АдресСтруктурированный = РаботаСАдресами.СведенияОбАдресе(Адрес);
			Объект.АдресККТИндекс = АдресСтруктурированный.Индекс;
			Объект.АдресККТРегион = АдресСтруктурированный.КодРегиона;
			Объект.АдресККТРегионНаименование = АдресСтруктурированный.Регион + " " + НРег(АдресСтруктурированный.РегионТипКраткий);
			Объект.АдресККТРайон = АдресСтруктурированный.Район + " " + НРег(АдресСтруктурированный.РайонТипКраткий);
			Объект.АдресККТГород = АдресСтруктурированный.Город + " " + НРег(АдресСтруктурированный.ГородТипКраткий);
			Если АдресСтруктурированный.Город <> АдресСтруктурированный.НаселенныйПункт  Тогда
				Объект.АдресККТНаселенныйПункт = АдресСтруктурированный.НаселенныйПункт + " " + НРег(АдресСтруктурированный.НаселенныйПунктТипКраткий);
			Иначе
				Объект.АдресККТНаселенныйПункт = "";
			КонецЕсли;
			Объект.АдресККТУлица = АдресСтруктурированный.Улица + " " + НРег(АдресСтруктурированный.УлицаТипКраткий);
			Объект.АдресККТДом = АдресСтруктурированный.Здание.Номер;
			Объект.АдресККТДомТип = НРег(АдресСтруктурированный.Здание.ТипЗдания);
			
			Если АдресСтруктурированный.Помещения.Количество() <> 0 Тогда
				Объект.АдресККТКвартира = АдресСтруктурированный.Помещения[0].Номер;
				Объект.АдресККТКвартираТип = НРег(АдресСтруктурированный.Помещения[0].ТипПомещения);
			Иначе
				Объект.АдресККТКвартира = "";
				Объект.АдресККТКвартираТип = "";
			КонецЕсли;
			Если АдресСтруктурированный.Корпуса.Количество() <> 0 Тогда
				Объект.АдресККТКорпус = АдресСтруктурированный.Корпуса[0].Номер;
				Объект.АдресККТКорпусТип = НРег(АдресСтруктурированный.Корпуса[0].ТипКорпуса);
			Иначе
				Объект.АдресККТКорпус = "";
				Объект.АдресККТКорпусТип = "";
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли  ГруппаКИ = "ГруппаАУАдресУстановкиАУ" Тогда
		Адрес = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов[1].Значение;
		Если ЗначениеЗаполнено(Адрес) Тогда	
			АдресСтруктурированный = РаботаСАдресами.СведенияОбАдресе(Адрес);
			Объект.АдресАУИндекс = АдресСтруктурированный.Индекс;
			Объект.АдресАУРегион = АдресСтруктурированный.КодРегиона;
			Объект.АдресАУРегионНаименование = АдресСтруктурированный.Регион + " " + АдресСтруктурированный.РегионТипКраткий;
			Объект.АдресАУРайон = АдресСтруктурированный.Район + " " + АдресСтруктурированный.РайонТипКраткий;
			Объект.АдресАУГород = АдресСтруктурированный.Город + " " + АдресСтруктурированный.ГородТипКраткий;
			Если АдресСтруктурированный.Город <> АдресСтруктурированный.НаселенныйПункт  Тогда
				Объект.АдресАУНаселенныйПункт = АдресСтруктурированный.НаселенныйПункт + " " + НРег(АдресСтруктурированный.НаселенныйПунктТипКраткий);
			Иначе
				Объект.АдресАУНаселенныйПункт = "";
			КонецЕсли;
			Объект.АдресАУУлица = АдресСтруктурированный.Улица + " " + АдресСтруктурированный.УлицаТипКраткий;
			Объект.АдресАУДом = АдресСтруктурированный.Здание.Номер;
			Объект.АдресАУДомТип = НРег(АдресСтруктурированный.Здание.ТипЗдания);
			
			Если АдресСтруктурированный.Помещения.Количество() <> 0 Тогда
				Объект.АдресАУКвартира = АдресСтруктурированный.Помещения[0].Номер;
				Объект.АдресАУКвартираТип = НРег(АдресСтруктурированный.Помещения[0].ТипПомещения);
			Иначе
				Объект.АдресАУКвартира = "";
				Объект.АдресАУКвартираТип = "";
			КонецЕсли;
			Если АдресСтруктурированный.Корпуса.Количество() <> 0 Тогда
				Объект.АдресАУКорпус = АдресСтруктурированный.Корпуса[0].Номер;
				Объект.АдресАУКорпусТип = НРег(АдресСтруктурированный.Корпуса[0].ТипКорпуса);
			Иначе
				Объект.АдресАУКорпус = "";
				Объект.АдресАУКорпусТип = "";
			КонецЕсли;
			
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификаторуАдресККТ(Команда)
	Адрес = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов[0].Значение;
	Если ЗначениеЗаполнено(Адрес) Тогда
//		ЧтениеАдреса = Новый ЧтениеJSON;
//		ЧтениеАдреса.УстановитьСтроку(Адрес);
//		АдресСтруктурированный = ПрочитатьJSON(ЧтениеАдреса);
//		ЧтениеАдреса.Закрыть();
//		Объект.АдресККТИндекс = Формат(АдресСтруктурированный.ZIPcode,"ЧГ=");
//		Объект.АдресККТРегион = Лев(Формат(АдресСтруктурированный.ifnsFLCode,"ЧГ="),2);
//		Объект.АдресККТРегионНаименование = АдресСтруктурированный.area + " " + АдресСтруктурированный.areaType;
//		Объект.АдресККТРайон = АдресСтруктурированный.district + " " + АдресСтруктурированный.districtType;
//		Объект.АдресККТГород = АдресСтруктурированный.city + " " + АдресСтруктурированный.cityType;
//		Если АдресСтруктурированный.localityType = "г" Тогда
//			Объект.АдресККТНаселенныйПункт = "";
//		Иначе
//			Объект.АдресККТНаселенныйПункт = АдресСтруктурированный.locality + " " + АдресСтруктурированный.localityType;
//		КонецЕсли;
//		Объект.АдресККТУлица = АдресСтруктурированный.street + " " + АдресСтруктурированный.streetType;
//		Объект.АдресККТДом = Формат(АдресСтруктурированный.houseNumber,"ЧГ=");
//		Объект.АдресККТДомТип = НРег(АдресСтруктурированный.houseType);
//		
//		Если АдресСтруктурированный.apartments.Количество() <> 0 Тогда
//			Объект.АдресККТКвартира = Формат(АдресСтруктурированный.apartments[0].number,"ЧГ=");
//			Объект.АдресККТКвартираТип = НРег(АдресСтруктурированный.apartments[0].type);
//		Иначе
//			Объект.АдресККТКвартира = "";
//			Объект.АдресККТКвартираТип = "";
//		КонецЕсли;
//		Если АдресСтруктурированный.buildings.Количество() <> 0 Тогда
//			Объект.АдресККТКорпус = Формат(АдресСтруктурированный.buildings[0].number,"ЧГ=");
//			Объект.АдресККТКорпусТип = НРег(АдресСтруктурированный.buildings[0].type);
//		Иначе
//			Объект.АдресККТКорпус = "";
//			Объект.АдресККТКорпусТип = "";
//		КонецЕсли;

		АдресСтруктурированный = СведенияОбАдресе(Адрес);
		Объект.АдресККТИндекс = АдресСтруктурированный.Индекс;
		Объект.АдресККТРегион = АдресСтруктурированный.КодРегиона;
		Объект.АдресККТРегионНаименование = АдресСтруктурированный.Регион + " " + АдресСтруктурированный.РегионТипКраткий;
		Объект.АдресККТРайон = АдресСтруктурированный.Район + " " + АдресСтруктурированный.РайонТипКраткий;
		Объект.АдресККТГород = АдресСтруктурированный.Город + " " + АдресСтруктурированный.ГородТипКраткий;
		Объект.АдресККТНаселенныйПункт = АдресСтруктурированный.НаселенныйПункт + " " + АдресСтруктурированный.НаселенныйПунктТипКраткий;
		Объект.АдресККТУлица = АдресСтруктурированный.Улица + " " + АдресСтруктурированный.УлицаТипКраткий;
		Объект.АдресККТДом = АдресСтруктурированный.Здание.Номер;
		Объект.АдресККТДомТип = АдресСтруктурированный.Здание.ТипЗдания;
		
		Если АдресСтруктурированный.Помещения.Количество() <> 0 Тогда
			Объект.АдресККТКвартира = АдресСтруктурированный.Помещения[0].Номер;
			Объект.АдресККТКвартираТип = АдресСтруктурированный.Помещения[0].ТипПомещения;
		Иначе
			Объект.АдресККТКвартира = "";
			Объект.АдресККТКвартираТип = "";
		КонецЕсли;
		Если АдресСтруктурированный.Корпуса.Количество() <> 0 Тогда
			Объект.АдресККТКорпус = АдресСтруктурированный.Корпуса[0].Номер;
			Объект.АдресККТКорпусТип = АдресСтруктурированный.Корпуса[0].ТипКорпуса;
		Иначе
			Объект.АдресККТКорпус = "";
			Объект.АдресККТКорпусТип = "";
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	//Форма = ПолучитьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса");
	//Результат = Форма.ОткрытьМодально();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	
	//Адрес установки ККТ
	СкрываемыеВиды = Новый Массив;
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресУстановкиАУ);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СкрываемыеВиды",СкрываемыеВиды);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения","ГруппаМестоПримененияККТ");
	ДополнительныеПараметры.Вставить("ПоложениеЗаголовкаКИ",ПоложениеЗаголовкаЭлементаФормы.Лево);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
	//Адрес установки АУ
	СкрываемыеВиды = Новый Массив;
	СкрываемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПримененияККТ);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СкрываемыеВиды",СкрываемыеВиды);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения","ГруппаАУАдресУстановкиАУ");
	ДополнительныеПараметры.Вставить("ПоложениеЗаголовкаКИ",ПоложениеЗаголовкаЭлементаФормы.Лево);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	 // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	 // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	 // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
    ЗаполнитьАдресПоКлассификторуНаСервере(ЭтотОбъект.Элементы[Результат.ИмяРеквизита].Родитель.Родитель.Имя);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура РегистрацияВККТ(Команда)	
	//Проверка заполнения
	//ПроверитьЗаполнение(ВидОперации());
	
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	//Сообщить(fptr.version());
	
	АдресСайтаФНС = "www.nalog.gov.ru";
	//ПолныйАдресПрименения = Строка(Формат(Объект.АдресККТИндекс,"ЧГ=")) + ","
	//					  + Объект.АдресККТРегион + "-" 
	//					  + Объект.АдресККТРайон + "," 
	//					  + Объект.АдресККТГород + "," 
	//					  + Объект.АдресККТНаселенныйПункт 
	//					  + Объект.АдресККТУлица + ","
	//					  + Объект.АдресККТДом + ","
	//					  + Объект.АдресККТКорпус + ","
	//					  + Объект.АдресККТКвартира;
	ПолныйАдресПрименения = ПолучитьПолныйАдресПрименения();
	МестоПрименения = Объект.АдресККТМестоПрименения;
	ИННОрганизации = ИННКлиента();
	НазваниеОрганизации = ИмяКлиента();
	
	СНО = 0;
	Если СНООСН Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_OSN);
	КонецЕсли;
	Если СНОУСНДоход Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_USN_INCOME);
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_USN_INCOME_OUTCOME);
	КонецЕсли;
	Если СНОЕНВД Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_ENVD);
	КонецЕсли;
	Если СНОЕСХН Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_ESN);
	КонецЕсли;
	Если СНОПатент Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_PATENT);
	КонецЕсли;
	
	
	
	EMailОрганизации = EMailОрганизации();
	РН = СокрЛП(Объект.РегистрационныйНомерККТ);
	Автономность = Объект.Автономность;   
	ИННОФД = ИННОФД();
	НазваниеОФД = НаименованиеОФД();
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		Иначе
			Ответ = Вопрос("Будет произведена операция в ККТ Атол с указанными настройками. Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Вы уверены?");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
//			Ответ = Вопрос("Для дальнейших действий необходимы права администратора ОС, продолжить?", РежимДиалогаВопрос.ДаНет,,,"Права администратора");
//			Если Ответ = КодВозвратаДиалога.Нет Тогда
//				Возврат
//			Иначе
////				ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
////				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX");
////				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				//УдалитьФайлы(ИмяФайлаDLL);
//				
//				СистемнаяИнформация = Новый СистемнаяИнформация;
//				Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
//				ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
//				КонецЕсли;
//				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
//				Возврат;
//			КонецЕсли;
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	//fptr.setSingleSetting(fptr.LIBFPTR_SETTING_COM_FILE, 'COM5');
    //fptr.setSingleSetting(fptr.LIBFPTR_SETTING_BAUDRATE, IntToStr(fptr.LIBFPTR_PORT_BR_115200));
	
	//Сообщить(fptr.applySingleSettings());
	//Сообщить(fptr.getSettings());
	fptr.open();
	//Сообщить("Статус подключения: " + fptr.isOpened());
	//fptr.deviceReboot();
	Если fptr.isOpened() Тогда
		//Синхронизация времени
		Ответ = Вопрос("Произвести синхронизацию времени?", РежимДиалогаВопрос.ДаНет,,,"Установка даты и времени");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДатаВремя = ТекущаяДата();
		    fptr.setParam(fptr.LIBFPTR_PARAM_DATE_TIME, ДатаВремя);
		    fptr.writeDateTime();
		КонецЕсли;
		
//Формат JSON
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация") Тогда 
			РезультатОперации = ВыполнитьОперациюККТРегистрация(fptr);
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
			Если Причина4ЗаменаФН Тогда
				РезультатОперации = ВыполнитьОперациюККТЗаменаФН(fptr);
			Иначе
				РезультатОперации = ВыполнитьОперациюККТПеререгистрация(fptr);
			КонецЕсли;
		Иначе
			РезультатОперации = ВыполнитьОперациюККТЗакрытиеФН(fptr);
		КонецЕсли;

		
		Если РезультатОперации.КодОшибки = -1 Тогда
			Сообщить(fptr.errorDescription());
			fptr.close();
			fptr = Неопределено;
			Возврат;
		КонецЕсли;
		
		//Получаем незаполненные данные:
		РезультатОтвет = РезультатОперации.Ответ;
		//срок действия ФН
		ИнфоОФН = ПолучитьИнфоОФН(fptr);
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие") Тогда
			Объект.СрокДействия = АутсорсРаботаСККТАтолКлиент.ПолучитьДатуИзСтрокиJSON(ИнфоОФН.fnInfo.validityDate);
		КонецЕсли;
		
		//ФД, ФП, Дата отчета
		Объект.ФискальныйПризнак = Формат(РезультатОтвет.fiscalParams.fiscalDocumentSign,"ЧГ=");
		Объект.ДатаФормированияФП = АутсорсРаботаСККТАтолКлиент.ПолучитьДатуИзСтрокиJSON(РезультатОтвет.fiscalParams.fiscalDocumentDateTime);
		Объект.НомерФД = Формат(РезультатОтвет.fiscalParams.fiscalDocumentNumber,"ЧГ=");
		
		//Устанавливаем настройки ОКП
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие") И Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
			УстановитьНастройкиОКП(fptr);
		КонецЕсли;
		
		fptr.close();
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить(fptr.errorDescription());
		fptr.close();
	КонецЕсли;
	
	fptr = Неопределено;

КонецПроцедуры

&НаСервере
Функция EMailОрганизации()
	Возврат Объект.ОператорФискальныхДанных.EMailОтправителя;
КонецФункции

&НаКлиенте
Процедура ПолучениеСНО()
	КодСведенийОбСНО = ПолучитьКодСведенийОбСНО();
	СНООСН = ПроверитьБит(КодСведенийОбСНО,1);
	СНОУСНДоход = ПроверитьБит(КодСведенийОбСНО,2);
	СНОУСНДоходМинусРасход = ПроверитьБит(КодСведенийОбСНО,3);
	СНОЕНВД = ПроверитьБит(КодСведенийОбСНО,4);
	СНОЕСХН = ПроверитьБит(КодСведенийОбСНО,5);
	СНОПатент = ПроверитьБит(КодСведенийОбСНО,6);
КонецПроцедуры

&НаСервере
Функция ПолучитьКодСведенийОбСНО()
	Возврат Объект.СведенияОбСНО;	
КонецФункции

&НаКлиенте
Процедура ПредварительныйПросмотрРегистрацииВККТ(Команда)
	ПредварительныйРезультатРегистрации = "";
	
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	АдресСайтаФНС = "www.nalog.gov.ru";
	ПолныйАдресПрименения = ПолучитьПолныйАдресПрименения();						  
							 
	МестоПрименения = Объект.АдресККТМестоПрименения;
	ИННОрганизации = ИННКлиента();
	НазваниеОрганизации = ИмяКлиента();
	
	EMailОрганизации = EMailОрганизации();
	РН = СокрЛП(Объект.РегистрационныйНомерККТ);
	Автономность = Объект.Автономность;   
	ИННОФД = ИННОФД();
	НазваниеОФД = НаименованиеОФД();
	ВерсияФФД = Объект.ВерсияФФД;
	
	АСБСО = СведениеФФД1110БСО;
	Если Не Автономность Тогда
		Шифрование = СведениеФФД1056Шифрование;
	Иначе
		Шифрование = Ложь;
	КонецЕсли;
	Автомат = СведениеФФД1001АвтоматическийРежим;
	НомерАвтомата = Объект.НомерАвтомата;
	ПринтерВАвтомате = СведениеФФД1221ПринтерВАвтомате;
	ТолькоИнтернет = СведениеФФД1108Интернет;
	Услуги = СведениеФФД1109РасчетыЗаУслуги;
	АзартныеИгры = СведениеФФД1193АзартныеИгры;
	Лотереи = СведениеФФД1126Лотереи;
	ПодакцизныйТовар = СведениеФФД1207ПодакцизныйТовар;
	
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		Маркировка = СведениеФФДМаркировка;
		СтраховаяДеятельность = СведениеФФДСтраховаяДеятельность;
		ЛомбарднаяДеятельность = СведениеФФДЛомбарднаяДеятельность;
	Иначе
		Маркировка = Ложь;
		СтраховаяДеятельность = Ложь;
		ЛомбарднаяДеятельность = Ложь;
	КонецЕсли;			
	
	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	
	//fptr.setSingleSetting(fptr.LIBFPTR_SETTING_COM_FILE, 'COM5');
    //fptr.setSingleSetting(fptr.LIBFPTR_SETTING_BAUDRATE, IntToStr(fptr.LIBFPTR_PORT_BR_115200));
	
	//Сообщить(fptr.applySingleSettings());
	//Сообщить(fptr.getSettings());
	//fptr.open();
	//Сообщить("Статус подключения: " + fptr.isOpened());
	//fptr.deviceReboot();
	//Если fptr.isOpened() Тогда
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация") Тогда 
		ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
		Если Причина4ЗаменаФН Тогда
			ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN;
		Иначе
			ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS;
		КонецЕсли;
	Иначе
		ВидОперации = fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE;
	КонецЕсли;

	//fptr.setParam(fptr.LIBFPTR_PARAM_FN_OPERATION_TYPE,ВидОперации);
	ТекстОтчета = "";
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION Тогда
		ТекстОтчета = ТекстОтчета + "Отчет о регистрации" + Символы.ПС;
	ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN Тогда
		Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда
			ТекстОтчета = ТекстОтчета + "Замена ФН" + Символы.ПС;
		Иначе
			ТекстОтчета = ТекстОтчета + "Отчет об изменении параметров регистрации" + Символы.ПС;
		КонецЕсли;
	ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS Тогда
		ТекстОтчета = ТекстОтчета + "Отчет об изменении параметров регистрации" + Символы.ПС;
	ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE Тогда
		ТекстОтчета = ТекстОтчета + "Закрытие архива ФН" + Символы.ПС;
	КонецЕсли;
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS Тогда
		Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда
			ТекстОтчета = ТекстОтчета + "Причина перерегистрации: ";
			Если Причина2СменаОФД Тогда
				//fptr.setParam(1101, 2);
				ТекстОтчета = ТекстОтчета + "изменение ОФД" + Символы.ПС;
			Иначе
				//fptr.setParam(1101, 3);
				ТекстОтчета = ТекстОтчета + "изменение реквизитов" + Символы.ПС;
			КонецЕсли;			
		Иначе
			ТекстОтчета = ТекстОтчета + "Изменение сведений о ККТ: " + СписокПричинОПеререгистрацииСтрокой() + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN И ВерсияФФД <> ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда
		ТекстОтчета = ТекстОтчета + "Изменение сведений о ККТ: " + СписокПричинОПеререгистрацииСтрокой() + Символы.ПС;
	КонецЕсли;
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION Тогда
		fptr.setParam(1018, ИННОрганизации);
		fptr.setParam(1037, РН);
		//fptr.setParam(1101, 0);
	КонецЕсли;
	
	Если ВидОперации <> fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE Тогда
			ТекстОтчета = ТекстОтчета + "РН ККТ: " + РН + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "ИНН: " + ИННОрганизации + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "ИНН ОФД: " + ИННОФД + Символы.ПС;
			Если Не Автономность Тогда				
				ТекстОтчета = ТекстОтчета + "ОФД: " + НазваниеОФД + Символы.ПС;
			КонецЕсли;
			ТекстОтчета = ТекстОтчета + НазваниеОрганизации + Символы.ПС;
			ТекстОтчета = ТекстОтчета + ПолныйАдресПрименения + Символы.ПС;
			Если Не Автономность Тогда
				ТекстОтчета = ТекстОтчета + "Эл.адр.отправителя: " + EMailОрганизации + Символы.ПС;
			КонецЕсли;
			ТекстОтчета = ТекстОтчета + "Место расчетов: " + МестоПрименения + Символы.ПС;
			
			Если Автономность Тогда
				ТекстОтчета = ТекстОтчета + "АВТОНОМН. РЕЖИМ" + Символы.ПС;
			ИначеЕсли Шифрование Тогда
				ТекстОтчета = ТекстОтчета + "ШФД" + Символы.ПС;
			КонецЕсли;
			Если Услуги Тогда
				ТекстОтчета = ТекстОтчета + "ККТ ДЛЯ УСЛУГ" + Символы.ПС;
			КонецЕсли;
			Если ПодакцизныйТовар Тогда
				ТекстОтчета = ТекстОтчета + "ПОДАКЦИЗНЫЕ ТОВАРЫ" + Символы.ПС;
			КонецЕсли;
			Если АзартныеИгры Тогда
				ТекстОтчета = ТекстОтчета + "ПРОВЕДЕНИЕ АЗАРТНОЙ ИГРЫ" + Символы.ПС;
			КонецЕсли;
			Если Лотереи Тогда
				ТекстОтчета = ТекстОтчета + "ПРОВЕДЕНИЕ ЛОТЕРЕИ" + Символы.ПС;
			КонецЕсли;
			Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
				Если Маркировка Тогда
					ТекстОтчета = ТекстОтчета + "ТМТ" + Символы.ПС;
				КонецЕсли;
				Если ЛомбарднаяДеятельность Тогда
					ТекстОтчета = ТекстОтчета + "ЛОМБАРДНАЯ ДЕЯТЕЛЬНОСТЬ" + Символы.ПС;
				КонецЕсли;
				Если СтраховаяДеятельность Тогда
					ТекстОтчета = ТекстОтчета + "СТРАХОВАЯ ДЕЯТЕЛЬНОСТЬ" + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			Если АСБСО Тогда
				ТекстОтчета = ТекстОтчета + "АС БСО" + Символы.ПС;
			КонецЕсли;
			Если ТолькоИнтернет Тогда
				ТекстОтчета = ТекстОтчета + "ККТ ДЛЯ ИНТЕРНЕТ" + Символы.ПС;
			КонецЕсли;
			Если ПринтерВАвтомате Тогда
				ТекстОтчета = ТекстОтчета + "ПРИНТЕР В АВТОМАТЕ" + Символы.ПС;
			КонецЕсли;
			Если Не Автономность Тогда
				ТекстОтчета = ТекстОтчета + "Сайт ФНС: " + АдресСайтаФНС + Символы.ПС;
			КонецЕсли;
			Если Автомат Тогда
				ТекстОтчета = ТекстОтчета + "АВТОМАТ. РЕЖИМ" + Символы.ПС;
			КонецЕсли;
			Если Автомат Тогда
				ТекстОтчета = ТекстОтчета + "АВТОМАТ: " + НомерАвтомата + Символы.ПС;
			КонецЕсли;
				
			ТекстОтчета = ТекстОтчета + "Системы налогооблажения:" + Символы.ПС;
			Если СНООСН Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "ОСН" + Символы.ПС;
			КонецЕсли;
			Если СНОУСНДоход Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "УСН Доход" + Символы.ПС;
			КонецЕсли;
			Если СНОУСНДоходМинусРасход Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "УСН Доход минус Расход" + Символы.ПС;
			КонецЕсли;
			Если СНОЕНВД Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "ЕНВД" + Символы.ПС;
			КонецЕсли;
			Если СНОЕСХН Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "ЕСХН" + Символы.ПС;
			КонецЕсли;
			Если СНОПатент Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "Патент" + Символы.ПС;
			КонецЕсли;
			
			Если ВерсияФФД <> ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
				Если СведениеАгента0БанковскийАгент Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "БАНК.ПЛ.АГЕНТ" + Символы.ПС;
				КонецЕсли;
				Если СведениеАгента1БанковскийСубагент Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "БАНК.ПЛ.СУБАГЕНТ" + Символы.ПС;
				КонецЕсли;
				Если СведениеАгента2ПлАгент Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "ПЛ.АГЕНТ" + Символы.ПС;
				КонецЕсли;
				Если СведениеАгента3ПлСубагент Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "ПЛ.СУБАГЕНТ" + Символы.ПС;
				КонецЕсли;
				Если СведениеАгента4Поверенный Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "ПОВЕРЕННЫЙ" + Символы.ПС;
				КонецЕсли;
				Если СведениеАгента5Комиссионер Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "КОМИССИОНЕР" + Символы.ПС;
				КонецЕсли;
				Если СведениеАгента6Агент Тогда
					ТекстОтчета = ТекстОтчета + Символы.Таб + "АГЕНТ" + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
			ТекстОтчета = ТекстОтчета + "ФФД ККТ: " + ВерсияФФД + Символы.ПС;
			
	КонецЕсли;
			
		//Если fptr.fnOperation() = -1 Тогда
		//	Сообщить(fptr.errorDescription());
		//КонецЕсли;
		
		//fptr.close();
	//КонецЕсли;
	
	fptr = Неопределено;
	
	ПредварительныйРезультатРегистрации = ТекстОтчета;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзККТ(Команда)
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		//Иначе
		//	Ответ = Вопрос("Будет произведена операция в ККТ Атол с указанными настройками. Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Вы уверены?");
		//	Если Ответ = КодВозвратаДиалога.Нет Тогда
		//		Возврат;
		//	КонецЕсли;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить чтение из ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
//			Ответ = Вопрос("Для дальнейших действий необходимы права администратора ОС, продолжить?", РежимДиалогаВопрос.ДаНет,,,"Права администратора");
//			Если Ответ = КодВозвратаДиалога.Нет Тогда
//				Возврат
//			Иначе
////				ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
////				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX");
////				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				//УдалитьФайлы(ИмяФайлаDLL);
//				СистемнаяИнформация = Новый СистемнаяИнформация;
//				Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
//				ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
//				КонецЕсли;
//				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
//				Возврат;
//			КонецЕсли;
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	fptr.open();
	Если fptr.isOpened() Тогда
		//данные о ККТ
//		fptr.setParam(fptr.LIBFPTR_PARAM_DATA_TYPE, fptr.LIBFPTR_DT_STATUS);
//    	fptr.queryData();
		
		СтатусККТ = ПолучитьСтатусККТ(fptr);
		ИнфоОККТ = ПолучитьИнфоОККТ(fptr);
		
		ФНУстановлен = СтатусККТ.deviceStatus.fnPresent;
		ФНФискализирован = СтатусККТ.deviceStatus.fnFiscal;
		ЗНККТ = ИнфоОККТ.deviceInfo.serial;
		МодельКККТ = ИнфоОККТ.deviceInfo.modelName;
		КодМоделиККТ = ИнфоОККТ.deviceInfo.model;
		Объект.ККТ = ПолучитьККТПоЗН(ЗНККТ);
		
		//данные об ФН
		Если ФНУстановлен Тогда
			ИнфоОФН = ПолучитьИнфоОФН(fptr);
			
			ЗНФН = ИнфоОФН.fnInfo.serial;
			Объект.ФискальныйНакопитель = ПолучитьФНПоЗН(ЗНФН);
		КонецЕсли;
			
		//считываем реквизиты регистрации
		Если ФНФискализирован Тогда

			РегистрационныеДанныеККТ = ПолучитьРегистрационныеДанныеККТ(fptr); 
			
			fptr.close();
			
			Объект.СведенияОбСНО = ПреобразоватьСНОККТJSONВСНО1С(РегистрационныеДанныеККТ.organization.taxationTypes);	
			ПолучениеСНО();
			Объект.Автономность = РегистрационныеДанныеККТ.device.offlineMode;
			
			ИННКлиента = СтрЗаменить(РегистрационныеДанныеККТ.organization.vatin," ","");
			ИмяКлиента = РегистрационныеДанныеККТ.organization.name;
			ИННОфд = РегистрационныеДанныеККТ.ofd.vatin;
			РН = РегистрационныеДанныеККТ.device.registrationNumber;
			
			АСБСО = РегистрационныеДанныеККТ.device.bso;
			Шифрование = РегистрационныеДанныеККТ.device.encryption;
			Автомат = РегистрационныеДанныеККТ.device.autoMode;
			НомерАвтомата = РегистрационныеДанныеККТ.device.machineNumber;
			ПринтерВАвтомате = РегистрационныеДанныеККТ.device.machineInstallation;
			ТолькоИнтернет = РегистрационныеДанныеККТ.device.internet;
			Услуги = РегистрационныеДанныеККТ.device.service;
			АзартныеИгры = РегистрационныеДанныеККТ.device.gambling;
			Лотереи = РегистрационныеДанныеККТ.device.lottery;
			ПодакцизныйТовар = РегистрационныеДанныеККТ.device.excise;
			АдресРасчетов = РегистрационныеДанныеККТ.organization.address;
			МестоРасчетов = РегистрационныеДанныеККТ.device.paymentsAddress;
			
			ПризнакиАгента = РегистрационныеДанныеККТ.organization.agents;
			
			ВерсияФФД = РегистрационныеДанныеККТ.device.ffdVersion;
			Если ВерсияФФД = "1.2" Тогда
				Маркировка = РегистрационныеДанныеККТ.device.marking;
				СтраховаяДеятельность = РегистрационныеДанныеККТ.device.insurance;
				ЛомбарднаяДеятельность = РегистрационныеДанныеККТ.device.pawnShop;
			Иначе
				Маркировка = Ложь;
				СтраховаяДеятельность = Ложь;
				ЛомбарднаяДеятельность = Ложь;		
			КонецЕсли;			
			
			Объект.Клиент = ПолучитьКлиентаПоИНН(ИННКлиента);
			Объект.ОператорФискальныхДанных = ПолучитьОФДПоИНН(ИННОфд);
			Объект.РегистрационныйНомерККТ = РН;
			Объект.ВерсияФФД = ПреобразоватьВерсиюФФДАтолВУчетную(ВерсияФФД);
			Сведение155 = ПодакцизныйТовар;
			Сведение120 = Маркировка;
			Сведение080 = Лотереи;
			Сведение090 = АзартныеИгры;
			Сведение110 = ПринтерВАвтомате;
			Сведение130 = ТолькоИнтернет;
			
			Объект.АдресККТМестоПрименения = МестоРасчетов;
			
			СведениеФФД1001АвтоматическийРежим = Автомат;
			СведениеФФД1002АвтономныйРежим = Объект.Автономность;
			СведениеФФД1056Шифрование = Шифрование;
			СведениеФФД1108Интернет = ТолькоИнтернет;
			СведениеФФД1109РасчетыЗаУслуги = Услуги;
			СведениеФФД1110БСО = АСБСО;
			СведениеФФД1126Лотереи = Лотереи;
			СведениеФФД1193АзартныеИгры = АзартныеИгры;
			СведениеФФД1221ПринтерВАвтомате = ПринтерВАвтомате;
			СведениеФФД1207ПодакцизныйТовар = ПодакцизныйТовар;
			СведениеФФДЛомбарднаяДеятельность = ЛомбарднаяДеятельность;
			СведениеФФДМаркировка = Маркировка;
			СведениеФФДСтраховаяДеятельность = СтраховаяДеятельность;
			Объект.НомерАвтомата = НомерАвтомата;
			
			Объект.ПризнакАгента = ПреобразоватьАгентККТJSONВАгент1С(ПризнакиАгента);
			ПолучениеСведенийОПризнакахАгента();
			Если СведениеАгента0БанковскийАгент Или СведениеАгента1БанковскийСубагент Тогда
				Сведение100 = Истина;
			КонецЕсли;
			Если СведениеАгента2ПлАгент Или СведениеАгента3ПлСубагент Тогда
				Сведение105 = Истина;
			КонецЕсли;
			
			//Мастер создания новых объектов
			Если ЗначениеЗаполнено(Объект.ККТ) Тогда
				ЗНККТ = Неопределено;
				МодельКККТ = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ФискальныйНакопитель) Тогда
				ЗНФН = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.Клиент) Тогда
				ИННКлиента = Неопределено;
				ИмяКлиента = Неопределено;
			КонецЕсли;
			СозданныеОбъекты = СоздатьНовыеОбъекты(ЗНККТ,МодельКККТ,ЗНФН,ИННКлиента,ИмяКлиента);
			
			Если СозданныеОбъекты <> Неопределено Тогда
							
				Если СозданныеОбъекты.Свойство("ККТ") Тогда
					Объект.ККТ = СозданныеОбъекты.ККТ;
				КонецЕсли;
				Если СозданныеОбъекты.Свойство("ФН") Тогда
					Объект.ФискальныйНакопитель = СозданныеОбъекты.ФН;
				КонецЕсли;
				Если СозданныеОбъекты.Свойство("Клиент") Тогда
					Объект.Клиент = СозданныеОбъекты.Клиент;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СозданныеОбъекты = СоздатьНовыеОбъекты(ЗНККТ,МодельКККТ,ЗНФН);
		КонецЕсли;
		
		УправлениеВидимостью();
		УправлениеДоступностью();
		
		Предупреждение("Обязательно проверьте все данные!");
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Функция ПроверитьЗаполнение(ВидОперации=Неопределено)
//	Если ВидОперации = Перечисления.ВидыОперацийККТ.Закрытие Тогда
//		//Проверка: НИЧЕГО, т.к. просто команда закрытия		
//	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийККТ.Регистрация Тогда
//		//Проверка:
//		//			Имя Клиента
//		//			ИНН Клиента
//		//			Адрес расчетов
//		//			Место расчетов
//		//			Имя ОФД
//		//			ИНН ОФД
//		//			email
//		//			СНО
//		//			РН
//		МассивПроверяемыхРеквизитов.Добавить(Объект.РегистрационныйНомерККТ);
//		МассивПроверяемыхРеквизитов = Новый Массив;
//		МассивПроверяемыхРеквизитов.Добавить(Объект.Клиент);
//		МассивПроверяемыхРеквизитов.Добавить(Объект.Клиент.ИНН);
//		МассивПроверяемыхРеквизитов.Добавить(
//											Объект.АдресККТГород
//											+ Объект.АдресККТДом
//											+ Объект.АдресККТИндекс
//											+ Объект.АдресККТКвартира
//											+ Объект.АдресККТКорпус
//											+ Объект.АдресККТНаселенныйПункт
//											+ Объект.АдресККТРайон
//											+ Объект.АдресККТРегион
//											+ Объект.АдресККТУлица
//											);
//		МассивПроверяемыхРеквизитов.Добавить(Объект.АдресККТМестоПрименения);
//		Если НЕ Объект.Автономность Тогда
//			МассивПроверяемыхРеквизитов.Добавить(Объект.ОператорФискальныхДанных);
//			МассивПроверяемыхРеквизитов.Добавить(Объект.ОператорФискальныхДанных.ИНН);
//			МассивПроверяемыхРеквизитов.Добавить(Объект.ОператорФискальныхДанных.EMailОтправителя);
//		КонецЕсли;
//		МассивПроверяемыхРеквизитов.Добавить(Объект.СведенияОбСНО);		
//	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийККТ.Перерегистрация Тогда
//	Иначе
//	КонецЕсли;
//КонецФункции

&НаКлиенте
Функция ПреобразоватьСНОККТВСНО1С(СНО)
	Возврат ПобитовыйСдвигВлево(СНО,1);
КонецФункции

&НаКлиенте
Функция ПреобразоватьСНОККТJSONВСНО1С(СНОJSON)
	СНО = 0;
	Для Каждого СНОККТ Из СНОJSON Цикл
		Если СНОККТ = "osn" Тогда
			СНО = УстановитьБит(СНО,1,Истина);
		ИначеЕсли СНОККТ = "usnIncome" Тогда
			СНО = УстановитьБит(СНО,2,Истина);
		ИначеЕсли СНОККТ = "usnIncomeOutcome" Тогда
			СНО = УстановитьБит(СНО,3,Истина);
		ИначеЕсли СНОККТ = "esn" Тогда
			СНО = УстановитьБит(СНО,5,Истина);
		ИначеЕсли СНОККТ = "patent" Тогда
			СНО = УстановитьБит(СНО,6,Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СНО;
КонецФункции

&НаКлиенте
Функция ПреобразоватьАгентККТJSONВАгент1С(АгентJSON)
	Агент = 0;
	Для Каждого АгентККТ Из АгентJSON Цикл
		Если АгентККТ = "bankPayingAgent" Тогда
			Агент = УстановитьБит(Агент,0,Истина);
		ИначеЕсли АгентККТ = "bankPayingSubagent" Тогда
			Агент = УстановитьБит(Агент,1,Истина);
		ИначеЕсли АгентККТ = "payingAgent" Тогда
			Агент = УстановитьБит(Агент,2,Истина);
		ИначеЕсли АгентККТ = "payingSubagent" Тогда
			Агент = УстановитьБит(Агент,3,Истина);
		ИначеЕсли АгентККТ = "attorney" Тогда
			Агент = УстановитьБит(Агент,4,Истина);
		ИначеЕсли АгентККТ = "commissionAgent" Тогда
			Агент = УстановитьБит(Агент,5,Истина);
		ИначеЕсли АгентККТ = "another" Тогда
			Агент = УстановитьБит(Агент,6,Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Агент;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлиентаПоИНН(ИННКлиента)
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИННКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Клиент = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Клиент;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОФДПоИНН(ИННОФД)
	ОФД = Справочники.ОператорыФискальныхДанных.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОФД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОператорыФискальныхДанных КАК ОФД
		|ГДЕ
		|	ОФД.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", Число(ИННОФД));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОФД = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ОФД;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФНПоЗН(ЗН)
	Возврат Справочники.ФискальныеНакопители.НайтиПоКоду(ЗН);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьККТПоЗН(ЗН)
	Возврат Справочники.КонтрольноКассоваяТехника.НайтиПоКоду(ЗН);
КонецФункции

&НаКлиенте
Функция СоздатьНовыеОбъекты(ЗНККТ=Неопределено,МодельККТ,ЗНФН=Неопределено,ИНН=Неопределено,Название="")
	Результат = Неопределено;
	ПараметрыСоздания = Новый Структура;
	Если ЗНККТ <> Неопределено Тогда
		ПараметрыСоздания.Вставить("ЗНККТ",ЗНККТ);
		ПараметрыСоздания.Вставить("МодельККТ",МодельККТ);
	КонецЕсли;
	Если ЗНФН <> Неопределено Тогда
		ПараметрыСоздания.Вставить("ЗНФН",ЗНФН);
	КонецЕсли;
	Если ИНН <> Неопределено Тогда 
		ПараметрыСоздания.Вставить("ИННКлиента",ИНН);
		ПараметрыСоздания.Вставить("ИмяКлиента",Название);
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.РегистрацияККТ.Форма.ФормаМастераСоздания",Новый Структура("СоздаваемыеОбъекты",ПараметрыСоздания));
	Результат = Форма.ОткрытьМодально();	
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СерверОФД()
	Если ЗначениеЗаполнено(Объект.ОператорФискальныхДанных) И ЗначениеЗаполнено(Объект.ОператорФискальныхДанных.АдресСервера) Тогда
		Возврат Объект.ОператорФискальныхДанных.АдресСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПортОФД()
	Если ЗначениеЗаполнено(Объект.ОператорФискальныхДанных) И ЗначениеЗаполнено(Объект.ОператорФискальныхДанных.ПортСервера) Тогда
		Возврат Объект.ОператорФискальныхДанных.ПортСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция СерверИСМ()
	Если ЗначениеЗаполнено(Объект.ОператорФискальныхДанных) И ЗначениеЗаполнено(Объект.ОператорФискальныхДанных.АдресСервераИСМ) Тогда
		Возврат Объект.ОператорФискальныхДанных.АдресСервераИСМ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПортИСМ()
	Если ЗначениеЗаполнено(Объект.ОператорФискальныхДанных) И ЗначениеЗаполнено(Объект.ОператорФискальныхДанных.ПортСервераИСМ) Тогда
		Возврат Объект.ОператорФискальныхДанных.ПортСервераИСМ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Сведение080ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение080);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение090ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение090);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение095ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение095);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение100ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение100);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение105ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение105);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение110ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение110);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение130ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение130);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение140ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение140);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение150ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение150);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение155ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение155);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура Сведение120ПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,Сведение120);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1002АвтономныйРежимПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1002АвтономныйРежим);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1056ШифрованиеПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1056Шифрование);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1108ИнтернетПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1108Интернет);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1109РасчетыЗаУслугиПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1109РасчетыЗаУслуги);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1110БСОПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1110БСО);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1126ЛотереиПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1126Лотереи);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1001АвтоматическийРежимПриИзменении(Элемент)
	Если НЕ СведениеФФД1001АвтоматическийРежим Тогда
		СведениеФФД1221ПринтерВАвтомате = Ложь;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1001АвтоматическийРежим);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1193АзартныеИгрыПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1193АзартныеИгры);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1207ПодакцизныйТоварПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1207ПодакцизныйТовар);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФД1221ПринтерВАвтоматеПриИзменении(Элемент)
	Если СведениеФФД1221ПринтерВАвтомате Тогда
		СведениеФФД1001АвтоматическийРежим = Истина;
	КонецЕсли;
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФД1221ПринтерВАвтомате);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();   
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФДЛомбарднаяДеятельностьПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФДЛомбарднаяДеятельность);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФДМаркировкаПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФДМаркировка);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеФФДСтраховаяДеятельностьПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеФФДСтраховаяДеятельность);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента0БанковскийАгентПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента0БанковскийАгент);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента2ПлАгентПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента2ПлАгент);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента3ПлСубагентПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента3ПлСубагент);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента4ПоверенныйПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента4Поверенный);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента5КомиссионерПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента5Комиссионер);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента6АгентПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента6Агент);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СведениеАгента1БанковскийСубагентПриИзменении(Элемент)
	Если СинхронноеИзменениеРеквизитов Тогда
		СинхронизацияРеквизитов(Элемент.Имя,СведениеАгента1БанковскийСубагент);
	КонецЕсли;
	ЗаписьПризнаковРегистрации();
	ЭтаФорма.Модифицированность = Истина;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СНООСНПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОУСНДоходПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОУСНДоходМинусРасходПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОПатентПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОЕНВДПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОЕСХНПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолныйАдресПрименения()
	ПолныйАдресПрименения = Строка(Формат(Объект.АдресККТИндекс,"ЧГ=")) + ", "
						  + Объект.АдресККТРегион + "-" + Объект.АдресККТРегионНаименование + ", " 
						  + ?(ЗначениеЗаполнено(Объект.АдресККТРайон),Объект.АдресККТРайон + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТГород),Объект.АдресККТГород + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТНаселенныйПункт),Объект.АдресККТНаселенныйПункт + ", ","")
						  + Объект.АдресККТУлица + ", "
						  + ?(ЗначениеЗаполнено(Объект.АдресККТДом),Объект.АдресККТДом + " " + Объект.АдресККТДомТип + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТКорпус),Объект.АдресККТКорпус + " " + Объект.АдресККТКорпусТип + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТКвартира),Объект.АдресККТКвартира + " " + Объект.АдресККТКвартираТип,"");
  	Если Прав(ПолныйАдресПрименения,2) = ", " Тогда
		ПолныйАдресПрименения = Лев(ПолныйАдресПрименения,СтрДлина(ПолныйАдресПрименения) - 2);
	КонецЕсли;
	Возврат ПолныйАдресПрименения;
КонецФункции

&НаКлиенте
Процедура ЗаписьНастроекОФДвККТ(fptr)
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить(50,"СНО по умолчанию");
	СоответствиеПараметров.Вставить(273,"Адрес ОФД");
	СоответствиеПараметров.Вставить(274,"Порт ОФД");
	СоответствиеПараметров.Вставить(276,"Канал обмена с ОФД");
	СоответствиеПараметров.Вставить(1000,"Адрес ИСМ");
	СоответствиеПараметров.Вставить(1001,"Порт ИСМ");
	СоответствиеПараметров.Вставить(1002,"Адрес ОКП");
	СоответствиеПараметров.Вставить(1003,"Порт ОКП");

	АдресОКП = "";
	ПортОКП = 0;
	ПараметрыОКП = ПолучитьПараметрыОКП();
	Если ЗначениеЗаполнено(ПараметрыОКП) Тогда
		АдресОКП = ПараметрыОКП.АдресОКП;
		ПортОКП = ПараметрыОКП.ПортОКП;
	КонецЕсли;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый Структура("key,value",50,ПолучитьСНОПоУмолчаниюПобитово()));
	МассивПараметров.Добавить(Новый Структура("key,value",273,СерверОФД()));
	МассивПараметров.Добавить(Новый Структура("key,value",274,ПортОФД()));
	МассивПараметров.Добавить(Новый Структура("key,value",1000,СерверИСМ()));
	МассивПараметров.Добавить(Новый Структура("key,value",1001,ПортИСМ()));
	МассивПараметров.Добавить(Новый Структура("key,value",1002,АдресОКП));
	МассивПараметров.Добавить(Новый Структура("key,value",1003,ПортОКП));
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("type","setDeviceParameters");
	СтруктураПараметров.Вставить("deviceParameters",МассивПараметров);

	ЗаданиеJSON = ПолучитьСтрокуJSONИзСтруктуры(СтруктураПараметров);

	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
	fptr.processJson();

    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
    
    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
    
    СтруктураОтвета = Новый Структура;
    
    Для Каждого Параметр Из result.deviceParameters Цикл
    	Если Параметр.Свойство("errorDescription") Тогда
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),"Не получен: " + Параметр.errorDescription);
    	Иначе
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),Формат(Параметр.value,"ЧГ="));
    	КонецЕсли;
    КонецЦикла;
    ПредварительныйРезультатРегистрации = "Записаны настройки:" + Символы.ПС;
    
    СоответствиеСНО = ПолучитьПобитовоеСоответствиеСНО();
    
    Для Каждого КлючИЗначение Из СтруктураОтвета Цикл
    	Если Число(Сред(КлючИЗначение.Ключ,2)) = 50 Тогда
    		Значение = СоответствиеСНО.Получить(Число(КлючИЗначение.Значение));
    	Иначе
    		Значение = КлючИЗначение.Значение;
    	КонецЕсли;
    	ПредварительныйРезультатРегистрации = ПредварительныйРезультатРегистрации + СоответствиеПараметров.Получить(Число(Сред(КлючИЗначение.Ключ,2))) + ": " + Значение + Символы.ПС;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиОФДсККТ(fptr)
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить(50,"СНО по умолчанию");
	СоответствиеПараметров.Вставить(273,"Адрес ОФД");
	СоответствиеПараметров.Вставить(274,"Порт ОФД");
	СоответствиеПараметров.Вставить(276,"Канал обмена с ОФД");
	СоответствиеПараметров.Вставить(1000,"Адрес ИСМ");
	СоответствиеПараметров.Вставить(1001,"Порт ИСМ");
	СоответствиеПараметров.Вставить(1002,"Адрес ОКП");
	СоответствиеПараметров.Вставить(1003,"Порт ОКП");
	
	ЗаданиеJSON = "
				|{
				|   ""type"": ""getDeviceParameters"",
				|
				|   ""keys"" : [ 50, 273, 274, 276, 1000, 1001, 1002, 1003 ]
				|}";
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
	fptr.processJson();

    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
    
    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
    
    СтруктураОтвета = Новый Структура();
    
    Для Каждого Параметр Из result.deviceParameters Цикл
    	Если Параметр.Свойство("errorDescription") Тогда
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),"Не получен: " + Параметр.errorDescription);
//    		Если Параметр.key = 273 Тогда
//    			тАдресОФД = "Не получен: " + Параметр.errorDescription; 
//    		ИначеЕсли Параметр.key = 274 Тогда
//    			тПортОФД = "Не получен: " + Параметр.errorDescription;
//    		
//    		КонецЕсли;
    	Иначе
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),Параметр.value);
//    		Если Параметр.key = 273 Тогда
//    			тАдресОФД = Параметр.value; 
//    		ИначеЕсли Параметр.key = 274 Тогда
//    			тПортОФД = Параметр.value;
//    		КонецЕсли;
    	КонецЕсли;
    КонецЦикла;
    //ПредварительныйРезультатРегистрации = "Считаны настройки:" + Символы.ПС + "Адрес ОФД: " + тАдресОФД + Символы.ПС + "Порт ОФД: " + тПортОФД;
    ПредварительныйРезультатРегистрации = "Считаны настройки:" + Символы.ПС;
    
    СоответствиеСНО = ПолучитьПобитовоеСоответствиеСНО();
    
    СоответствиеКаналовОбменаСОФД = Новый Соответствие();
    СоответствиеКаналовОбменаСОФД.Вставить(1,"EoU");
    СоответствиеКаналовОбменаСОФД.Вставить(2,"Ethernet");
    СоответствиеКаналовОбменаСОФД.Вставить(3,"Wi-Fi");
    СоответствиеКаналовОбменаСОФД.Вставить(4,"GSM");
    СоответствиеКаналовОбменаСОФД.Вставить(5,"EoT");
    СоответствиеКаналовОбменаСОФД.Вставить(6,"TCP/IP стек ОС");
    
    Для Каждого КлючИЗначение Из СтруктураОтвета Цикл
    	Если Число(Сред(КлючИЗначение.Ключ,2)) = 50 Тогда
    		Значение = СоответствиеСНО.Получить(Число(КлючИЗначение.Значение));
    	ИначеЕсли Число(Сред(КлючИЗначение.Ключ,2)) = 276 Тогда  
    		Значение = СоответствиеКаналовОбменаСОФД.Получить(Число(КлючИЗначение.Значение));
    	Иначе
    		Значение = КлючИЗначение.Значение;
    	КонецЕсли;
    	ПредварительныйРезультатРегистрации = ПредварительныйРезультатРегистрации + СоответствиеПараметров.Получить(Число(Сред(КлючИЗначение.Ключ,2))) + ": " + Значение + Символы.ПС;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьОперациюККТРегистрация(fptr)	
	ВерсияФФД = Объект.ВерсияФФД;
	organization = ЗаданиеJSONПолучитьИнформациюОбОрганизации();
	device = ЗаданиеJSONПолучитьПараметрыККТ();
	ofd = ЗаданиеJSONПолучитьПараметрыОФД();
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ism = ЗаданиеJSONПолучитьПараметрыИСМ();
	КонецЕсли;
	
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","registration");
	ЗаданиеJSON.Вставить("organization",organization);
	ЗаданиеJSON.Вставить("device",device);
	ЗаданиеJSON.Вставить("ofd",ofd);
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ЗаданиеJSON.Вставить("ism",ism);
	КонецЕсли;
	
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	КодОшибки = fptr.processJson();
	Ответ = ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA));
	Если КодОшибки = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(Ответ);
	КонецЕсли;
	
	Возврат Новый Структура("КодОшибки,Ответ",КодОшибки,Ответ);;
КонецФункции

&НаКлиенте
Функция ВыполнитьОперациюККТПеререгистрация(fptr)
	ВерсияФФД = Объект.ВерсияФФД; 
	organization = ЗаданиеJSONПолучитьИнформациюОбОрганизации();
	device = ЗаданиеJSONПолучитьПараметрыККТ();
	ofd = ЗаданиеJSONПолучитьПараметрыОФД();
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда
		reason = ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД105();
	Иначе
		changeInfoReasons = ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД11();
	КонецЕсли;
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ism = ЗаданиеJSONПолучитьПараметрыИСМ();
	КонецЕсли;
	
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","changeRegistrationParameters");
	ЗаданиеJSON.Вставить("organization",organization);
	ЗаданиеJSON.Вставить("device",device);
	ЗаданиеJSON.Вставить("ofd",ofd);
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда 
		ЗаданиеJSON.Вставить("reason",reason);
	Иначе
		ЗаданиеJSON.Вставить("changeInfoReasons",changeInfoReasons);
	КонецЕсли;
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ЗаданиеJSON.Вставить("ism",ism);
	КонецЕсли;
	
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	КодОшибки = fptr.processJson();
	Ответ = ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA));
	Если КодОшибки = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(Ответ);
	КонецЕсли;
	
	Возврат Новый Структура("КодОшибки,Ответ",КодОшибки,Ответ);
КонецФункции

&НаКлиенте
Функция ВыполнитьОперациюККТЗаменаФН(fptr)
	ВерсияФФД = Объект.ВерсияФФД;
	organization = ЗаданиеJSONПолучитьИнформациюОбОрганизации();
	device = ЗаданиеJSONПолучитьПараметрыККТ();
	ofd = ЗаданиеJSONПолучитьПараметрыОФД();
	Если ВерсияФФД <> ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда
		changeInfoReasons = ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД11();
	КонецЕсли;
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ism = ЗаданиеJSONПолучитьПараметрыИСМ();
	КонецЕсли;
	
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","fnChange");
	ЗаданиеJSON.Вставить("organization",organization);
	ЗаданиеJSON.Вставить("device",device);
	ЗаданиеJSON.Вставить("ofd",ofd);
	Если ВерсияФФД <> ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда 
		ЗаданиеJSON.Вставить("changeInfoReasons",changeInfoReasons);
	КонецЕсли;
	Если ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ЗаданиеJSON.Вставить("ism",ism);
	КонецЕсли;
	
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	КодОшибки = fptr.processJson();
	Ответ = ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA));
	Если КодОшибки = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(Ответ);
	КонецЕсли;
	
	Возврат Новый Структура("КодОшибки,Ответ",КодОшибки,Ответ);
КонецФункции

&НаКлиенте
Функция ВыполнитьОперациюККТЗакрытиеФН(fptr)
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","closeArchive");
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	КодОшибки = fptr.processJson();
	Ответ = ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA));
	Если КодОшибки = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(Ответ);
	КонецЕсли;
	
	Возврат Новый Структура("КодОшибки,Ответ",КодОшибки,Ответ);
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьИнформациюОбОрганизации()
	ЗаданиеJSONОрганизация = Новый Структура();
	ЗаданиеJSONОрганизация.Вставить("name",ИмяКлиента());
	ЗаданиеJSONОрганизация.Вставить("vatin",ИННКлиента());
	Если Не Объект.Автономность Тогда
		ЗаданиеJSONОрганизация.Вставить("email",EMailОрганизации());
	Иначе
		ЗаданиеJSONОрганизация.Вставить("email","");
	КонецЕсли;
	ЗаданиеJSONОрганизация.Вставить("address",ПолучитьПолныйАдресПрименения());
	ЗаданиеJSONОрганизация.Вставить("taxationTypes",ЗаданиеJSONПолучитьСписокСНО());
	Если Объект.ВерсияФФД <> ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ЗаданиеJSONОрганизация.Вставить("agents",ЗаданиеJSONПолучитьПризнакАгента());
	КонецЕсли;
	
	Возврат ЗаданиеJSONОрганизация;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПараметрыККТ()
	АвтономнаяРабота = СведениеФФД1002АвтономныйРежим;
	
	ЗаданиеJSONПараметрыККТ = Новый Структура();
	ЗаданиеJSONПараметрыККТ.Вставить("registrationNumber",СтрЗаменить(Объект.РегистрационныйНомерККТ," ",""));
	ЗаданиеJSONПараметрыККТ.Вставить("fnsUrl",?(АвтономнаяРабота,"","www.nalog.gov.ru"));
	ЗаданиеJSONПараметрыККТ.Вставить("offlineMode",АвтономнаяРабота);
	ЗаданиеJSONПараметрыККТ.Вставить("machineInstallation",СведениеФФД1221ПринтерВАвтомате);
	ЗаданиеJSONПараметрыККТ.Вставить("bso",СведениеФФД1110БСО);
	ЗаданиеJSONПараметрыККТ.Вставить("encryption",НЕ АвтономнаяРабота);
	ЗаданиеJSONПараметрыККТ.Вставить("autoMode",СведениеФФД1001АвтоматическийРежим);
	Если СведениеФФД1001АвтоматическийРежим Тогда
		ЗаданиеJSONПараметрыККТ.Вставить("machineNumber",Объект.НомерАвтомата);
	КонецЕсли;
	ЗаданиеJSONПараметрыККТ.Вставить("internet",СведениеФФД1108Интернет);
	ЗаданиеJSONПараметрыККТ.Вставить("service",СведениеФФД1109РасчетыЗаУслуги);
	ЗаданиеJSONПараметрыККТ.Вставить("excise",СведениеФФД1207ПодакцизныйТовар);
	ЗаданиеJSONПараметрыККТ.Вставить("gambling",СведениеФФД1193АзартныеИгры);
	ЗаданиеJSONПараметрыККТ.Вставить("lottery",СведениеФФД1126Лотереи);
	ЗаданиеJSONПараметрыККТ.Вставить("defaultTaxationType",ЗаданиеJSONПолучитьСНОПоУмолчанию());
	ЗаданиеJSONПараметрыККТ.Вставить("ofdChannel","proto");
	ЗаданиеJSONПараметрыККТ.Вставить("ffdVersion",ЗаданиеJSONПолучитьЗначениеФФД());
	ЗаданиеJSONПараметрыККТ.Вставить("paymentsAddress",Объект.АдресККТМестоПрименения);
	
	Если Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
		ЗаданиеJSONПараметрыККТ.Вставить("marking",СведениеФФДМаркировка);
		ЗаданиеJSONПараметрыККТ.Вставить("pawnShop",СведениеФФДЛомбарднаяДеятельность);
		ЗаданиеJSONПараметрыККТ.Вставить("insurance",СведениеФФДСтраховаяДеятельность);
	КонецЕсли;
	
	Возврат ЗаданиеJSONПараметрыККТ;
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя <> "СтраницаПричиныПеререгистрации" Тогда
		Элементы.ГруппаПричиныПеререгистрацииФФД.Скрыть();
	КонецЕсли;
	Если ТекущаяСтраница.Имя <> "СтраницаСведенияОбИспользованииККТ" Тогда
		Элементы.ГруппаСведенияОбИспользованииККТФФД.Скрыть();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция ЗаданиеJSONПолучитьПараметрыОФД()
	ЗаданиеJSONПараметрыОФД = Новый Структура();
	Если Не Объект.Автономность Тогда
		ЗаданиеJSONПараметрыОФД.Вставить("name",НаименованиеОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("vatin",ИННОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("host",СерверОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("port",ПортОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("dns","0.0.0.0");
	Иначе
		ЗаданиеJSONПараметрыОФД.Вставить("name","");
		ЗаданиеJSONПараметрыОФД.Вставить("vatin","");
		ЗаданиеJSONПараметрыОФД.Вставить("host","");
		ЗаданиеJSONПараметрыОФД.Вставить("port",0);
		ЗаданиеJSONПараметрыОФД.Вставить("dns","0.0.0.0");
	КонецЕсли;
	
	Возврат ЗаданиеJSONПараметрыОФД;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьСписокСНО()
	СНО = Новый Массив;
	Если СНООСН Тогда
		СНО.Добавить("osn");
	КонецЕсли;
	Если СНОУСНДоход Тогда
		СНО.Добавить("usnIncome");
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		СНО.Добавить("usnIncomeOutcome");
	КонецЕсли;
	Если СНОЕСХН Тогда
		СНО.Добавить("esn");
	КонецЕсли;
	Если СНОПатент Тогда
		СНО.Добавить("patent");
	КонецЕсли;
	
	Возврат СНО;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьСНОПоУмолчанию()
	Если СНООСН Тогда
		Возврат "osn";
	КонецЕсли;
	Если СНОУСНДоход Тогда
		Возврат "usnIncome";
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		Возврат "usnIncomeOutcome";
	КонецЕсли;
	Если СНОЕСХН Тогда
		Возврат "esn";
	КонецЕсли;
	Если СНОПатент Тогда
		Возврат "patent";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПризнакАгента()
	Агент = Новый Массив;
	Если СведениеАгента0БанковскийАгент Тогда
		Агент.Добавить("bankPayingAgent");
	КонецЕсли;
	Если СведениеАгента1БанковскийСубагент Тогда
		Агент.Добавить("bankPayingSubagent");
	КонецЕсли;
	Если СведениеАгента2ПлАгент Тогда
		Агент.Добавить("payingAgent");
	КонецЕсли;
	Если СведениеАгента3ПлСубагент Тогда
		Агент.Добавить("payingSubagent");
	КонецЕсли;
	Если СведениеАгента4Поверенный Тогда
		Агент.Добавить("attorney");
	КонецЕсли;
	Если СведениеАгента5Комиссионер Тогда
		Агент.Добавить("commissionAgent");
	КонецЕсли;
	Если СведениеАгента6Агент Тогда
		Агент.Добавить("another");
	КонецЕсли;
	
	Возврат Агент;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД105()
	Если Причина2СменаОФД ИЛИ Причина5ПереходНаРаботуСОФД Тогда
		Причина = "ofdChange";
	ИначеЕсли Причина1ИзменениеАдреса ИЛИ Причина7ИзменениеРеквизитовОрганизации Тогда 
		Причина = "attributesChange";
	Иначе
		Причина = "settingsChange";
	КонецЕсли;
	
	Возврат Причина;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД11()
	КодПричиныПеререгистрации = Объект.КодПричиныПеререгистрацииККТФФД;
	Причины = Новый Массив;
	Для Причина = 0 По 31 Цикл
		Если ПроверитьБит(КодПричиныПеререгистрации,Причина) Тогда
			Причины.Добавить(Причина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Причины;
КонецФункции

&НаКлиенте
Функция ПолучитьСНОПоУмолчаниюПобитово()
    Если СНООСН Тогда
		Возврат 1;
	КонецЕсли;
	Если СНОУСНДоход Тогда
		Возврат 2;
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		Возврат 4;
	КонецЕсли;
	Если СНОЕСХН Тогда
		Возврат 16;
	КонецЕсли;
	Если СНОПатент Тогда
		Возврат 32;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьПобитовоеСоответствиеСНО()
	СоответствиеСНО = Новый Соответствие;
    СоответствиеСНО.Вставить(0,"Не выбрана");
    СоответствиеСНО.Вставить(1,"ОСН");
    СоответствиеСНО.Вставить(2,"УСН Доход");
    СоответствиеСНО.Вставить(4,"УСН Доход минус Расход");
    СоответствиеСНО.Вставить(16,"ЕСХН");
    СоответствиеСНО.Вставить(32,"Патент");
    
    Возврат СоответствиеСНО;
КонецФункции

&НаКлиенте
Процедура УстановкаВерсииФФД()
   Если Не ЗначениеЗаполнено(Объект.ВерсияФФД) Тогда
   		Если Сведение120 Тогда
    		Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12");
   		Иначе
   			Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105");
   		КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаданиеJSONПолучитьЗначениеФФД()
	ФФД = "1.05";
	Если ЗначениеЗаполнено(Объект.ВерсияФФД) Тогда
		Если Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105") Тогда
			ФФД = "1.05";
		ИначеЕсли Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД11") Тогда
			ФФД = "1.1";
		ИначеЕсли Объект.ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12") Тогда
			ФФД = "1.2";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФФД;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПараметрыИСМ()
	ЗаданиеJSONПараметрыИСМ = Новый Структура;
	ЗаданиеJSONПараметрыИСМ.Вставить("host",СерверИСМ());
	ЗаданиеJSONПараметрыИСМ.Вставить("port",ПортИСМ());
	
	Возврат ЗаданиеJSONПараметрыИСМ;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьВерсиюФФДАтолВУчетную(ВерсияФФДАтол)
	ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105");
	Если ВерсияФФДАтол = "1.05" Тогда
		ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД105");
	ИначеЕсли ВерсияФФДАтол = "1.1" Тогда
		ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД11");
	ИначеЕсли ВерсияФФДАтол = "1.2" Тогда
		ВерсияФФД = ПредопределенноеЗначение("Перечисление.ВерсииФФД.ФФД12");
	КонецЕсли;
	
	Возврат ВерсияФФД;
КонецФункции

&НаКлиенте
Функция СписокПричинОПеререгистрацииСтрокой()
	КодПричиныПеререгистрации = Объект.КодПричиныПеререгистрацииККТФФД;
	Причины = Новый Массив;
	Для Причина = 0 По 31 Цикл
		Если ПроверитьБит(КодПричиныПеререгистрации,Причина) Тогда
			Причины.Добавить(Причина+1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(Причины,",");
КонецФункции

#Область ПобитовоеПреобразованиеПризнаков
&НаКлиенте
Процедура ПолучениеСведенийОбИспользованииККТвККТ()
	КодСведенийОбИспользованииККТ = Объект.СведенияОбИспользованииККТПоФФД;
	СведениеФФД1001АвтоматическийРежим = ПроверитьБит(КодСведенийОбИспользованииККТ,0);
	СведениеФФД1002АвтономныйРежим = ПроверитьБит(КодСведенийОбИспользованииККТ,1);
	СведениеФФД1056Шифрование = ПроверитьБит(КодСведенийОбИспользованииККТ,2);
	СведениеФФД1108Интернет = ПроверитьБит(КодСведенийОбИспользованииККТ,3);
	СведениеФФД1109РасчетыЗаУслуги = ПроверитьБит(КодСведенийОбИспользованииККТ,4);
	СведениеФФД1110БСО = ПроверитьБит(КодСведенийОбИспользованииККТ,5);
	СведениеФФД1126Лотереи = ПроверитьБит(КодСведенийОбИспользованииККТ,6);
	СведениеФФД1193АзартныеИгры = ПроверитьБит(КодСведенийОбИспользованииККТ,7);
	СведениеФФД1207ПодакцизныйТовар = ПроверитьБит(КодСведенийОбИспользованииККТ,8);
	СведениеФФД1221ПринтерВАвтомате = ПроверитьБит(КодСведенийОбИспользованииККТ,9);
	СведениеФФДЛомбарднаяДеятельность = ПроверитьБит(КодСведенийОбИспользованииККТ,10);
	СведениеФФДМаркировка = ПроверитьБит(КодСведенийОбИспользованииККТ,11);
	СведениеФФДСтраховаяДеятельность = ПроверитьБит(КодСведенийОбИспользованииККТ,12);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСведенийОПризнакахАгента()
	КодПризнакаАгента = Объект.ПризнакАгента;
	СведениеАгента0БанковскийАгент = ПроверитьБит(КодПризнакаАгента,0);
	СведениеАгента1БанковскийСубагент = ПроверитьБит(КодПризнакаАгента,1);
	СведениеАгента2ПлАгент = ПроверитьБит(КодПризнакаАгента,2);
	СведениеАгента3ПлСубагент = ПроверитьБит(КодПризнакаАгента,3);
	СведениеАгента4Поверенный = ПроверитьБит(КодПризнакаАгента,4);
	СведениеАгента5Комиссионер = ПроверитьБит(КодПризнакаАгента,5);
	СведениеАгента6Агент = ПроверитьБит(КодПризнакаАгента,6);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПричинПеререгистрации()
	ПричиныПеререгистрации = 0;
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,1,Причина1ИзменениеАдреса);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,2,Причина2СменаОФД);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,3,Причина3ИзменениеСведенийОПримененииККТВСоставеАУ);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,4,Причина4ЗаменаФН);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,5,Причина5ПереходНаРаботуСОФД);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,6,Причина6ПереходВАвтономныйРежим);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,7,Причина7ИзменениеРеквизитовОрганизации);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,8,Причина8Иные);
	Объект.ПричиныПеререгистрации = ПричиныПеререгистрации;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьПричинПеререгистрацииФФД()
	ПричиныПеререгистрацииФФД = 0;
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,0,ПричинаФФД0ЗаменаФН);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,1,ПричинаФФД1СменаОФД);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,2,ПричинаФФД2ИзменениеПользователя);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,3,ПричинаФФД3ИзменениеАдреса);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,4,ПричинаФФД4ПереходНаРаботуСОФД);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,5,ПричинаФФД5ПереходВАвтономныйРежим);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,6,ПричинаФФД6ИзменениеВерсииККТ);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,7,ПричинаФФД7ИзменениеСНО);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,8,ПричинаФФД8ИзменениеНомераУстройства);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,9,ПричинаФФД9ПереводВНеавтоматическийРежим);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,10,ПричинаФФД10ПереводВАвтоматическийРежим);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,11,ПричинаФФД11ПереводВРежимБСО);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,12,ПричинаФФД12ВыходИзРежимаБСО);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,13,ПричинаФФД13ВыходИзРежимаРасчетовВИнтернет);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,14,ПричинаФФД14ПереводВРежимРасчетовВИнтернет);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,15,ПричинаФФД15ВыходИзРежимаПлатежногоАгента);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,16,ПричинаФФД16ПереводВРежимПлатежногоАгента);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,17,ПричинаФФД17ВыходИзРежимаАзартныхИгр);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,18,ПричинаФФД18ПереводВРежимАзартныхИгр);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,19,ПричинаФФД19ВыходИзРежимаЛотерей);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,20,ПричинаФФД20ПереводВРежимЛотерей);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,21,ПричинаФФД21СменаФФД);
	ПричиныПеререгистрацииФФД = УстановитьБит(ПричиныПеререгистрацииФФД,31,ПричинаФФД31Иные);
	Объект.КодПричиныПеререгистрацииККТФФД = ПричиныПеререгистрацииФФД;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьСведенийОбИспользованииККТ()
	СведенияОбИспользованииККТ = 0;
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,1,Сведение080);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,2,Сведение090);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,3,Сведение100);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,4,Сведение105);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,5,Сведение110);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,6,Сведение130);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,7,Сведение140);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,8,Сведение150);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,9,Сведение155);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,10,Сведение095);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,11,Сведение120);
	Объект.СведенияОбИспользованииККТ = СведенияОбИспользованииККТ;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьСведенийОбИспользованииККТвККТ()
	СведенияОбИспользованииККТвККТ = 0;
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,0,СведениеФФД1001АвтоматическийРежим);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,1,СведениеФФД1002АвтономныйРежим);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,2,СведениеФФД1056Шифрование);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,3,СведениеФФД1108Интернет);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,4,СведениеФФД1109РасчетыЗаУслуги);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,5,СведениеФФД1110БСО);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,6,СведениеФФД1126Лотереи);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,7,СведениеФФД1193АзартныеИгры);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,8,СведениеФФД1207ПодакцизныйТовар);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,9,СведениеФФД1221ПринтерВАвтомате);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,10,СведениеФФДЛомбарднаяДеятельность);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,11,СведениеФФДМаркировка);
	СведенияОбИспользованииККТвККТ = УстановитьБит(СведенияОбИспользованииККТвККТ,12,СведениеФФДСтраховаяДеятельность);
	Объект.СведенияОбИспользованииККТПоФФД = СведенияОбИспользованииККТвККТ;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьСведенийОПризнакахАгента()
	ПризнакАгента = 0;
	ПризнакАгента = УстановитьБит(ПризнакАгента,0,СведениеАгента0БанковскийАгент);
	ПризнакАгента = УстановитьБит(ПризнакАгента,1,СведениеАгента1БанковскийСубагент);
	ПризнакАгента = УстановитьБит(ПризнакАгента,2,СведениеАгента2ПлАгент);
	ПризнакАгента = УстановитьБит(ПризнакАгента,3,СведениеАгента3ПлСубагент);
	ПризнакАгента = УстановитьБит(ПризнакАгента,4,СведениеАгента4Поверенный);
	ПризнакАгента = УстановитьБит(ПризнакАгента,5,СведениеАгента5Комиссионер);
	ПризнакАгента = УстановитьБит(ПризнакАгента,6,СведениеАгента6Агент); 
	Объект.ПризнакАгента = ПризнакАгента;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписьСНО()
	СведенияОбСНО = 0;
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,1,СНООСН);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,2,СНОУСНДоход);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,3,СНОУСНДоходМинусРасход);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,4,СНОЕНВД);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,5,СНОЕСХН);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,6,СНОПатент);
	Объект.СведенияОбСНО = СведенияОбСНО;
КонецПроцедуры

//Преобразовывает значение реквизитов объекта в значения установленных признаков на форме (побитовый разбор)
&НаКлиенте
Процедура ЧтениеПризнаковРегистрации()
	ПолучениеПричинПеререгистрации();
	ПолучениеПричинПеререгистрацииФФД();
	ПолучениеСведенийОбИспользованииККТ();
	ПолучениеСведенийОбИспользованииККТвККТ();
	ПолучениеСведенийОПризнакахАгента();
	ПолучениеСНО();
КонецПроцедуры

//Преобразовывает значение установленных признаков на форме в значения реквизитов объекта (побитовое сложение)
&НаКлиенте
Процедура ЗаписьПризнаковРегистрации()
	ЗаписьПричинПеререгистрации();
	ЗаписьПричинПеререгистрацииФФД();
	ЗаписьСведенийОбИспользованииККТ();
	ЗаписьСведенийОбИспользованииККТвККТ();
	ЗаписьСведенийОПризнакахАгента();
	ЗаписьСНО();
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура СинхронизацияРеквизитов(Реквизит,Значение)
	СинхронизироватьРеквизит = Истина;
	СоответствиеРеквизитов = СоответствиеСинхронизирующихсяРеквизитов();
	Если СоответствиеРеквизитов[Реквизит] <> Неопределено Тогда
		Если Значение = Ложь Тогда
			Для Каждого КлючИЗначение Из СоответствиеРеквизитов Цикл
				Если КлючИЗначение.Значение = СоответствиеРеквизитов[Реквизит] И КлючИЗначение.Ключ <> Реквизит И ЗначениеРеквизитаПоИмени(КлючИЗначение.Ключ) = Истина И ЗначениеРеквизитаПоИмени(КлючИЗначение.Значение) = Истина Тогда
					СинхронизироватьРеквизит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СинхронизироватьРеквизит Тогда
			УстановитьСвязанныйРеквизит(СоответствиеРеквизитов[Реквизит],Значение);
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязанныйРеквизит(ИмяРеквизита,Значение)
	Если Лев(ИмяРеквизита,7) = "Объект." Тогда
		ЭтаФорма["Объект"][Сред(ИмяРеквизита,8)] = Значение;
	Иначе
		ЭтаФорма[ИмяРеквизита] = Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗначениеРеквизитаПоИмени(ИмяРеквизита)
	Если Лев(ИмяРеквизита,7) = "Объект." Тогда
		Возврат ЭтаФорма["Объект"][Сред(ИмяРеквизита,8)];
	Иначе
		Возврат ЭтаФорма[ИмяРеквизита];
	КонецЕсли;
КонецФункции

// Соответствие синхронизирующихся реквизитов.
// 
// Возвращаемое значение:
//  Соответствие - Соответствие синхронизирующихся реквизитов
&НаКлиенте
Функция СоответствиеСинхронизирующихсяРеквизитов()
	СоответствиеРеквизитов = Новый Соответствие();
	
	//из заявления
	СоответствиеРеквизитов.Вставить("Автономность","СведениеФФД1002АвтономныйРежим");	
	СоответствиеРеквизитов.Вставить("Причина1ИзменениеАдреса","ПричинаФФД3ИзменениеАдреса");
	СоответствиеРеквизитов.Вставить("Причина2СменаОФД","ПричинаФФД1СменаОФД");
	СоответствиеРеквизитов.Вставить("Причина4ЗаменаФН","ПричинаФФД0ЗаменаФН");
	СоответствиеРеквизитов.Вставить("Причина5ПереходНаРаботуСОФД","ПричинаФФД4ПереходНаРаботуСОФД");
	СоответствиеРеквизитов.Вставить("Причина6ПереходВАвтономныйРежим","ПричинаФФД5ПереходВАвтономныйРежим");
	СоответствиеРеквизитов.Вставить("Причина7ИзменениеРеквизитовОрганизации","ПричинаФФД2ИзменениеПользователя");
	СоответствиеРеквизитов.Вставить("Причина8Иные","ПричинаФФД31Иные");
	
	СоответствиеРеквизитов.Вставить("Сведение080","СведениеФФД1126Лотереи");
	СоответствиеРеквизитов.Вставить("Сведение090","СведениеФФД1193АзартныеИгры");
	СоответствиеРеквизитов.Вставить("Сведение110","СведениеФФД1001АвтоматическийРежим");
	СоответствиеРеквизитов.Вставить("Сведение130","СведениеФФД1108Интернет");
	СоответствиеРеквизитов.Вставить("Сведение140","СведениеФФД1109РасчетыЗаУслуги");
	СоответствиеРеквизитов.Вставить("Сведение150","СведениеФФД1109РасчетыЗаУслуги");
	СоответствиеРеквизитов.Вставить("Сведение155","СведениеФФД1207ПодакцизныйТовар");
	СоответствиеРеквизитов.Вставить("Сведение120","СведениеФФДМаркировка");
	
	//из ККТ
	СоответствиеРеквизитов.Вставить("ПричинаФФД0ЗаменаФН","Причина4ЗаменаФН");
	СоответствиеРеквизитов.Вставить("ПричинаФФД1СменаОФД","Причина2СменаОФД");
	СоответствиеРеквизитов.Вставить("ПричинаФФД2ИзменениеПользователя","Причина7ИзменениеРеквизитовОрганизации");
	СоответствиеРеквизитов.Вставить("ПричинаФФД3ИзменениеАдреса","Причина1ИзменениеАдреса");
	СоответствиеРеквизитов.Вставить("ПричинаФФД4ПереходНаРаботуСОФД","Причина5ПереходНаРаботуСОФД");
	СоответствиеРеквизитов.Вставить("ПричинаФФД5ПереходВАвтономныйРежим","Причина6ПереходВАвтономныйРежим");
	СоответствиеРеквизитов.Вставить("ПричинаФФД6ИзменениеВерсииККТ","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД7ИзменениеСНО","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД8ИзменениеНомераУстройства","Причина3ИзменениеСведенийОПримененииККТВСоставеАУ");
	СоответствиеРеквизитов.Вставить("ПричинаФФД9ПереводВНеавтоматическийРежим","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД10ПереводВАвтоматическийРежим","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД11ПереводВРежимБСО","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД12ВыходИзРежимаБСО","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД13ВыходИзРежимаРасчетовВИнтернет","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД14ПереводВРежимРасчетовВИнтернет","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД15ВыходИзРежимаПлатежногоАгента","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД16ПереводВРежимПлатежногоАгента","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД17ВыходИзРежимаАзартныхИгр","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД18ПереводВРежимАзартныхИгр","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД19ВыходИзРежимаЛотерей","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД20ПереводВРежимЛотерей","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД21СменаФФД","Причина8Иные");
	СоответствиеРеквизитов.Вставить("ПричинаФФД31Иные","Причина8Иные");
	
	СоответствиеРеквизитов.Вставить("СведениеФФД1002АвтономныйРежим","Объект.Автономность");
	СоответствиеРеквизитов.Вставить("СведениеФФД1108Интернет","Сведение130");
	СоответствиеРеквизитов.Вставить("СведениеФФД1126Лотереи","Сведение080");
	СоответствиеРеквизитов.Вставить("СведениеФФД1193АзартныеИгры","Сведение090");
	СоответствиеРеквизитов.Вставить("СведениеФФД1207ПодакцизныйТовар","Сведение155");
	СоответствиеРеквизитов.Вставить("СведениеФФД1221ПринтерВАвтомате","Сведение110");
	СоответствиеРеквизитов.Вставить("СведениеФФДМаркировка","Сведение120");
	СоответствиеРеквизитов.Вставить("СведениеФФД1001АвтоматическийРежим","Сведение110");
	
	СоответствиеРеквизитов.Вставить("СведениеАгента0БанковскийАгент","Сведение100");
	СоответствиеРеквизитов.Вставить("СведениеАгента1БанковскийСубагент","Сведение100");
	СоответствиеРеквизитов.Вставить("СведениеАгента2ПлАгент","Сведение105");
	СоответствиеРеквизитов.Вставить("СведениеАгента3ПлСубагент","Сведение105");
	
	Возврат СоответствиеРеквизитов;
КонецФункции

&НаКлиенте
Функция ПолучитьРегистрационныеДанныеККТ(fptr)
	СтруктураЗадания = Новый Структура;
	СтруктураЗадания.Вставить("type","getRegistrationInfo");
	
	Возврат ВыполнитьЗаданиеJSONАтол(fptr, СтруктураЗадания);
Конецфункции

&НаКлиенте
Функция ПолучитьСтатусККТ(fptr)
	СтруктураЗадания = Новый Структура;
	СтруктураЗадания.Вставить("type","getDeviceStatus");
	
	Возврат ВыполнитьЗаданиеJSONАтол(fptr, СтруктураЗадания);
КонецФункции

&НаКлиенте
Функция ПолучитьИнфоОККТ(fptr)
	СтруктураЗадания = Новый Структура;
	СтруктураЗадания.Вставить("type","getDeviceInfo");
	
	Возврат ВыполнитьЗаданиеJSONАтол(fptr, СтруктураЗадания);
КонецФункции

&НаКлиенте
Функция ПолучитьИнфоОФН(fptr)
	СтруктураЗадания = Новый Структура;
	СтруктураЗадания.Вставить("type","getFnInfo");
	
	Возврат ВыполнитьЗаданиеJSONАтол(fptr, СтруктураЗадания);
КонецФункции

&НаКлиенте 
Функция ВыполнитьЗаданиеJSONАтол(fptr,СтруктураЗадания)
	ЗаданиеJSON = ПолучитьСтрокуJSONИзСтруктуры(СтруктураЗадания);

	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
	fptr.processJson();

    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
    
    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
    
	Возврат result;
КонецФункции


// Информаци об использовании автоматическое устройство в регистрации
// 
// Возвращаемое значение:
//  Булево - Истина, если используется, Ложь в ином случае
&НаКлиенте
Функция ИспользуетсяАУ()
	Результат = Ложь;
	Если ЗначениеЗаполнено(Объект.НомерАвтомата) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат; 
КонецФункции

&НаКлиенте
Процедура УстановитьНастройкиОКП(fptr)	
	ПараметрыОКП = ПолучитьПараметрыОКП();
	
	Если ЗначениеЗаполнено(ПараметрыОКП) Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый Структура("key,value",1002,ПараметрыОКП.АдресОКП));
		МассивПараметров.Добавить(Новый Структура("key,value",1003,ПараметрыОКП.ПортОКП));
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("type","setDeviceParameters");
		СтруктураПараметров.Вставить("deviceParameters",МассивПараметров);
		
		ЗаданиеJSON = ПолучитьСтрокуJSONИзСтруктуры(СтруктураПараметров);
		fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
		fptr.processJson();
	
	    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
	    
	    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
	    
	    Для Каждого Параметр Из result.deviceParameters Цикл
	    	Если Параметр.Свойство("errorDescription") Тогда
	    		Если Параметр.key = 1002 Тогда
	    			ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка записи параметра ""Адрес ОКП. """ + Параметр.errorDescription);
	    		ИначеЕсли Параметр.key = 1003 Тогда
	    			ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка записи параметра ""Порт ОКП. """ + Параметр.errorDescription);
	    		КонецЕсли;
	    	КонецЕсли;
	    КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибка записи параметров ОКП: отсутствуют данные в базе");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОКП()
	Если ЗначениеЗаполнено(Объект.ФискальныйНакопитель) И ЗначениеЗаполнено(Объект.ФискальныйНакопитель.Модель) 
	   И ЗначениеЗаполнено(Объект.ФискальныйНакопитель.Модель.АдресАСОКП) И ЗначениеЗаполнено(Объект.ФискальныйНакопитель.Модель.ПортАСОКП) Тогда 
		АдресОКП = Объект.ФискальныйНакопитель.Модель.АдресАСОКП;
		ПортОКП = Объект.ФискальныйНакопитель.Модель.ПортАСОКП;
		Возврат Новый Структура("АдресОКП,ПортОКП",АдресОКП,ПортОКП)
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды