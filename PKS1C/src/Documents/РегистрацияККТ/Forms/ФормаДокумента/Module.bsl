&НаКлиенте
Процедура ЗаписатьНастройкиККТ(Команда)
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	fptr.open();

	Если fptr.isOpened() Тогда
		//записываем параметры подключения к ОФД
		Если Не Объект.Автономность Тогда
			СерверОФД = СерверОФД();
			ПортОФД = ПортОФД();
			Если СерверОФД <> Неопределено И ПортОФД <> Неопределено Тогда
//				fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 273);
//			    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, СерверОФД);
//			    fptr.writeDeviceSetting();
//				fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 274);
//			    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, ПортОФД);
//			    fptr.writeDeviceSetting();

//				ЗаданиеJSON = "
//				|{""type"": ""setDeviceParameters""},
//				|""deviceParameters"" : [
//		        |{
//		        |   ""key"" : 273,
//		        |   ""value"" : " + СерверОФД + "
//		        |},
//		        |{
//		        |   ""key"" : 274,
//		        |   ""value"" : " + ПортОФД + "
//		        |}
//		        |]";

//				ЗаданиеJSON = "
//				|{
//				|   ""type"": ""setDeviceParameters"",
//				|
//				|   ""deviceParameters"" : [
//				|         {
//				|            ""key"" : 273,
//				|            ""value"" : """ + СерверОФД + """
//				|         },
//				|         {
//				|            ""key"" : 274,
//				|            ""value"" : """ + Формат(ПортОФД,"ЧГ=") + """ 
//				|         }
//				|      ]
//				|}";
//				fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
//    			fptr.processJson();
//
//			    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
//			    
//			    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
//			    
//			    Сообщить("Настройки ОФД записаны в ККТ.");
//			    
//			    Для Каждого Параметр Из result.deviceParameters Цикл
//			    	Если Параметр.Свойство("errorDescription") Тогда
//			    		Если Параметр.key = 273 Тогда
//			    			тАдресОФД = "Не установлен: " + Параметр.errorDescription; 
//			    		ИначеЕсли Параметр.key = 274 Тогда
//			    			тПортОФД = "Не установлен: " + Параметр.errorDescription;
//			    		КонецЕсли;
//			    	Иначе
//			    		Если Параметр.key = 273 Тогда
//			    			тАдресОФД = Параметр.value; 
//			    		ИначеЕсли Параметр.key = 274 Тогда
//			    			тПортОФД = Параметр.value;
//			    		КонецЕсли;
//			    	КонецЕсли;
//			    КонецЦикла;
//			    ПредварительныйРезультатРегистрации = "Записаны настройки:" + Символы.ПС + "Адрес ОФД: " + тАдресОФД + Символы.ПС + "Порт ОФД: " + тПортОФД;\
				СНО = ПолучитьСНОПоУмолчаниюПобитово();
				ЗаписьНастроекОФДвККТ(fptr,СерверОФД,ПортОФД,СНО);
			Иначе
				Сообщить("Проверьте настройки подключения к ОФД!");
			КонецЕсли;
		КонецЕсли;
		
		fptr.close();
	Иначе
		Сообщить(fptr.errorDescription());
		fptr.close();
	КонецЕсли;
	
	fptr = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура АвтономностьПриИзменении(Элемент)
	УправлениеВидимостью();
	УправлениеДоступностью();
	//Если Объект.Автономность Тогда
	//	//Элементы.ФискальныйНакопитель.Доступность = Ложь;
	//	Элементы.ОператорФискальныхДанных.Доступность = Ложь;
	//Иначе
	//	//Элементы.ФискальныйНакопитель.Доступность = Истина;
	//	Элементы.ОператорФискальныхДанных.Доступность = Истина;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолныйВидФормы = Истина;
	ПолучениеПричинПеререгистрации();
	ПолучениеСведенийОбИспользованииККТ();
	ПолучениеСНО();
	УправлениеВидимостью(); 
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ВидФормыПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиККТ(Команда)
		Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	fptr.open();

	Если fptr.isOpened() Тогда
//		fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 273);
//		fptr.ReadDeviceSetting();
//		тАдресОФД = fptr.GetParamString(fptr.LIBFPTR_PARAM_SETTING_VALUE);
//		fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 274);
//		fptr.ReadDeviceSetting();
//	    тПортОФД = fptr.GetParamString(fptr.LIBFPTR_PARAM_SETTING_VALUE);
//	    ПредварительныйРезультатРегистрации = "Адрес ОФД: " + тАдресОФД + Символы.ПС + "Порт ОФД: " + Формат(тПортОФД,"ЧГ=");
		ПрочитатьНастройкиОФДсККТ(fptr);
		fptr.close();
	Иначе
		Сообщить(fptr.errorDescription());
		fptr.close();
	КонецЕсли;
	
	fptr = Неопределено;
КонецПроцедуры


&НаКлиенте
Процедура НайтиФНПоЗаводскомуНомеру(Команда)
	Если Не ЗначениеЗаполнено(ЗаводскойНомер) Тогда
		Сообщить("ОШИБКА! Введите заводской номер");
		Возврат;
	КонецЕсли;
	
	ФискальныйНакопитель = ПолучитьФискальныйНакопитель(ЗаводскойНомер);
	
	Если Не ФискальныйНакопитель = 0 Тогда
		Объект.ФискальныйНакопитель = ФискальныйНакопитель;
		МодельФН = ПолучитьМодельФискальногоНакопителя(ФискальныйНакопитель);
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста                              
Функция ПолучитьФискальныйНакопитель(ЗаводскойНомер)
	ФискальныйНакопитель = Справочники.ФискальныеНакопители.НайтиПоКоду(СтрЗаменить(Строка(ЗаводскойНомер), Символы.НПП, ""));	
	Если ФискальныйНакопитель = Справочники.ФискальныеНакопители.ПустаяСсылка() Тогда
		Сообщить("Фискальных накопителей не найдено");
		Возврат 0;
	КонецЕсли;
	Возврат ФискальныйНакопитель;
КонецФункции

&НаКлиенте
Процедура НомерФДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодельФН = ПолучитьМодельФискальногоНакопителя(ВыбранноеЗначение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМодельФискальногоНакопителя(ФН)
	Возврат ФН.Модель;
КонецФункции

//&НаСервереБезКонтекста
//Функция ПередЗаписьюНаСервере(ВидФормы, ЗаводскойНомер, МодельФН)
//	Если ВидФормы = "Короткий" И Справочники.ФискальныеНакопители.НайтиПоКоду(ЗаводскойНомер) = Справочники.ФискальныеНакопители.ПустаяСсылка() Тогда
//		ФН = Справочники.ФискальныеНакопители.СоздатьЭлемент();
//		ФН.Код = ЗаводскойНомер;
//		ФН.Наименование = Формат(ЗаводскойНомер, "ЧГ=0");
//		ФН.Модель = МодельФН;
//		
//		Попытка
//			ФН.Записать();
//		Исключение
//			Сообщить(ОписаниеОшибки());
//			Возврат Ложь;
//		КонецПопытки;
//		Сообщить("Фискальный накопитель " + ЗаводскойНомер + " был успешно записан");
//		Возврат ФН.Ссылка;
//	КонецЕсли;
//КонецФункции

&НаКлиенте
Процедура СформироватьЗаявление(Команда)
	Если ЭтаФорма.Модифицированность Тогда 
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ЗаписатьПродолжить","Записать и продолжить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);		
		Ответ = Вопрос("Перед формированием заявления необходимо записать документ. Продолжить?", СписокКнопок,,"ЗаписатьПродолжить","Продолжить?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаЗаявления = КаталогВременныхФайлов() + "Регистрация_" + ЗНККМ() + "_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd" )+ ".xls";
	
	ИННКлиента = ИННКлиента();
	КППКлиента = КППКлиента();
	ОГРНКлиента = ОГРНКлиента();
	ВидОперации = ВидОперации();
	
	НачалоИННКолонка = 40;
	НачалоИННСтрока = 4;
	
	НачалоКППКолонка = 40;
	НачалоКППСтрока = 6;
	
	НачалоОГРНКолонка = 40;
	НачалоОГРНСтрока = 1;
	
	ВидДокументаСтрока = 12;
	ВидДокументаКолонка = 27;
	
	НачалоПричиныПеререгистрацииСтрока = 15;
	НачалоПричиныПеререгистрацииКолонка = 33;
	
	НачалоПользовательККТКолонка = 1;
	НачалоПользовательККТСтрока = 17;
	
	НачалоПредставительКолонка = 1;
	НачалоПредставительСтрока = 36;
	
	ДостоверностьКолонка = 2;
	ДостоверностьСтрока = 33;
	
	НачалоДатаКолонка = 28;
	НачалоДатаСтрока = 45; 	
	
	НачалоККТКолонка = 55; 
	НачалоККТСтрока = 13;
	
	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие") Тогда               //регистрация/перерегистрация
	    ДатаВступленияПриказаФормы = Дата(2022,3,1);
	
		Если ТекущаяДата() < ДатаВступленияПриказаФормы Тогда 
			Ответ = Вопрос("Использовать новую форму?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НоваяФормаЗаявления = Истина;
			Иначе
				НоваяФормаЗаявления = Ложь;
			КонецЕсли;
		Иначе
			НоваяФормаЗаявления = Истина;
		КонецЕсли;
		
		Если НоваяФормаЗаявления Тогда
			ЗаписьМакета(ИмяФайлаЗаявления,"ЗаявлениеОРегистрации2022");
		Иначе
			ЗаписьМакета(ИмяФайлаЗаявления,"ЗаявлениеОРегистрации");
		КонецЕсли;
		
		Попытка
			// Создать объект. 
			Excel = Новый COMОбъект("Excel.Application"); 
		Исключение    
			Сообщить("Не удалось инициализировать Excel");    
			Возврат;    
		КонецПопытки;   
		
		Попытка
		    // Если при отработке следующего фрагмента кода произойдет ошибка
		    // объект "Excel.Application" будет закрыт.

		    // Открыть книгу, содержащую шаблон оформления.
		    //Excel.Workbooks.Open("C:\Users\Cisco\Desktop\Регистрация ККТ заявлениеОБРАЗЕЦ.XLS");
			Excel.Workbooks.Open(ИмяФайлаЗаявления);
			Excel.DisplayAlerts = Ложь;
		    НомерКниги = Excel.Workbooks.Count;
		    Книга        = Excel.Workbooks.Item(НомерКниги);
		    //Лист        = Excel.ActiveSheet;
			
			//**************************************************
			//********************ЛИСТ 1************************
			//**************************************************
			Лист        = Excel.Sheets(1);
			
			//ИНН
			//Для НомерКолонки = 1 ПО СтрДлина(ИННКлиента) Цикл
			//	Лист.Cells(НачалоИННСтрока,НачалоИННКолонка + (НомерКолонки - 1) * 3).Value  = Сред(ИННКлиента,НомерКолонки,1);
			//КонецЦикла;             
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоИННСтрока, НачалоИННКолонка, 12, 1, 3, 0, ИННКлиента());
			
			//КПП
			//Для НомерКолонки = 1 ПО СтрДлина(КППКлиента) Цикл
			//	Лист.Cells(НачалоКППСтрока,НачалоКППКолонка + (НомерКолонки - 1) * 3).Value  = Сред(КППКлиента,НомерКолонки,1);
			//КонецЦикла;
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоКППСтрока, НачалоКППКолонка, 9, 1, 3, 0, КППКлиента());
			
			//ОГРН
			//Для НомерКолонки = 1 ПО СтрДлина(ОГРНКлиента) Цикл
			//	Лист.Cells(НачалоОГРНСтрока,НачалоОГРНКолонка + (НомерКолонки - 1) * 3).Value  = Сред(ОГРНКлиента,НомерКолонки,1);
			//КонецЦикла;
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоОГРНСтрока, НачалоОГРНКолонка, 15, 1, 3, 0, ОГРНКлиента());
			
			//Регистрация/перерегистрация
			//Лист.Cells(ВидДокументаСтрока,ВидДокументаКолонка).Value = ?(ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация"),"1","2");
			ЗаписьДанныхВКлеткиБланка(Лист, ВидДокументаСтрока, ВидДокументаКолонка, 1, 1, 0,0, ?(ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация"),"1","2"));
			
			//Причины перерегистрации
			Если ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда				
				Для НомерПричины = 1 По 8 Цикл
					Лист.Cells(НачалоПричиныПеререгистрацииСтрока, НачалоПричиныПеререгистрацииКолонка + (НомерПричины - 1) * 6).Value  = ?(ПроверитьБит(Объект.ПричиныПеререгистрации,НомерПричины),"1","2");
				КонецЦикла;
			Иначе
				Для НомерПричины = 1 По 8 Цикл
					Лист.Cells(НачалоПричиныПеререгистрацииСтрока, НачалоПричиныПеререгистрацииКолонка + (НомерПричины - 1) * 6).Value  = "2";
				КонецЦикла;
			КонецЕсли;
			
			//Пользователь ККТ
			//41x3
			//ИмяПользователя = ИмяКлиента();
			//НомерКолонки = НачалоПользовательККТКолонка;
			//НомерСтроки = НачалоПользовательККТСтрока;
			//ДлинаПользователя = СтрДлина(ИмяПользователя);
			//Для НомерСимвола = 1 По ДлинаПользователя Цикл
			//	Лист.Cells(НомерСтроки,НомерКолонки).Value = Сред(ИмяПользователя,НомерСимвола,1);
			//	НомерКолонки = НомерКолонки + 3;
			//	Если НомерКолонки >= НачалоПользовательККТКолонка + (40) * 3 Тогда 
			//		НомерКолонки = НачалоПользовательККТКолонка;
			//		НомерСтроки = НомерСтроки + 2;
			//		Если НомерСтроки > НачалоПользовательККТСтрока + 2*2 Тогда 
			//			//слишком длинное наименование обрезаем
			//			Прервать;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоПользовательККТСтрока, НачалоПользовательККТКолонка, 40, 3, 3, 1, ИмяКлиента());
			
			//20x3
			//ИмяПредставителя = ИмяПредставителя();
			//НомерКолонки = НачалоПредставительКолонка;
			//НомерСтроки = НачалоПредставительСтрока;
			//ДлинаПредставителя = СтрДлина(ИмяПредставителя);
			//Для НомерСимвола = 1 По ДлинаПредставителя Цикл
			//	Лист.Cells(НомерСтроки,НомерКолонки).Value = Сред(ИмяПредставителя,НомерСимвола,1);
			//	НомерКолонки = НомерКолонки + 3;
			//	Если НомерКолонки >= НачалоПредставительКолонка + (20) * 3 Тогда 
			//		НомерКолонки = НачалоПредставительКолонка;
			//		НомерСтроки = НомерСтроки + 2;
			//		Если НомерСтроки > НачалоПредставительСтрока + 2*2 Тогда 
			//			//слишком длинное наименование обрезаем
			//			Прервать;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоПредставительСтрока, НачалоПредставительКолонка, 20, 3, 3, 1, ИмяПредставителя());
			
			//Заполняет пользователь ККТ
			//Лист.Cells(2,33).Value = "1";
			ЗаписьДанныхВКлеткиБланка(Лист, 33, 2, 1, 1, 3, 0, "1");
			
			//Дата
			ДатаСтрока = ДатаСтрока();
			//Число
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*0).Value = Сред(ДатаСтрока,1,1);
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*1).Value = Сред(ДатаСтрока,2,1);
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоДатаСтрока, НачалоДатаКолонка, 2, 1, 3, 0, Сред(ДатаСтрока,1,2));
			//Месяц
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*3).Value = Сред(ДатаСтрока,3,1);
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*4).Value = Сред(ДатаСтрока,4,1);
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоДатаСтрока, НачалоДатаКолонка + 3*3, 2, 1, 3, 0, Сред(ДатаСтрока,3,2));
			//Год
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*6).Value = Сред(ДатаСтрока,5,1);
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*7).Value = Сред(ДатаСтрока,6,1);
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*8).Value = Сред(ДатаСтрока,7,1);
			//Лист.Cells(НачалоДатаСтрока,НачалоДатаКолонка + 3*9).Value = Сред(ДатаСтрока,8,1);
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоДатаСтрока, НачалоДатаКолонка + 3*6, 4, 1, 3, 0, Сред(ДатаСтрока,5,4));
			
			//// Создать новую книгу (в нее будем записывать данные).
			//Excel.Application.Workbooks.Add(1);
			//
			//НомерКниги = Excel.Workbooks.Count;
			//КнигаНовая = Excel.Workbooks.Item(НомерКниги);
			//ЛистНовый  = Excel.ActiveSheet;

			//// Установить ширину колонки в новой книге.
			////ЛистНовый.Columns("B").ColumnWidth = 40;
			//
			//// Копировать область из книги-шаблона в новую книгу.
			//Лист.Range("A1:DN52").Copy(ЛистНовый.Range("A1:DN52"));
			//Для НомерКолонки = 1 ПО Лист.Columns.Count Цикл
			//	ЛистНовый.Columns(НомерКолонки).ColumnWidth = Лист.Columns.ColumnWidth;
			//КонецЦикла;
			//
			//Для НомерСтроки = 1 ПО 52 Цикл
			//	ЛистНовый.Rows(НомерСтроки).RowHeight = Лист.Rows.RowHeight;
			//КонецЦикла;
			//ЛистНовый.PageSetup.PrintArea = Лист.PageSetup.PrintArea;
			//Сообщить(Лист.Columns("A").ColumnWidth);
			//Excel.Application.Workbooks.Delete(1);
		    //ЛистНовый.Cells(1, 1).Value = "Наименование контрагента";
		    
		    // Считаем, что в нашем случае необходимо сформировать только
		 
		    // две строки табличной части
			//Для НомерСтроки = 1 По 2 Цикл
			//    Лист.Range("Строка").Copy(ЛистНовый.Range(ЛистНовый.Cells(3 + НомерСтроки,1), ЛистНовый.Cells(3 + НомерСтроки, 5)));

			//    // Записать значение в ячейку листа новой таблицы    
			//     // в реальном примере данные будут браться из информационной базы
			//     ЛистНовый.Cells(3 + НомерСтроки, 1).Value = НомерСтроки;
			//    ЛистНовый.Cells(3 + НомерСтроки, 2).Value =    "Наименование номенклатурной позиции " + Строка(НомерСтроки);
			//    ЛистНовый.Cells(3 + НомерСтроки, 3).Value = НомерСтроки;
			//    ЛистНовый.Cells(3 + НомерСтроки, 4).Value = НомерСтроки;
			//    ЛистНовый.Cells(3 + НомерСтроки, 5).Value = НомерСтроки;
			//КонецЦикла;
			
			//**************************************************
			//********************ЛИСТ 2************************
			//**************************************************
			Лист        = Excel.Sheets(2);
			//Лист.Cells(48, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
				ЗаписьДанныхВКлеткиБланка(Лист, 21, 22, 20, 1, 3, 0, РНККТ());
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 3************************
			//**************************************************
			Лист        = Excel.Sheets(3);
			//Лист.Cells(47, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			ЗаписьДанныхВКлеткиБланка(Лист, НачалоККТСтрока, НачалоККТКолонка, 20, 2, 3, 1, ВРег(НаименованиеККТ()));			
			ЗаписьДанныхВКлеткиБланка(Лист, 17, 55, 20, 2, 3, 1, ЗНККТ());
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 55, 20, 6, 3, 1, НаименованиеФН());
			ЗаписьДанныхВКлеткиБланка(Лист, 33, 55, 20, 1, 3, 1, ЗНФН());
			ЗаписьДанныхВКлеткиБланка(Лист, 38, 31, 6, 1, 3, 0, АдресККТИндекс());
			ЗаписьДанныхВКлеткиБланка(Лист, 38, 115, 2, 1, 3, 0, АдресККТРегион());
			ЗаписьДанныхВКлеткиБланка(Лист, 40, 31, 29, 1, 3, 0, АдресККТРайон());
			ЗаписьДанныхВКлеткиБланка(Лист, 42, 31, 29, 1, 3, 0, АдресККТГород());
			ЗаписьДанныхВКлеткиБланка(Лист, 44, 31, 29, 1, 3, 0, АдресККТНаселенныйПункт());
			
			//**************************************************
			//********************ЛИСТ 4************************
			//**************************************************
			Лист        = Excel.Sheets(4);
			//Лист.Cells(46, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			ЗаписьДанныхВКлеткиБланка(Лист, 9, 31, 30, 1, 3, 0, АдресККТУлица());
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 31, 8, 1, 3, 0, АдресККТДом()); 
			ЗаписьДанныхВКлеткиБланка(Лист, 13, 31, 8, 1, 3, 0, АдресККТКорпус());
			ЗаписьДанныхВКлеткиБланка(Лист, 15, 31, 8, 1, 3, 0, АдресККТКвартира());
			ЗаписьДанныхВКлеткиБланка(Лист, 18, 52, 20, 4, 3, 1, АдресККТМестоПрименения());
			ЗаписьДанныхВКлеткиБланка(Лист, 27, 52, 1, 1, 0, 0, ?(Объект.Автономность,"1","2"));
			
			//**************************************************
			//********************ЛИСТ 5************************
			//**************************************************
			Лист        = Excel.Sheets(5);
			//Лист.Cells(52, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,1),"1","2"));	//080
			ЗаписьДанныхВКлеткиБланка(Лист, 18, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,2),"1","2"));  //090
			ЗаписьДанныхВКлеткиБланка(Лист, 23, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,10),"1","2")); //095
			ЗаписьДанныхВКлеткиБланка(Лист, 29, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,3),"1","2"));  //100
			Если НоваяФормаЗаявления Тогда																						
				ЗаписьДанныхВКлеткиБланка(Лист, 33, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,4),"1","2"));//105
				ЗаписьДанныхВКлеткиБланка(Лист, 37, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,5),"1","2"));//110
				ЗаписьДанныхВКлеткиБланка(Лист, 42, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,11),"1","2"));//120
			Иначе
				ЗаписьДанныхВКлеткиБланка(Лист, 32, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,4),"1","2"));//105
				ЗаписьДанныхВКлеткиБланка(Лист, 35, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,5),"1","2"));//110
				ЗаписьДанныхВКлеткиБланка(Лист, 39, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,6),"1","2"));//130
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 6************************
			//**************************************************
			Лист        = Excel.Sheets(6);
			//Лист.Cells(45, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			Если НоваяФормаЗаявления Тогда
				ЗаписьДанныхВКлеткиБланка(Лист, 10, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,6),"1","2")); //130
				ЗаписьДанныхВКлеткиБланка(Лист, 15, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,7),"1","2")); //140
				ЗаписьДанныхВКлеткиБланка(Лист, 19, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,8),"1","2")); //150
				ЗаписьДанныхВКлеткиБланка(Лист, 24, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,9),"1","2")); //155
			Иначе
				ЗаписьДанныхВКлеткиБланка(Лист, 10, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,7),"1","2")); //140
				ЗаписьДанныхВКлеткиБланка(Лист, 14, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,8),"1","2")); //150
				ЗаписьДанныхВКлеткиБланка(Лист, 18, 58, 1, 1, 1, 1, ?(ПроверитьБит(Объект.СведенияОбИспользованииККТ,9),"1","2")); //155
			КонецЕсли;
			
			//**************************************************
			//********************ЛИСТ 7************************
			//**************************************************
			Лист        = Excel.Sheets(7);
			//Лист.Cells(47, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");

			//**************************************************
			//********************ЛИСТ 8************************
			//**************************************************
			Лист        = Excel.Sheets(8);
			//Лист.Cells(49, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");

			
			//**************************************************
			//********************ЛИСТ 9************************
			//**************************************************
			Лист        = Excel.Sheets(9);
			//Лист.Cells(44, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			ЗаписьДанныхВКлеткиБланка(Лист, 12, 55, 20, 4, 3, 1, НаименованиеОФД());
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 55, 12, 1, 3, 0, ИННОФД());

			//**************************************************
			//********************ЛИСТ 10************************
			//**************************************************
			Лист        = Excel.Sheets(10);
			//Лист.Cells(51, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			//ФН не поврежден
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 56, 1, 1, 3, 1, "2");
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда				
				ЗаписьДанныхВКлеткиБланка(Лист, 18, 56, 8, 1, 3, 0, ФД());
				
				ДатаРегистрацииСтрока = ДатаРегистрациииСтрока();
				ЗаписьДанныхВКлеткиБланка(Лист, 22, 56, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,1,2));
				ЗаписьДанныхВКлеткиБланка(Лист, 22, 65, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,3,2));
				ЗаписьДанныхВКлеткиБланка(Лист, 22, 74, 4, 1, 3, 0, Сред(ДатаРегистрацииСтрока,5,4));
				ЗаписьДанныхВКлеткиБланка(Лист, 26, 56, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,9,2));
				ЗаписьДанныхВКлеткиБланка(Лист, 26, 65, 2, 1, 3, 0, Сред(ДатаРегистрацииСтрока,11,2));
				
				ЗаписьДанныхВКлеткиБланка(Лист, 29, 56, 10, 1, 3, 0, ФПД());
				
				//замена ФН
				Если ПроверитьБит(Объект.ПричиныПеререгистрации,4) И ЗначениеЗаполнено(Объект.ДокументЗакрытияФН) Тогда
					ДатаЗакрытияСтрока = ДатаЗакрытияСтрока();
					
					ЗаписьДанныхВКлеткиБланка(Лист, 34, 56, 8, 1, 3, 0, ФДЗ());
				
					ДатаРегистрацииСтрока = ДатаРегистрациииСтрока();
					ЗаписьДанныхВКлеткиБланка(Лист, 38, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,1,2));
					ЗаписьДанныхВКлеткиБланка(Лист, 38, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,3,2));
					ЗаписьДанныхВКлеткиБланка(Лист, 38, 74, 4, 1, 3, 0, Сред(ДатаЗакрытияСтрока,5,4));
					ЗаписьДанныхВКлеткиБланка(Лист, 42, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,9,2));
					ЗаписьДанныхВКлеткиБланка(Лист, 42, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,11,2));
					
					ЗаписьДанныхВКлеткиБланка(Лист, 45, 56, 10, 1, 3, 0, ФПДЗ());

				КонецЕсли;
			КонецЕсли;
		
			Excel.Sheets(8).Delete();
			Excel.Sheets(7).Delete();
			
			ЗаписьДанныхВКлеткиБланка(Excel.Sheets(1), 26, 36, 3, 1, 3, 0, Формат(Excel.Sheets.Count,"ЧЦ=3; ЧВН="));
			Для НомерЛиста = 1 ПО Excel.Sheets.Count Цикл
				ЗаписьДанныхВКлеткиБланка(Excel.Sheets(НомерЛиста), 6, 76, 3, 1, 3, 0, Формат(НомерЛиста,"ЧЦ=3; ЧВН="));
			КонецЦикла;
			
			Excel.Visible = Истина;

		Исключение    
		    Сообщить(ОписаниеОшибки());
		    Excel.Quit();  
			УдалитьФайлы(ИмяФайлаЗаявления);
		КонецПопытки;
	Иначе 		//снятие с учета
		ЗаписьМакета(ИмяФайлаЗаявления,"ЗаявлениеОСнятии");
		Попытка
			// Создать объект. 
			Excel = Новый COMОбъект("Excel.Application"); 
		Исключение    
			Сообщить("Не удалось инициализировать Excel");    
			Возврат;    
		КонецПопытки;
		
		Попытка
			Excel.Workbooks.Open(ИмяФайлаЗаявления);
			Excel.DisplayAlerts = Ложь;
		    НомерКниги = Excel.Workbooks.Count;
		    Книга        = Excel.Workbooks.Item(НомерКниги);
			
			//**************************************************
			//********************ЛИСТ 1************************
			//**************************************************
			Лист        = Excel.Sheets(1);
			
			//ИНН
			ЗаписьДанныхВКлеткиБланка(Лист, 1, 40, 12, 1, 3, 0, ИННКлиента());
			
			//Пользователь
			ЗаписьДанныхВКлеткиБланка(Лист, 10, 1, 40, 3, 3, 1, ИмяКлиента());
			
			ЗаписьДанныхВКлеткиБланка(Лист, 20, 55, 20, 1, 3, 1, ВРег(НаименованиеККТ()));			
			ЗаписьДанныхВКлеткиБланка(Лист, 22, 55, 20, 1, 3, 1, ЗНККТ());

			//ККТ не похищена
			ЗаписьДанныхВКлеткиБланка(Лист, 24, 55, 1, 1, 3, 1, "2");
			
			//ККТ не потеряна
			ЗаписьДанныхВКлеткиБланка(Лист, 27, 55, 1, 1, 3, 1, "2");
			
			//Заявлление от пользователя
			ЗаписьДанныхВКлеткиБланка(Лист, 37, 2, 1, 1, 3, 1, "1");
			ЗаписьДанныхВКлеткиБланка(Лист, 40, 1, 20, 3, 3, 1, ИмяПредставителя());
			
			//Дата
			ДатаСтрока = ДатаСтрока();
			//Число
			ЗаписьДанныхВКлеткиБланка(Лист, 49, 28, 2, 1, 3, 0, Сред(ДатаСтрока,1,2));
			//Месяц
			ЗаписьДанныхВКлеткиБланка(Лист, 49, 28+ 3*3, 2, 1, 3, 0, Сред(ДатаСтрока,3,2));
			//Год
			ЗаписьДанныхВКлеткиБланка(Лист, 49, 28 + 3*6, 4, 1, 3, 0, Сред(ДатаСтрока,5,4));
			
			//**************************************************
			//********************ЛИСТ 2************************
			//**************************************************
			Лист        = Excel.Sheets(2);
			//Лист.Cells(45, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			//**************************************************
			//********************ЛИСТ 3************************
			//**************************************************
			Лист        = Excel.Sheets(3);
			
			ЗаписьДанныхВКлеткиБланка(Лист, 6, 40, 9, 1, 3, 0, КППКлиента());
			ЗаписьДанныхВКлеткиБланка(Лист, 1, 40, 15, 1, 3, 0, ОГРНКлиента());

			//ККТ не утеряна, ФН исправен
			ЗаписьДанныхВКлеткиБланка(Лист, 11, 56, 1, 1, 3, 1, "2");
			
			//дата закрытия
			ДатаЗакрытияСтрока = ДатаРегистрациииСтрока();
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,1,2));
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,3,2));
			ЗаписьДанныхВКлеткиБланка(Лист, 21, 74, 4, 1, 3, 0, Сред(ДатаЗакрытияСтрока,5,4));
			ЗаписьДанныхВКлеткиБланка(Лист, 25, 56, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,9,2));
			ЗаписьДанныхВКлеткиБланка(Лист, 25, 65, 2, 1, 3, 0, Сред(ДатаЗакрытияСтрока,11,2));
			
			ЗаписьДанныхВКлеткиБланка(Лист, 17, 56, 8, 1, 3, 0, ФД());
			ЗаписьДанныхВКлеткиБланка(Лист, 28, 56, 10, 1, 3, 0, ФПД());
			
			//Лист.Cells(47, 95).Value = Формат(Объект.Дата,"ДФ=dd.MM.yyyy");
			
			
			//Нумерация листов
			ЗаписьДанныхВКлеткиБланка(Excel.Sheets(1), 30, 36, 3, 1, 3, 0, Формат(Excel.Sheets.Count,"ЧЦ=3; ЧВН="));
			ЗаписьДанныхВКлеткиБланка(Excel.Sheets(3), 6, 76, 3, 1, 3, 0, Формат("003","ЧЦ=3; ЧВН="));
			
			Excel.Visible = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		    Excel.Quit();  
			УдалитьФайлы(ИмяФайлаЗаявления);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗНККМ()
	Возврат Объект.ККТ.Код;
КонецФункции

&НаСервере
Функция ИННКлиента()
	Возврат Объект.Клиент.ИНН;
КонецФункции

&НаСервере
Функция ВидОперации()
	Возврат Объект.ВидОперации;
КонецФункции

&НаСервере
Функция ИмяКлиента()
	Возврат ВРег(Объект.Клиент.ПолноеНаименование);
КонецФункции

&НаСервере
Функция ИмяПредставителя()
	Возврат ВРег(Объект.Клиент.Представитель);
КонецФункции

&НаСервере
Функция ДатаСтрока()
	Возврат Строка(Формат(Объект.Дата,"ДФ=ddMMyyyy"));
КонецФункции

&НаСервере
Функция ДатаРегистрациииСтрока()
	Возврат Строка(Формат(Объект.ДатаФормированияФП,"ДФ=ddMMyyyyHHmm"));
КонецФункции

&НаСервере
Функция ДатаЗакрытияСтрока()
	Возврат Строка(Формат(Объект.ДокументЗакрытияФН.ДатаФормированияФП,"ДФ=ddMMyyyyHHmm"));
КонецФункции

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Элементы.СтраницаПричиныПеререгистрации.Видимость = ?(ВидОперации()=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация"),Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	//Если ПолныйВидФормы Тогда
	//	Элементы.ЗаводскойНомер.Видимость = Ложь;
	//	Элементы.МодельФН.Видимость = Ложь;
	//	Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Ложь;
	//Иначе
	//	Элементы.ЗаводскойНомер.Видимость = Ложь;
	//	Элементы.МодельФН.Видимость = Ложь;
	//	Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Ложь;
	//КонецЕсли;
	
	Если ПолныйВидФормы Тогда		
		Элементы.ЗаводскойНомер.Видимость = Ложь;
		Элементы.МодельФН.Видимость = Ложь;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Ложь;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Ложь;
		
		Элементы.РегистрационныйНомерККТ.Видимость = Истина;
	    Элементы.НомерФД.Видимость = Истина;
	    Элементы.ДатаФормированияФП.Видимость = Истина;
	    Элементы.ФП.Видимость = Истина;
	    Элементы.ОператорФискальныхДанных.Видимость = ?(Объект.Автономность,Ложь,Истина);
	    Элементы.Автономность.Видимость = Истина;
	    Элементы.ВидОперации.Видимость = Истина;
		Элементы.СтраницаПричиныПеререгистрации.Видимость = ?(ВидОперации()=ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация"),Истина,Ложь);
		Элементы.СтраницаМестоПримененияККТ.Видимость = Истина;
		Элементы.СтраницаСведенияОбИспользованииККТ.Видимость = Истина;
		Элементы.ДокументЗакрытияФН.Видимость = Причина4ЗаменаФН;
	
	Иначе		
		Элементы.ЗаводскойНомер.Видимость = Истина;
		Элементы.МодельФН.Видимость = Истина;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Истина;
		Элементы.НайтиФНПоЗаводскомуНомеру.Видимость = Истина;
		
		Элементы.РегистрационныйНомерККТ.Видимость = Ложь;
	    Элементы.НомерФД.Видимость = Ложь;
	    Элементы.ДатаФормированияФП.Видимость = Ложь;
	    Элементы.ФП.Видимость = Ложь;
	    Элементы.ОператорФискальныхДанных.Видимость = Ложь;
	    Элементы.Автономность.Видимость = Ложь;
	    Элементы.ВидОперации.Видимость = Ложь;   
		Элементы.СтраницаПричиныПеререгистрации.Видимость = Ложь;
		Элементы.СтраницаМестоПримененияККТ.Видимость = Ложь;
		Элементы.СтраницаСведенияОбИспользованииККТ.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеПричинПеререгистрации()
	КодПричинПеререгистрации = ПолучитьКодПричинПеререгистрации();
	Причина1ИзменениеАдреса = ПроверитьБит(КодПричинПеререгистрации,1);
	Причина2СменаОФД = ПроверитьБит(КодПричинПеререгистрации,2);
	Причина3ИзменениеСведенийОПримененииККТВСоставеАУ = ПроверитьБит(КодПричинПеререгистрации,3);
	Причина4ЗаменаФН = ПроверитьБит(КодПричинПеререгистрации,4);
	Причина5ПереходНаРаботуСОФД = ПроверитьБит(КодПричинПеререгистрации,5);
	Причина6ПереходВАвтономныйРежим = ПроверитьБит(КодПричинПеререгистрации,6);
	Причина7ИзменениеРеквизитовОрганизации = ПроверитьБит(КодПричинПеререгистрации,7);
	Причина8Иные = ПроверитьБит(КодПричинПеререгистрации,8);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСведенийОбИспользованииККТ()
	КодСведенийОбИспользованииККТ = ПолучитьКодСведенийОбИспользованииККТ();
	Сведение080 = ПроверитьБит(КодСведенийОбИспользованииККТ,1);
	Сведение090 = ПроверитьБит(КодСведенийОбИспользованииККТ,2);
	Сведение100 = ПроверитьБит(КодСведенийОбИспользованииККТ,3);
	Сведение105 = ПроверитьБит(КодСведенийОбИспользованииККТ,4);
	Сведение110 = ПроверитьБит(КодСведенийОбИспользованииККТ,5);
	Сведение120 = ПроверитьБит(КодСведенийОбИспользованииККТ,11);
	Сведение130 = ПроверитьБит(КодСведенийОбИспользованииККТ,6);
	Сведение140 = ПроверитьБит(КодСведенийОбИспользованииККТ,7);
	Сведение150 = ПроверитьБит(КодСведенийОбИспользованииККТ,8);
	Сведение155 = ПроверитьБит(КодСведенийОбИспользованииККТ,9);
	Сведение095 = ПроверитьБит(КодСведенийОбИспользованииККТ,10);
КонецПроцедуры


&НаСервере
Функция ПолучитьКодПричинПеререгистрации()
	Возврат Объект.ПричиныПеререгистрации;
КонецФункции

&НаСервере
Функция ПолучитьКодСведенийОбИспользованииККТ()
	Возврат Объект.СведенияОбИспользованииККТ;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПричиныПеререгистрации = 0;
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,1,Причина1ИзменениеАдреса);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,2,Причина2СменаОФД);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,3,Причина3ИзменениеСведенийОПримененииККТВСоставеАУ);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,4,Причина4ЗаменаФН);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,5,Причина5ПереходНаРаботуСОФД);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,6,Причина6ПереходВАвтономныйРежим);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,7,Причина7ИзменениеРеквизитовОрганизации);
	ПричиныПеререгистрации = УстановитьБит(ПричиныПеререгистрации,8,Причина8Иные);
	Объект.ПричиныПеререгистрации = ПричиныПеререгистрации;
	
	СведенияОбИспользованииККТ = 0;
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,1,Сведение080);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,2,Сведение090);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,3,Сведение100);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,4,Сведение105);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,5,Сведение110);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,6,Сведение130);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,7,Сведение140);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,8,Сведение150);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,9,Сведение155);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,10,Сведение095);
	СведенияОбИспользованииККТ = УстановитьБит(СведенияОбИспользованииККТ,11,Сведение120);
	Объект.СведенияОбИспользованииККТ = СведенияОбИспользованииККТ;
	
	СведенияОбСНО = 0;
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,1,СНООСН);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,2,СНОУСНДоход);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,3,СНОУСНДоходМинусРасход);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,4,СНОЕНВД);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,5,СНОЕСХН);
	СведенияОбСНО = УстановитьБит(СведенияОбСНО,6,СНОПатент);
	Объект.СведенияОбСНО = СведенияОбСНО;
КонецПроцедуры

&НаКлиенте
Процедура ПричинаПереходВАвтономныйРежимПриИзменении(Элемент)
	Если Причина6ПереходВАвтономныйРежим Тогда
		Объект.Автономность = Истина;
	КонецЕсли;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	//Если Объект.Автономность Тогда 
	//	Элементы.Причина5ПереходНаРаботуСОФД.Доступность = Ложь;
	//	Элементы.Причина6ПереходВАвтономныйРежим.Доступность = Истина;
	//ИначеЕсли Причина5ПереходНаРаботуСОФД Тогда
	//	Элементы.Причина6ПереходВАвтономныйРежим.Доступность = Ложь;
	//	Элементы.Причина5ПереходНаРаботуСОФД.Доступность = Истина;
	//Иначе
	//	Элементы.Причина5ПереходНаРаботуСОФД.Доступность = Истина;
	//	Элементы.Причина6ПереходВАвтономныйРежим.Доступность = Истина;
	//КонецЕсли;
	Если Причина5ПереходНаРаботуСОФД Тогда
		Причина6ПереходВАвтономныйРежим = Ложь;
	ИначеЕсли Причина6ПереходВАвтономныйРежим Тогда
		Причина5ПереходНаРаботуСОФД = Ложь;
	КонецЕсли;
	Элементы.Автономность.Доступность = ?(Причина5ПереходНаРаботуСОФД ИЛИ Причина6ПереходВАвтономныйРежим,Ложь,Истина);
КонецПроцедуры

&НаКлиенте
Процедура Причина5ПереходНаРаботуСОФДПриИзменении(Элемент)
	Если Причина5ПереходНаРаботуСОФД Тогда
		Объект.Автономность = Ложь;
	КонецЕсли;
	УправлениеВидимостью();
	УправлениеДоступностью();
КонецПроцедуры

&НаСервере
Функция КППКлиента()
	Возврат Объект.Клиент.КПП;
КонецФункции

&НаСервере
Функция ОГРНКлиента()
	Возврат Объект.Клиент.ОГРН;
КонецФункции

&НаКлиенте
Процедура ЗаписьДанныхВКлеткиБланка(Лист,НачальнаяСтрока,НачальнаяКолонка,МаксимальноеКоличествоКлетокГоризонтально,МаксимальноеКоличествоКлетокВертикально,ЯчеекМеждуКлеткамиГоризонтально, ЯчеекМеждуКлеткамиВертикально, Данные)
	ДлинаДанных = СтрДлина(Данные);
	НомерСтроки = НачальнаяСтрока;
	НомерКолонки = НачальнаяКолонка;
	
	Для НомерСимвола = 1 По ДлинаДанных Цикл
		Лист.Cells(НомерСтроки,НомерКолонки).Value = Сред(Данные,НомерСимвола,1);
		НомерКолонки = НомерКолонки + ЯчеекМеждуКлеткамиГоризонтально;
		Если НомерКолонки >= НачальнаяКолонка + (МаксимальноеКоличествоКлетокГоризонтально) * ЯчеекМеждуКлеткамиГоризонтально Тогда 
			НомерКолонки = НачальнаяКолонка;
			НомерСтроки = НомерСтроки + ЯчеекМеждуКлеткамиВертикально + 1;
			Если НомерСтроки > НачальнаяСтрока + (МаксимальноеКоличествоКлетокВертикально - 1)*(ЯчеекМеждуКлеткамиВертикально + 1) Тогда 
				//слишком длинное наименование обрезаем
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НаименованиеККТ()
	Возврат ВРег(Объект.ККТ.Модель.Производитель.Наименование + " " + Объект.ККТ.Модель.Наименование);
КонецФункции

&НаСервере
Функция ЗНККТ()
	Возврат Формат(Объект.ККТ.Код,"ЧГ=");
КонецФункции

&НаСервере
Функция НаименованиеФН()
	Возврат ВРег(Объект.ФискальныйНакопитель.Модель.НаименованиеПолное);
КонецФункции

&НаСервере
Функция ЗНФН()
	Возврат Формат(Объект.ФискальныйНакопитель.Код,"ЧГ=");
КонецФункции

&НаСервере
Функция РНККТ()
	Возврат Формат(Объект.РегистрационныйНомерККТ,"ЧГ=");
КонецФункции

&НаСервере
Функция АдресККТИндекс()
	Возврат Формат(Объект.АдресККТИндекс,"ЧГ=");
КонецФункции

&НаСервере
Функция АдресККТРегион()
	Возврат Формат(Объект.АдресККТРегион,"ЧГ=");
КонецФункции

&НаСервере
Функция АдресККТРайон()
	Возврат ВРег(Объект.АдресККТРайон);
КонецФункции

&НаСервере
Функция АдресККТГород()
	Возврат ВРег(Объект.АдресККТГород);
КонецФункции

&НаСервере
Функция АдресККТНаселенныйПункт()
	Возврат ВРег(Объект.АдресККТНаселенныйПункт);
КонецФункции

&НаСервере
Функция АдресККТУлица()
	Возврат ВРег(Объект.АдресККТУлица);
КонецФункции

&НаСервере
Функция АдресККТДом()
	Возврат ВРег(Объект.АдресККТДом);
КонецФункции

&НаСервере
Функция АдресККТКорпус()
	Возврат ВРег(Объект.АдресККТКорпус);
КонецФункции

&НаСервере
Функция АдресККТКвартира()
	Возврат ВРег(Объект.АдресККТКвартира);
КонецФункции

&НаСервере
Функция АдресККТМестоПрименения()
	Возврат ВРег(Объект.АдресККТМестоПрименения);
КонецФункции

&НаСервере
Функция НаименованиеОФД()
	Возврат ВРег(Объект.ОператорФискальныхДанных.Наименование);
КонецФункции

&НаСервере
Функция ИННОФД()
	Возврат Формат(Объект.ОператорФискальныхДанных.ИНН,"ЧГ=");
КонецФункции

&НаСервере
Функция ФПД()
	Возврат СтрЗаменить(Объект.ФискальныйПризнак," ","");
КонецФункции

&НаСервере
Функция ФД()
	Возврат СтрЗаменить(Объект.НомерФД," ","");
КонецФункции

&НаСервере
Функция ФПДЗ()
	Возврат СтрЗаменить(Объект.ДокументЗакрытияФН.ФискальныйПризнак," ","");
КонецФункции

&НаСервере
Функция ФДЗ()
	Возврат СтрЗаменить(Объект.ДокументЗакрытияФН.НомерФД," ","");
КонецФункции

&НаКлиенте
Процедура Причина4ЗаменаФНПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ДокументЗакрытияФННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = Новый Структура("ВидОперации,Клиент",ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие"),Объект.Клиент);
	ПараметрыОтбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Документ.РегистрацияККТ.ФормаВыбора", ПараметрыОтбора, Элемент,,,,Новый ОписаниеОповещения("РезультатЗакрытияВыбораДокументаЗакрытия",ЭтаФорма));
	//Форма = ПолучитьФорму("Документ.РегистрацияККТ.ФормаВыбора",ПараметрыОтбора,Элемент);
	//Объект.ДокументЗакрытияФН = Форма.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура РезультатЗакрытияВыбораДокументаЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Объект.ДокументЗакрытияФН = РезультатЗакрытия;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМакет(ИмяМакета)
	Макет = Документы.РегистрацияККТ.ПолучитьМакет(ИмяМакета);
	Возврат Макет;
КонецФункции

&НаКлиенте
Процедура ЗаписьМакета(ИмяФайла,ИмяМакета)
	Макет = ПолучитьМакет(ИмяМакета);
	Макет.Записать(ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификатору(Команда)
	Адрес = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов[0].Значение;
	Если ЗначениеЗаполнено(Адрес) Тогда
		ЧтениеАдреса = Новый ЧтениеJSON;
		ЧтениеАдреса.УстановитьСтроку(Адрес);
		АдресСтруктурированный = ПрочитатьJSON(ЧтениеАдреса);
		ЧтениеАдреса.Закрыть();
		Объект.АдресККТИндекс = Формат(АдресСтруктурированный.ZIPcode,"ЧГ=");
		Объект.АдресККТРегион = Лев(Формат(АдресСтруктурированный.ifnsFLCode,"ЧГ="),2);
		Объект.АдресККТРегионНаименование = АдресСтруктурированный.area + " " + АдресСтруктурированный.areaType;
		Объект.АдресККТРайон = АдресСтруктурированный.district + " " + АдресСтруктурированный.districtType;
		Объект.АдресККТГород = АдресСтруктурированный.city + " " + АдресСтруктурированный.cityType;
		Если АдресСтруктурированный.localityType = "г" Тогда
			Объект.АдресККТНаселенныйПункт = "";
		Иначе
			Объект.АдресККТНаселенныйПункт = АдресСтруктурированный.locality + " " + АдресСтруктурированный.localityType;
		КонецЕсли;
		Объект.АдресККТУлица = АдресСтруктурированный.street + " " + АдресСтруктурированный.streetType;
		Объект.АдресККТДом = Формат(АдресСтруктурированный.houseNumber,"ЧГ=");
		Объект.АдресККТДомТип = НРег(АдресСтруктурированный.houseType);
		
		Если АдресСтруктурированный.apartments.Количество() <> 0 Тогда
			Объект.АдресККТКвартира = Формат(АдресСтруктурированный.apartments[0].number,"ЧГ=");
			Объект.АдресККТКвартираТип = НРег(АдресСтруктурированный.apartments[0].type);
		Иначе
			Объект.АдресККТКвартира = "";
			Объект.АдресККТКвартираТип = "";
		КонецЕсли;
		Если АдресСтруктурированный.buildings.Количество() <> 0 Тогда
			Объект.АдресККТКорпус = Формат(АдресСтруктурированный.buildings[0].number,"ЧГ=");
			Объект.АдресККТКорпусТип = НРег(АдресСтруктурированный.buildings[0].type);
		Иначе
			Объект.АдресККТКорпус = "";
			Объект.АдресККТКорпусТип = "";
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	//Форма = ПолучитьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса");
	//Результат = Форма.ОткрытьМодально();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	//ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформацией();
	//ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаАдрес");
	//ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	//УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметрыКИ);
	//
	//ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаАдрес2");
	//ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	////ДополнительныеПараметрыКИ.Вставить("СкрываемыеВиды",  ОбщегоНазначенияУТПовтИсп.МассивИсключаемыхВидовКИКонтрагентаДляВыводаВФормеПартнера());
	//УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	 // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	 // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	 // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура РегистрацияВККТ(Команда)	
	//Проверка заполнения
	//ПроверитьЗаполнение(ВидОперации());
	
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	//Сообщить(fptr.version());
	
	АдресСайтаФНС = "www.nalog.gov.ru";
	//ПолныйАдресПрименения = Строка(Формат(Объект.АдресККТИндекс,"ЧГ=")) + ","
	//					  + Объект.АдресККТРегион + "-" 
	//					  + Объект.АдресККТРайон + "," 
	//					  + Объект.АдресККТГород + "," 
	//					  + Объект.АдресККТНаселенныйПункт 
	//					  + Объект.АдресККТУлица + ","
	//					  + Объект.АдресККТДом + ","
	//					  + Объект.АдресККТКорпус + ","
	//					  + Объект.АдресККТКвартира;
	ПолныйАдресПрименения = ПолучитьПолныйАдресПрименения();
	МестоПрименения = Объект.АдресККТМестоПрименения;
	ИННОрганизации = ИННКлиента();
	НазваниеОрганизации = ИмяКлиента();
	
	СНО = 0;
	Если СНООСН Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_OSN);
	КонецЕсли;
	Если СНОУСНДоход Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_USN_INCOME);
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_USN_INCOME_OUTCOME);
	КонецЕсли;
	Если СНОЕНВД Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_ENVD);
	КонецЕсли;
	Если СНОЕСХН Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_ESN);
	КонецЕсли;
	Если СНОПатент Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_PATENT);
	КонецЕсли;
	
	
	
	EMailОрганизации = EMailОрганизации();
	РН = СокрЛП(Объект.РегистрационныйНомерККТ);
	Автономность = Объект.Автономность;   
	ИННОФД = ИННОФД();
	НазваниеОФД = НаименованиеОФД();
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		Иначе
			Ответ = Вопрос("Будет произведена операция в ККТ Атол с указанными настройками. Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Вы уверены?");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
//			Ответ = Вопрос("Для дальнейших действий необходимы права администратора ОС, продолжить?", РежимДиалогаВопрос.ДаНет,,,"Права администратора");
//			Если Ответ = КодВозвратаДиалога.Нет Тогда
//				Возврат
//			Иначе
////				ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
////				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX");
////				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				//УдалитьФайлы(ИмяФайлаDLL);
//				
//				СистемнаяИнформация = Новый СистемнаяИнформация;
//				Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
//				ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
//				КонецЕсли;
//				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
//				Возврат;
//			КонецЕсли;
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	//fptr.setSingleSetting(fptr.LIBFPTR_SETTING_COM_FILE, 'COM5');
    //fptr.setSingleSetting(fptr.LIBFPTR_SETTING_BAUDRATE, IntToStr(fptr.LIBFPTR_PORT_BR_115200));
	
	//Сообщить(fptr.applySingleSettings());
	//Сообщить(fptr.getSettings());
	fptr.open();
	//Сообщить("Статус подключения: " + fptr.isOpened());
	//fptr.deviceReboot();
	Если fptr.isOpened() Тогда
		//Синхронизация времени
		Ответ = Вопрос("Произвести синхронизацию времени?", РежимДиалогаВопрос.ДаНет,,,"Установка даты и времени");
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДатаВремя = ТекущаяДата();
		    fptr.setParam(fptr.LIBFPTR_PARAM_DATE_TIME, ДатаВремя);
		    fptr.writeDateTime();
		КонецЕсли;
		
//СТАРЫЙ ФОРМАТ		
//		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация") Тогда 
//			ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION;
//		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
//			Если Причина4ЗаменаФН Тогда
//				ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN;
//			Иначе
//				ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS;
//			КонецЕсли;
//		Иначе
//			ВидОперации = fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE;
//		КонецЕсли;
//
//		fptr.setParam(fptr.LIBFPTR_PARAM_FN_OPERATION_TYPE,ВидОперации);
//		
//		Если ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS Тогда
//			Если Причина2СменаОФД Тогда
//				fptr.setParam(1101, 2);
//			Иначе
//				fptr.setParam(1101, 3);
//			КонецЕсли;
//		ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN Тогда
//			fptr.setParam(1101, 1);
//		КонецЕсли;
//		
//		Если ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION ИЛИ ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN Тогда
//			fptr.setParam(1018, ИННОрганизации);
//			fptr.setParam(1037, РН);
//			//fptr.setParam(1101, 0);
//		КонецЕсли;
//		
//		Если ВидОперации <> fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE Тогда
//			Если Не Объект.Автономность Тогда
//				fptr.setParam(1060, АдресСайтаФНС);  			//адрес сайта ФНС
//				fptr.setParam(1117, EMailОрганизации);			//EMail отправителя
//				fptr.setParam(1017, ИННОФД);					//ИНН ОФД
//				fptr.setParam(1046, НазваниеОФД);				//Наименование ОФД
//			КонецЕсли;
//			    fptr.setParam(1009, ПолныйАдресПрименения);     //адрес расчетов
//				fptr.setParam(1048, НазваниеОрганизации);		//наименование организации
//				fptr.setParam(1062, СНО);						//СНО
//				fptr.setParam(1057, fptr.LIBFPTR_AT_NONE);		//признак агента
//				fptr.setParam(1187, МестоПрименения); 			//место расчетов
//				fptr.setParam(1209, fptr.LIBFPTR_FFD_1_0_5);	//ФФД           
//				fptr.setParam(1001, Ложь);						//признак автоматического режима
//				fptr.setParam(1036, "");						//номер автомата
//				fptr.setParam(1002, Автономность); 				//автономно
//				fptr.setParam(1056, ?(Автономность,Ложь,Истина));//шифрование
//				fptr.setParam(1108, Ложь);						//расчет в Интернет
//				fptr.setParam(1109, Ложь);						//расчет за услуги
//				fptr.setParam(1110, Сведение150);  				//Признак АС БСО
//				fptr.setParam(1126, Сведение080);  				//Признак проведения лотерей
//				fptr.setParam(1193, Сведение090); 				//Признак проведения азартных игр
//				fptr.setParam(1207, Сведение155);   			//Признак подакцизного товара
//				fptr.setParam(1221, Ложь);   					//Признак установки в автомате
//		КонецЕсли;
//			
//		Если fptr.fnOperation() = -1 Тогда
//			Сообщить(fptr.errorDescription());
//			fptr.close();
//			fptr = Неопределено;
//			Возврат;
//		КонецЕсли;
//		
//		//записываем параметры подключения к ОФД
//		Если ВидОперации <> fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE Тогда
//			Если Не Автономность Тогда
//				СерверОФД = СерверОФД();
//				ПортОФД = ПортОФД();
//				Если СерверОФД <> Неопределено И ПортОФД <> Неопределено Тогда
////					fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 273);
////				    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, СерверОФД);
////				    fptr.writeDeviceSetting();
////					fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 274);
////				    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, ПортОФД);
////				    fptr.writeDeviceSetting();
//					ЗаписьНастроекОФДвККТ(fptr,СерверОФД,ПортОФД);
//				Иначе
//					Сообщить("Проверьте настройки подключения к ОФД!");
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
		
//Формат JSON
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация") Тогда 
			РезультатОперации = ВыполнитьОперациюККТРегистрация(fptr);
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
			Если Причина4ЗаменаФН Тогда
				РезультатОперации = ВыполнитьОперациюККТЗаменаФН(fptr);
			Иначе
				РезультатОперации = ВыполнитьОперациюККТПеререгистрация(fptr);
			КонецЕсли;
		Иначе
			РезультатОперации = ВыполнитьОперациюККТЗакрытиеФН(fptr);
		КонецЕсли;

		
		Если РезультатОперации = -1 Тогда
			Сообщить(fptr.errorDescription());
			fptr.close();
			fptr = Неопределено;
			Возврат;
		КонецЕсли;
		
		//записываем параметры подключения к ОФД
//		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Закрытие") Тогда
//			Если Не Автономность Тогда
//				СерверОФД = СерверОФД();
//				ПортОФД = ПортОФД();
//				Если СерверОФД <> Неопределено И ПортОФД <> Неопределено Тогда
////					fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 273);
////				    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, СерверОФД);
////				    fptr.writeDeviceSetting();
////					fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_ID, 274);
////				    fptr.setParam(fptr.LIBFPTR_PARAM_SETTING_VALUE, ПортОФД);
////				    fptr.writeDeviceSetting();
//					ЗаписьНастроекОФДвККТ(fptr,СерверОФД,ПортОФД);
//				Иначе
//					Сообщить("Проверьте настройки подключения к ОФД!");
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;		
		
		//Получаем незаполненные данные:
		//срок действия ФН
		fptr.setParam(fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_VALIDITY);
		fptr.fnQueryData();
		Объект.СрокДействия = fptr.getParamDateTime(fptr.LIBFPTR_PARAM_DATE_TIME);
		
		//ФД, ФП, Дата отчета
		fptr.setParam(fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_LAST_DOCUMENT);
		fptr.fnQueryData();
		Объект.ФискальныйПризнак = Формат(fptr.getParamString(fptr.LIBFPTR_PARAM_FISCAL_SIGN),"ЧГ=");
		Объект.ДатаФормированияФП = fptr.getParamDateTime(fptr.LIBFPTR_PARAM_DATE_TIME);
		Объект.НомерФД = Формат(fptr.getParamInt(fptr.LIBFPTR_PARAM_DOCUMENT_NUMBER),"ЧГ=");
		
		fptr.close();
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить(fptr.errorDescription());
		fptr.close();
	КонецЕсли;
	
	fptr = Неопределено;

КонецПроцедуры

&НаСервере
Функция EMailОрганизации()
	Возврат Объект.ОператорФискальныхДанных.EMailОтправителя;
КонецФункции

&НаКлиенте
Процедура ПолучениеСНО()
	КодСведенийОбСНО = ПолучитьКодСведенийОбСНО();
	СНООСН = ПроверитьБит(КодСведенийОбСНО,1);
	СНОУСНДоход = ПроверитьБит(КодСведенийОбСНО,2);
	СНОУСНДоходМинусРасход = ПроверитьБит(КодСведенийОбСНО,3);
	СНОЕНВД = ПроверитьБит(КодСведенийОбСНО,4);
	СНОЕСХН = ПроверитьБит(КодСведенийОбСНО,5);
	СНОПатент = ПроверитьБит(КодСведенийОбСНО,6);
КонецПроцедуры

&НаСервере
Функция ПолучитьКодСведенийОбСНО()
	Возврат Объект.СведенияОбСНО;	
КонецФункции

&НаКлиенте
Процедура ПредварительныйПросмотрРегистрацииВККТ(Команда)
	ПредварительныйРезультатРегистрации = "";
	
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	АдресСайтаФНС = "www.nalog.gov.ru";
	ПолныйАдресПрименения = ПолучитьПолныйАдресПрименения();						  
							 
	МестоПрименения = Объект.АдресККТМестоПрименения;
	ИННОрганизации = ИННКлиента();
	НазваниеОрганизации = ИмяКлиента();
	
	СНО = 0;
	Если СНООСН Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_OSN);
	КонецЕсли;
	Если СНОУСНДоход Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_USN_INCOME);
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_USN_INCOME_OUTCOME);
	КонецЕсли;
	Если СНОЕНВД Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_ENVD);
	КонецЕсли;
	Если СНОЕСХН Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_ESN);
	КонецЕсли;
	Если СНОПатент Тогда
		СНО = ПобитовоеИли(СНО,fptr.LIBFPTR_TT_PATENT);
	КонецЕсли;
	
	
	
	EMailОрганизации = EMailОрганизации();
	РН = СокрЛП(Объект.РегистрационныйНомерККТ);
	Автономность = Объект.Автономность;   
	ИННОФД = ИННОФД();
	НазваниеОФД = НаименованиеОФД();
	
	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	
	//fptr.setSingleSetting(fptr.LIBFPTR_SETTING_COM_FILE, 'COM5');
    //fptr.setSingleSetting(fptr.LIBFPTR_SETTING_BAUDRATE, IntToStr(fptr.LIBFPTR_PORT_BR_115200));
	
	//Сообщить(fptr.applySingleSettings());
	//Сообщить(fptr.getSettings());
	//fptr.open();
	//Сообщить("Статус подключения: " + fptr.isOpened());
	//fptr.deviceReboot();
	//Если fptr.isOpened() Тогда
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Регистрация") Тогда 
		ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийККТ.Перерегистрация") Тогда
		Если Причина4ЗаменаФН Тогда
			ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN;
		Иначе
			ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS;
		КонецЕсли;
	Иначе
		ВидОперации = fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE;
	КонецЕсли;

	//fptr.setParam(fptr.LIBFPTR_PARAM_FN_OPERATION_TYPE,ВидОперации);
	ТекстОтчета = "";
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION Тогда
		ТекстОтчета = ТекстОтчета + "Отчет о регистрации" + Символы.ПС;
	ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_FN Тогда
		ТекстОтчета = ТекстОтчета + "Замена ФН" + Символы.ПС;
	ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS Тогда
		ТекстОтчета = ТекстОтчета + "Отчет об изменении параметров регистрации" + Символы.ПС;
	ИначеЕсли ВидОперации = fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE Тогда
		ТекстОтчета = ТекстОтчета + "Закрытие архива ФН" + Символы.ПС;
	КонецЕсли;
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_CHANGE_PARAMETERS Тогда
		ТекстОтчета = ТекстОтчета + "Причина перерегистрации: ";
		Если Причина2СменаОФД Тогда
			//fptr.setParam(1101, 2);
			ТекстОтчета = ТекстОтчета + "изменение ОФД" + Символы.ПС;
		Иначе
			//fptr.setParam(1101, 3);
			ТекстОтчета = ТекстОтчета + "изменение реквизитов" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = fptr.LIBFPTR_FNOP_REGISTRATION Тогда
		fptr.setParam(1018, ИННОрганизации);
		fptr.setParam(1037, РН);
		//fptr.setParam(1101, 0);
	КонецЕсли;
	
	Если ВидОперации <> fptr.LIBFPTR_FNOP_CLOSE_ARCHIVE Тогда
		Если Не Объект.Автономность Тогда
			//fptr.setParam(1060, АдресСайтаФНС);  			//адрес сайта ФНС
			//fptr.setParam(1117, EMailОрганизации);			//EMail отправителя
			//fptr.setParam(1017, ИННОФД);					//ИНН ОФД
			//fptr.setParam(1046, НазваниеОФД);				//Наименование ОФД
			
			ТекстОтчета = ТекстОтчета + "Сайт ФНС: " + АдресСайтаФНС + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "e-mail отправителя: " + EMailОрганизации + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "ИНН ОФД: " + ИННОФД + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "ОФД: " + НазваниеОФД + Символы.ПС;
		КонецЕсли;
			//fptr.setParam(1009, ПолныйАдресПрименения);     //адрес расчетов
			//fptr.setParam(1048, НазваниеОрганизации);		//наименование организации
			//fptr.setParam(1062, СНО);						//СНО
			//fptr.setParam(1057, fptr.LIBFPTR_AT_NONE);		//признак агента
			//fptr.setParam(1187, МестоПрименения); 			//место расчетов
			//fptr.setParam(1209, fptr.LIBFPTR_FFD_1_0_5);	//ФФД           
			//fptr.setParam(1001, Ложь);						//признак автоматического режима
			//fptr.setParam(1036, "");						//номер автомата
			//fptr.setParam(1002, Автономность); 				//автономно
			//fptr.setParam(1056, ?(Объект.Автономность,Ложь,Истина));					//шифрование
			//fptr.setParam(1108, Ложь);						//расчет в Интернет
			//fptr.setParam(1109, Ложь);						//расчет за услуги
			//fptr.setParam(1110, Сведение150);  				//Признак АС БСО
			//fptr.setParam(1126, Сведение080);  				//Признак проведения лотерей
			//fptr.setParam(1193, Сведение090); 				//Признак проведения азартных игр
			//fptr.setParam(1207, Сведение155);   			//Признак подакцизного товара
			//fptr.setParam(1221, Ложь);   					//Признак установки в автомате
			
			ТекстОтчета = ТекстОтчета + "РН: " + РН + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "Пользователь: " + НазваниеОрганизации + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "ИНН: " + ИННОрганизации + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "Адрес: " + ПолныйАдресПрименения + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "Место расчетов: " + МестоПрименения + Символы.ПС;
			ТекстОтчета = ТекстОтчета + "СНО:" + Символы.ПС;
			Если ПроверитьБит(СНО,0) Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "ОСН" + Символы.ПС;
			КонецЕсли;
			Если ПроверитьБит(СНО,1) Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "УСН Доход" + Символы.ПС;
			КонецЕсли;
			Если ПроверитьБит(СНО,2) Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "УСН Доход минус Расход" + Символы.ПС;
			КонецЕсли;
			Если ПроверитьБит(СНО,3) Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "ЕНВД" + Символы.ПС;
			КонецЕсли;
			Если ПроверитьБит(СНО,4) Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "ЕСХН" + Символы.ПС;
			КонецЕсли;
			Если ПроверитьБит(СНО,5) Тогда
				ТекстОтчета = ТекстОтчета + Символы.Таб + "Патент" + Символы.ПС;
			КонецЕсли;
			Если Автономность Тогда
				ТекстОтчета = ТекстОтчета + "АВТОНОМНЫЙ РЕЖИМ" + Символы.ПС;
			Иначе
				ТекстОтчета = ТекстОтчета + "ШИФРОВАНИЕ" + Символы.ПС;
			КонецЕсли;
			Если Сведение150 Тогда
				ТекстОтчета = ТекстОтчета + "АС БСО" + Символы.ПС;
			КонецЕсли;
			Если Сведение080 Тогда
				ТекстОтчета = ТекстОтчета + "ПРОВЕДЕНИЕ ЛОТЕРЕЙ" + Символы.ПС;
			КонецЕсли;
			Если Сведение090 Тогда
				ТекстОтчета = ТекстОтчета + "ПРОВЕДЕНИЕ АЗАРТНЫХ ИГР" + Символы.ПС;
			КонецЕсли; 
			Если Сведение155 Тогда
				ТекстОтчета = ТекстОтчета + "ПОДАКЦИЗНЫЙ ТОВАР" + Символы.ПС;
			КонецЕсли;
	КонецЕсли;
			
		//Если fptr.fnOperation() = -1 Тогда
		//	Сообщить(fptr.errorDescription());
		//КонецЕсли;
		
		//fptr.close();
	//КонецЕсли;
	
	fptr = Неопределено;
	
	ПредварительныйРезультатРегистрации = ТекстОтчета;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзККТ(Команда)
	Попытка
		fptr = Новый COMОбъект("AddIn.Fptr10");
	Исключение
		//установка дККТ
		Предупреждение("Ну а драйвер я должен установить?!" + Символы.ПС + "Так уж и быть, поставлю.",5,"Не установлен дККТ");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows32-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_32");
		ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяУстановщика = КаталогВременныхФайлов() + "KKT10-10.8.0.0-windows64-setup.exe";
			ЗаписьМакета(ИмяУстановщика, "дККТ10_64");
		КонецЕсли;
		ЗапуститьПриложение(ИмяУстановщика,,Истина);
		УдалитьФайлы(ИмяУстановщика);
		Возврат;
	КонецПопытки;
	
	//Подключение ККТ
	USB = Ложь;
	Попытка
		Wrap = Новый COMОбъект("DynamicWrapperX");
		Wrap.Register("USER32.DLL", "GetActiveWindow", "f=s", "r=l");
		Handle = Wrap.GetActiveWindow();
		Ответ = fptr.showProperties(fptr.LIBFPTR_GUI_PARENT_NATIVE, Handle);
		Если Ответ = 1 Тогда	//отмена
			Возврат;
		//Иначе
		//	Ответ = Вопрос("Будет произведена операция в ККТ Атол с указанными настройками. Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Вы уверены?");
		//	Если Ответ = КодВозвратаДиалога.Нет Тогда
		//		Возврат;
		//	КонецЕсли;
		КонецЕсли;
	Исключение
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Настроить","Настроить");
		СписокКнопок.Добавить("USB","USB");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		//Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить операцию в ККТ Атол с подключением по USB?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет,"Настроить систему?");
		Ответ = Вопрос("Не удалось вызвать окно настроек. Продолжить чтение из ККТ Атол с подключением по USB или настроить систему?", СписокКнопок,,"Настроить","Настроить систему?");
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = "USB" Тогда
			USB = Истина;
		ИначеЕсли Ответ = "Настроить" Тогда
//			Ответ = Вопрос("Для дальнейших действий необходимы права администратора ОС, продолжить?", РежимДиалогаВопрос.ДаНет,,,"Права администратора");
//			Если Ответ = КодВозвратаДиалога.Нет Тогда
//				Возврат
//			Иначе
////				ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
////				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX");
////				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				//УдалитьФайлы(ИмяФайлаDLL);
//				СистемнаяИнформация = Новый СистемнаяИнформация;
//				Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
//				ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
//					ИмяФайлаDLL = "C:\Windows\System32\dynwrapx.dll";
//					ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
//				КонецЕсли;
//				ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe """ + ИмяФайлаDLL + """",,Истина);
//				Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
//				Возврат;
//			КонецЕсли;
			СистемнаяИнформация = Новый СистемнаяИнформация;
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_32.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_32");
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
				ИмяФайлаDLL = РабочийКаталогДанныхПользователя() + "dynwrapx_64.dll";
				ЗаписьМакета(ИмяФайлаDLL,"DynamicWrapperX_64");
			КонецЕсли;
			ЗапуститьПриложение("C:\Windows\System32\regsvr32.exe /i """ + ИмяФайлаDLL + """",,Истина);
			Сообщить("Произведена регистрация необходимых библиотек. Повторите попытку");
			Возврат;
		КонецЕсли;
	КонецПопытки;		
	
	Если USB Тогда
		fptr.setSingleSetting(fptr.LIBFPTR_SETTING_MODEL, Строка(fptr.LIBFPTR_MODEL_ATOL_AUTO));
    	fptr.setSingleSetting(fptr.LIBFPTR_SETTING_PORT, Строка(fptr.LIBFPTR_PORT_USB));
	КонецЕсли;
	
	fptr.open();
	Если fptr.isOpened() Тогда
		//даные о ККТ
		fptr.setParam(fptr.LIBFPTR_PARAM_DATA_TYPE, fptr.LIBFPTR_DT_STATUS);
    	fptr.queryData();
		ФНУстановлен = fptr.getParamBool(fptr.LIBFPTR_PARAM_FN_PRESENT);
		ФНФискализирован = fptr.getParamBool(fptr.LIBFPTR_PARAM_FN_FISCAL);
		ЗНККТ = fptr.getParamString(fptr.LIBFPTR_PARAM_SERIAL_NUMBER);
		МодельКККТ = fptr.getParamString(fptr.LIBFPTR_PARAM_MODEL_NAME);
		Объект.ККТ = ПолучитьККТПоЗН(ЗНККТ);
		
		//данные об ФН
		Если ФНУстановлен Тогда
			fptr.setParam(fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_FN_INFO);
	    	fptr.fnQueryData();
			ЗНФН = fptr.getParamString(fptr.LIBFPTR_PARAM_SERIAL_NUMBER);
			Объект.ФискальныйНакопитель = ПолучитьФНПоЗН(ЗНФН);
		КонецЕсли;
		
		//Узнаем номер последней регистрации/перерегистрации
		//fptr.setParam(fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_LAST_REGISTRATION);
		//fptr.fnQueryData();
		//
		//НомерРегистрации  := fptr.getParamInt(fptr.LIBFPTR_PARAM_REGISTRATIONS_COUNT);
		
		//считываем реквизиты регистрации
		Если ФНФискализирован Тогда
			fptr.setParam(fptr.LIBFPTR_PARAM_FN_DATA_TYPE, fptr.LIBFPTR_FNDT_REG_INFO);
		    fptr.fnQueryData();

			//1060	Адрес сайта ФНС	string
			//1009	Адрес расчетов	string
			//1018	ИНН организации	string
			//1048	Название организации	string
			//1062	Системы налогообложения	int
			//1117	E-mail организации	string
			//1057	Признак агента	int
			//1187	Адрес места расчетов	string
			//1037	Регистрационный номер устройства	string
			//1209	Версия ФФД	int
			//1001	Признак автоматического режима	bool
			//1036	Номер автомата	string
			//1002	Признак автономного режима	bool
			//1056	Признак шифрования	bool
			//1108	Признак ККТ для расчетов в сети Интернет	bool
			//1109	Признак расчетов за услуги	bool
			//1110	Признак АС БСО	bool
			//1126	Признак проведения лотерей	bool
			//1193	Признак проведения азартных игр	bool
			//1207	Признак подакцизного товара	bool
			//1221	Признак установки принтера в автомате	bool
			//1017	ИНН ОФД	string
			//1046	Название ОФД	string

		    Объект.СведенияОбСНО  = ПреобразоватьСНОККТВСНО1С(fptr.getParamInt(1062));
			ПолучениеСНО();
			Объект.Автономность       = fptr.getParamBool(1002);
			
			ИННКлиента = fptr.getParamString(1018);
			ИмяКлиента = fptr.getParamString(1048);
			ИННОфд = fptr.getParamString(1017);
			РН = fptr.getParamString(1037);
			ПодакцизныйТовар = fptr.getParamBool(1207);
			АдресРасчетов = fptr.getParamString(1009);
			МестоРасчетов = fptr.getParamString(1187);
			
			fptr.close();
			
			Объект.Клиент = ПолучитьКлиентаПоИНН(ИННКлиента);
			Объект.ОператорФискальныхДанных = ПолучитьОФДПоИНН(ИННОфд);
			Объект.РегистрационныйНомерККТ = РН;
			Сведение155 = ПодакцизныйТовар;
			Объект.АдресККТМестоПрименения = МестоРасчетов;
			
			//Мастер создания новых объектов
			Если ЗначениеЗаполнено(Объект.ККТ) Тогда
				ЗНККТ = Неопределено;
				МодельКККТ = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ФискальныйНакопитель) Тогда
				ЗНФН = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.Клиент) Тогда
				ИННКлиента = Неопределено;
				ИмяКлиента = Неопределено;
			КонецЕсли;
			СозданныеОбъекты = СоздатьНовыеОбъекты(ЗНККТ,МодельКККТ,ЗНФН,ИННКлиента,ИмяКлиента);
			
			Если СозданныеОбъекты <> Неопределено Тогда
							
				Если СозданныеОбъекты.Свойство("ККТ") Тогда
					Объект.ККТ = СозданныеОбъекты.ККТ;
				КонецЕсли;
				Если СозданныеОбъекты.Свойство("ФН") Тогда
					Объект.ФискальныйНакопитель = СозданныеОбъекты.ФН;
				КонецЕсли;
				Если СозданныеОбъекты.Свойство("Клиент") Тогда
					Объект.Клиент = СозданныеОбъекты.Клиент;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СозданныеОбъекты = СоздатьНовыеОбъекты(ЗНККТ,МодельКККТ,ЗНФН);
		КонецЕсли;
		
		УправлениеВидимостью();
		УправлениеДоступностью();
		
		Предупреждение("Обязательно проверьте все данные!");
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Функция ПроверитьЗаполнение(ВидОперации=Неопределено)
//	Если ВидОперации = Перечисления.ВидыОперацийККТ.Закрытие Тогда
//		//Проверка: НИЧЕГО, т.к. просто команда закрытия		
//	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийККТ.Регистрация Тогда
//		//Проверка:
//		//			Имя Клиента
//		//			ИНН Клиента
//		//			Адрес расчетов
//		//			Место расчетов
//		//			Имя ОФД
//		//			ИНН ОФД
//		//			email
//		//			СНО
//		//			РН
//		МассивПроверяемыхРеквизитов.Добавить(Объект.РегистрационныйНомерККТ);
//		МассивПроверяемыхРеквизитов = Новый Массив;
//		МассивПроверяемыхРеквизитов.Добавить(Объект.Клиент);
//		МассивПроверяемыхРеквизитов.Добавить(Объект.Клиент.ИНН);
//		МассивПроверяемыхРеквизитов.Добавить(
//											Объект.АдресККТГород
//											+ Объект.АдресККТДом
//											+ Объект.АдресККТИндекс
//											+ Объект.АдресККТКвартира
//											+ Объект.АдресККТКорпус
//											+ Объект.АдресККТНаселенныйПункт
//											+ Объект.АдресККТРайон
//											+ Объект.АдресККТРегион
//											+ Объект.АдресККТУлица
//											);
//		МассивПроверяемыхРеквизитов.Добавить(Объект.АдресККТМестоПрименения);
//		Если НЕ Объект.Автономность Тогда
//			МассивПроверяемыхРеквизитов.Добавить(Объект.ОператорФискальныхДанных);
//			МассивПроверяемыхРеквизитов.Добавить(Объект.ОператорФискальныхДанных.ИНН);
//			МассивПроверяемыхРеквизитов.Добавить(Объект.ОператорФискальныхДанных.EMailОтправителя);
//		КонецЕсли;
//		МассивПроверяемыхРеквизитов.Добавить(Объект.СведенияОбСНО);		
//	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийККТ.Перерегистрация Тогда
//	Иначе
//	КонецЕсли;
//КонецФункции

&НаКлиенте
Функция ПреобразоватьСНОККТВСНО1С(СНО)
	Возврат ПобитовыйСдвигВлево(СНО,1);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлиентаПоИНН(ИННКлиента)
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИННКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Клиент = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Клиент;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОФДПоИНН(ИННОФД)
	ОФД = Справочники.ОператорыФискальныхДанных.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОФД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОператорыФискальныхДанных КАК ОФД
		|ГДЕ
		|	ОФД.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", Число(ИННОФД));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОФД = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ОФД;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФНПоЗН(ЗН)
	Возврат Справочники.ФискальныеНакопители.НайтиПоКоду(ЗН);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьККТПоЗН(ЗН)
	Возврат Справочники.КонтрольноКассоваяТехника.НайтиПоКоду(ЗН);
КонецФункции

&НаКлиенте
Функция СоздатьНовыеОбъекты(ЗНККТ=Неопределено,МодельККТ,ЗНФН=Неопределено,ИНН=Неопределено,Название="")
	Результат = Неопределено;
	ПараметрыСоздания = Новый Структура;
	Если ЗНККТ <> Неопределено Тогда
		ПараметрыСоздания.Вставить("ЗНККТ",ЗНККТ);
		ПараметрыСоздания.Вставить("МодельККТ",МодельККТ);
	КонецЕсли;
	Если ЗНФН <> Неопределено Тогда
		ПараметрыСоздания.Вставить("ЗНФН",ЗНФН);
	КонецЕсли;
	Если ИНН <> Неопределено Тогда 
		ПараметрыСоздания.Вставить("ИННКлиента",ИНН);
		ПараметрыСоздания.Вставить("ИмяКлиента",Название);
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.РегистрацияККТ.Форма.ФормаМастераСоздания",Новый Структура("СоздаваемыеОбъекты",ПараметрыСоздания));
	Результат = Форма.ОткрытьМодально();	
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СерверОФД()
	Если ЗначениеЗаполнено(Объект.ОператорФискальныхДанных) И ЗначениеЗаполнено(Объект.ОператорФискальныхДанных.АдресСервера) Тогда
		Возврат Объект.ОператорФискальныхДанных.АдресСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПортОФД()
	Если ЗначениеЗаполнено(Объект.ОператорФискальныхДанных) И ЗначениеЗаполнено(Объект.ОператорФискальныхДанных.ПортСервера) Тогда
		Возврат Объект.ОператорФискальныхДанных.ПортСервера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Сведение080ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение090ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение095ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение100ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение105ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение110ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение130ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение140ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение150ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Сведение155ПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНООСНПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОУСНДоходПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОУСНДоходМинусРасходПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОПатентПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОЕНВДПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СНОЕСХНПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолныйАдресПрименения()
	ПолныйАдресПрименения = Строка(Формат(Объект.АдресККТИндекс,"ЧГ=")) + ", "
						  + Объект.АдресККТРегион + "-" + Объект.АдресККТРегионНаименование + ", " 
						  + ?(ЗначениеЗаполнено(Объект.АдресККТРайон),Объект.АдресККТРайон + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТГород),Объект.АдресККТГород + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТНаселенныйПункт),Объект.АдресККТНаселенныйПункт + ", ","")
						  + Объект.АдресККТУлица + ", "
						  + ?(ЗначениеЗаполнено(Объект.АдресККТДом),Объект.АдресККТДом + " " + Объект.АдресККТДомТип + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТКорпус),Объект.АдресККТКорпус + " " + Объект.АдресККТКорпусТип + ", ","")
						  + ?(ЗначениеЗаполнено(Объект.АдресККТКвартира),Объект.АдресККТКвартира + " " + Объект.АдресККТКвартираТип,"");
  	Если Прав(ПолныйАдресПрименения,2) = ", " Тогда
		ПолныйАдресПрименения = Лев(ПолныйАдресПрименения,СтрДлина(ПолныйАдресПрименения) - 2);
	КонецЕсли;
	Возврат ПолныйАдресПрименения;
КонецФункции

&НаКлиенте
Процедура ЗаписьНастроекОФДвККТ(fptr,СерверОФД,ПортОФД,СНО)
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить(50,"СНО по умолчанию");
	СоответствиеПараметров.Вставить(273,"Адрес ОФД");
	СоответствиеПараметров.Вставить(274,"Порт ОФД");
//	СоответствиеПараметров.Вставить(276,"Канал обмена с ОФД");
//	СоответствиеПараметров.Вставить(1000,"Адрес ИСМ");
//	СоответствиеПараметров.Вставить(1001,"Порт ИСМ");
//	СоответствиеПараметров.Вставить(1002,"Адрес ОКП");
//	СоответствиеПараметров.Вставить(1003,"Порт ОКП");
	
	ЗаданиеJSON = "
				|{
				|   ""type"": ""setDeviceParameters"",
				|
				|   ""deviceParameters"" : [
				|		  {
				|            ""key"" : 50,
				|            ""value"" : " + СНО + "
				|		  },
				|         {
				|            ""key"" : 273,
				|            ""value"" : """ + СерверОФД + """
				|         },
				|         {
				|            ""key"" : 274,
				|            ""value"" : """ + Формат(ПортОФД,"ЧГ=") + """ 
				|         }
				|      ]
				|}";
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
	fptr.processJson();

    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
    
    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
    
//    Для Каждого Параметр Из result.deviceParameters Цикл
//    	Если Параметр.Свойство("errorDescription") Тогда
//    		Если Параметр.key = 273 Тогда
//    			тАдресОФД = "Не установлен: " + Параметр.errorDescription; 
//    		ИначеЕсли Параметр.key = 274 Тогда
//    			тПортОФД = "Не установлен: " + Параметр.errorDescription;
//    		ИначеЕсли Параметр.key = 50 Тогда
//    			 тОСН = "Не установлен: " + Параметр.errorDescription;
//    		КонецЕсли;
//    	Иначе
//    		Если Параметр.key = 273 Тогда
//    			тАдресОФД = Параметр.value; 
//    		ИначеЕсли Параметр.key = 274 Тогда
//    			тПортОФД = Параметр.value;
//    		ИначеЕсли Параметр.key = 50 Тогда
//    			тОСН = Параметр.value;  
//    		КонецЕсли;
//    	КонецЕсли;
//    КонецЦикла;
     СтруктураОтвета = Новый Структура;
    
     Для Каждого Параметр Из result.deviceParameters Цикл
    	Если Параметр.Свойство("errorDescription") Тогда
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),"Не получен: " + Параметр.errorDescription);
    	Иначе
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),Параметр.value);
    	КонецЕсли;
    КонецЦикла;
    ПредварительныйРезультатРегистрации = "Записаны настройки:" + Символы.ПС;
    
    СоответствиеСНО = ПолучитьПобитовоеСоответствиеСНО();
    
    Для Каждого КлючИЗначение Из СтруктураОтвета Цикл
    	Если Число(Сред(КлючИЗначение.Ключ,2)) = 50 Тогда
    		Значение = СоответствиеСНО.Получить(Число(КлючИЗначение.Значение));
    	Иначе
    		Значение = КлючИЗначение.Значение;
    	КонецЕсли;
    	ПредварительныйРезультатРегистрации = ПредварительныйРезультатРегистрации + СоответствиеПараметров.Получить(Число(Сред(КлючИЗначение.Ключ,2))) + ": " + Значение + Символы.ПС;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиОФДсККТ(fptr)
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить(50,"СНО по умолчанию");
	СоответствиеПараметров.Вставить(273,"Адрес ОФД");
	СоответствиеПараметров.Вставить(274,"Порт ОФД");
	СоответствиеПараметров.Вставить(276,"Канал обмена с ОФД");
	СоответствиеПараметров.Вставить(1000,"Адрес ИСМ");
	СоответствиеПараметров.Вставить(1001,"Порт ИСМ");
	СоответствиеПараметров.Вставить(1002,"Адрес ОКП");
	СоответствиеПараметров.Вставить(1003,"Порт ОКП");
	
	ЗаданиеJSON = "
				|{
				|   ""type"": ""getDeviceParameters"",
				|
				|   ""keys"" : [ 50, 273, 274, 276, 1000, 1001, 1002, 1003 ]
				|}";
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSON);
	fptr.processJson();

    resultString = fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA);
    
    result = ПолучитьСтруктурированныеДанныеJSON(resultString);
    
    СтруктураОтвета = Новый Структура();
    
    Для Каждого Параметр Из result.deviceParameters Цикл
    	Если Параметр.Свойство("errorDescription") Тогда
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),"Не получен: " + Параметр.errorDescription);
//    		Если Параметр.key = 273 Тогда
//    			тАдресОФД = "Не получен: " + Параметр.errorDescription; 
//    		ИначеЕсли Параметр.key = 274 Тогда
//    			тПортОФД = "Не получен: " + Параметр.errorDescription;
//    		
//    		КонецЕсли;
    	Иначе
    		СтруктураОтвета.Вставить("_"+Формат(Параметр.key,"ЧГ="),Параметр.value);
//    		Если Параметр.key = 273 Тогда
//    			тАдресОФД = Параметр.value; 
//    		ИначеЕсли Параметр.key = 274 Тогда
//    			тПортОФД = Параметр.value;
//    		КонецЕсли;
    	КонецЕсли;
    КонецЦикла;
    //ПредварительныйРезультатРегистрации = "Считаны настройки:" + Символы.ПС + "Адрес ОФД: " + тАдресОФД + Символы.ПС + "Порт ОФД: " + тПортОФД;
    ПредварительныйРезультатРегистрации = "Считаны настройки:" + Символы.ПС;
    
    СоответствиеСНО = ПолучитьПобитовоеСоответствиеСНО();
    
    СоответствиеКаналовОбменаСОФД = Новый Соответствие();
    СоответствиеКаналовОбменаСОФД.Вставить(1,"EoU");
    СоответствиеКаналовОбменаСОФД.Вставить(2,"Ethernet");
    СоответствиеКаналовОбменаСОФД.Вставить(3,"Wi-Fi");
    СоответствиеКаналовОбменаСОФД.Вставить(4,"GSM");
    СоответствиеКаналовОбменаСОФД.Вставить(5,"EoT");
    СоответствиеКаналовОбменаСОФД.Вставить(6,"TCP/IP стек ОС");
    
    Для Каждого КлючИЗначение Из СтруктураОтвета Цикл
    	Если Число(Сред(КлючИЗначение.Ключ,2)) = 50 Тогда
    		Значение = СоответствиеСНО.Получить(Число(КлючИЗначение.Значение));
    	ИначеЕсли Число(Сред(КлючИЗначение.Ключ,2)) = 276 Тогда  
    		Значение = СоответствиеКаналовОбменаСОФД.Получить(Число(КлючИЗначение.Значение));
    	Иначе
    		Значение = КлючИЗначение.Значение;
    	КонецЕсли;
    	ПредварительныйРезультатРегистрации = ПредварительныйРезультатРегистрации + СоответствиеПараметров.Получить(Число(Сред(КлючИЗначение.Ключ,2))) + ": " + Значение + Символы.ПС;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьОперациюККТРегистрация(fptr)	
	organization = ЗаданиеJSONПолучитьИнформациюОбОрганизации();
	device = ЗаданиеJSONПолучитьПараметрыККТ();
	ofd = ЗаданиеJSONПолучитьПараметрыОФД();
	
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","registration");
	ЗаданиеJSON.Вставить("organization",organization);
	ЗаданиеJSON.Вставить("device",device);
	ЗаданиеJSON.Вставить("ofd",ofd);
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	Результат = fptr.processJson();
	
	Если Результат = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA)));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьОперациюККТПеререгистрация(fptr)
	organization = ЗаданиеJSONПолучитьИнформациюОбОрганизации();
	device = ЗаданиеJSONПолучитьПараметрыККТ();
	ofd = ЗаданиеJSONПолучитьПараметрыОФД();
	reason = ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД105();
	
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","changeRegistrationParameters");
	ЗаданиеJSON.Вставить("organization",organization);
	ЗаданиеJSON.Вставить("device",device);
	ЗаданиеJSON.Вставить("ofd",ofd);
	ЗаданиеJSON.Вставить("reason",reason);
	
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	Результат = fptr.processJson();
	
	Если Результат = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA)));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьОперациюККТЗаменаФН(fptr)
	organization = ЗаданиеJSONПолучитьИнформациюОбОрганизации();
	device = ЗаданиеJSONПолучитьПараметрыККТ();
	ofd = ЗаданиеJSONПолучитьПараметрыОФД();
	
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","fnChange");
	ЗаданиеJSON.Вставить("organization",organization);
	ЗаданиеJSON.Вставить("device",device);
	ЗаданиеJSON.Вставить("ofd",ofd);
	
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	Результат = fptr.processJson();
	
	Если Результат = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA)));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВыполнитьОперациюККТЗакрытиеФН(fptr)
	ЗаданиеJSON = Новый Структура();
	ЗаданиеJSON.Вставить("type","closeArchive");
	ЗаданиеJSONСтрокой = ПолучитьСтрокуJSONИзСтруктуры(ЗаданиеJSON);
	
	fptr.setParam(fptr.LIBFPTR_PARAM_JSON_DATA, ЗаданиеJSONСтрокой);
	
	Результат = fptr.processJson();
	
	Если Результат = 0 Тогда
		ПредварительныйРезультатРегистрации = ПолучитьСтрокуJSONИзСтруктуры(ПолучитьСтруктурированныеДанныеJSON(fptr.getParamString(fptr.LIBFPTR_PARAM_JSON_DATA)));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьИнформациюОбОрганизации()
	ЗаданиеJSONОрганизация = Новый Структура();
	ЗаданиеJSONОрганизация.Вставить("name",ИмяКлиента());
	ЗаданиеJSONОрганизация.Вставить("vatin",ИННКлиента());
	Если Не Объект.Автономность Тогда
		ЗаданиеJSONОрганизация.Вставить("email",EMailОрганизации());
	Иначе
		ЗаданиеJSONОрганизация.Вставить("email","");
	КонецЕсли;
	ЗаданиеJSONОрганизация.Вставить("address",ПолучитьПолныйАдресПрименения());
	ЗаданиеJSONОрганизация.Вставить("taxationTypes",ЗаданиеJSONПолучитьСписокСНО());
	
	Возврат ЗаданиеJSONОрганизация;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПараметрыККТ()
	АвтономнаяРабота = Объект.Автономность;
	
	ЗаданиеJSONПараметрыККТ = Новый Структура();
	ЗаданиеJSONПараметрыККТ.Вставить("registrationNumber",СтрЗаменить(Объект.РегистрационныйНомерККТ," ",""));
	ЗаданиеJSONПараметрыККТ.Вставить("fnsUrl",?(АвтономнаяРабота,"","www.nalog.gov.ru"));
	ЗаданиеJSONПараметрыККТ.Вставить("offlineMode",АвтономнаяРабота);
	ЗаданиеJSONПараметрыККТ.Вставить("machineInstallation",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("bso",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("encryption",НЕ АвтономнаяРабота);
	ЗаданиеJSONПараметрыККТ.Вставить("autoMode",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("machineNumber","");
	ЗаданиеJSONПараметрыККТ.Вставить("internet",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("service",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("excise",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("gambling",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("lottery",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("defaultTaxationType",ЗаданиеJSONПолучитьСНОПоУмолчанию());
	ЗаданиеJSONПараметрыККТ.Вставить("ofdChannel","proto");
	ЗаданиеJSONПараметрыККТ.Вставить("ffdVersion","1.05");
	ЗаданиеJSONПараметрыККТ.Вставить("paymentsAddress",Объект.АдресККТМестоПрименения);
	ЗаданиеJSONПараметрыККТ.Вставить("insurance",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("marking",Ложь);
	ЗаданиеJSONПараметрыККТ.Вставить("pawnShop",Ложь);
	
	Возврат ЗаданиеJSONПараметрыККТ;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПараметрыОФД()
	ЗаданиеJSONПараметрыОФД = Новый Структура();
	Если Не Объект.Автономность Тогда
		ЗаданиеJSONПараметрыОФД.Вставить("name",НаименованиеОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("vatin",ИННОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("host",СерверОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("port",ПортОФД());
		ЗаданиеJSONПараметрыОФД.Вставить("dns","0.0.0.0");
	Иначе
		ЗаданиеJSONПараметрыОФД.Вставить("name","");
		ЗаданиеJSONПараметрыОФД.Вставить("vatin","");
		ЗаданиеJSONПараметрыОФД.Вставить("host","");
		ЗаданиеJSONПараметрыОФД.Вставить("port",0);
		ЗаданиеJSONПараметрыОФД.Вставить("dns","0.0.0.0");
	КонецЕсли;
	
	Возврат ЗаданиеJSONПараметрыОФД;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьСписокСНО()
	СНО = Новый Массив;
	Если СНООСН Тогда
		СНО.Добавить("osn");
	КонецЕсли;
	Если СНОУСНДоход Тогда
		СНО.Добавить("usnIncome");
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		СНО.Добавить("usnIncomeOutcome");
	КонецЕсли;
	Если СНОЕСХН Тогда
		СНО.Добавить("esn");
	КонецЕсли;
	Если СНОПатент Тогда
		СНО.Добавить("patent");
	КонецЕсли;
	
	Возврат СНО;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьСНОПоУмолчанию()
	Если СНООСН Тогда
		Возврат "osn";
	КонецЕсли;
	Если СНОУСНДоход Тогда
		Возврат "usnIncome";
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		Возврат "usnIncomeOutcome";
	КонецЕсли;
	Если СНОЕСХН Тогда
		Возврат "esn";
	КонецЕсли;
	Если СНОПатент Тогда
		Возврат "patent";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗаданиеJSONПолучитьПричинуПеререгистрацииФФД105()
	Если Причина2СменаОФД ИЛИ Причина5ПереходНаРаботуСОФД Тогда
		Причина = "ofdChange";
	ИначеЕсли Причина1ИзменениеАдреса ИЛИ Причина7ИзменениеРеквизитовОрганизации Тогда 
		Причина = "attributesChange";
	Иначе
		Причина = "settingsChange";
	КонецЕсли;
	
	Возврат Причина;
КонецФункции

&НаКлиенте
Функция ПолучитьСНОПоУмолчаниюПобитово()
    Если СНООСН Тогда
		Возврат 1;
	КонецЕсли;
	Если СНОУСНДоход Тогда
		Возврат 2;
	КонецЕсли;
	Если СНОУСНДоходМинусРасход Тогда
		Возврат 4;
	КонецЕсли;
	Если СНОЕСХН Тогда
		Возврат 16;
	КонецЕсли;
	Если СНОПатент Тогда
		Возврат 32;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьПобитовоеСоответствиеСНО()
	СоответствиеСНО = Новый Соответствие;
    СоответствиеСНО.Вставить(0,"Не выбрана");
    СоответствиеСНО.Вставить(1,"ОСН");
    СоответствиеСНО.Вставить(2,"УСН Доход");
    СоответствиеСНО.Вставить(4,"УСН Доход минус Расход");
    СоответствиеСНО.Вставить(16,"ЕСХН");
    СоответствиеСНО.Вставить(32,"Патент");
    
    Возврат СоответствиеСНО;
КонецФункции