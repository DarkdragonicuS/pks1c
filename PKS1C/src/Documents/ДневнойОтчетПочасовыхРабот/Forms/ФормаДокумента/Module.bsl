&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Исполнитель = ПолучитьИсполнителя();
	КонецЕсли;
	ОбновитьЧасыВСтроках();
	ОбновитьСтатусыСомнительности();
	ОбновитьНесоответствующиеСверхурочки();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриАктивизацииСтроки(Элемент)
	Если Элементы.Данные.ТекущиеДанные = Неопределено Тогда
		Заявка = Неопределено;
	Иначе
		Заявка = Элементы.Данные.ТекущиеДанные.Заявка;
	КонецЕсли;
	ТемаЗаявки = ТемаЗаявки(Заявка);
	ОписаниеЗаявки = ОписаниеЗаявки(Заявка);
	НомерЗаявки = НомерЗаявки(Заявка);
	КонтактноеЛицо = Контакт(Заявка);
	КонтактныйТелефон = КонтактныйТелефон(Заявка);
КонецПроцедуры

&НаКлиенте
Процедура НомерЗаявкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Заявка = Элементы.Данные.ТекущиеДанные.Заявка;
	Если ЗначениеЗаполнено(Заявка) Тогда
		ПараметрыФормы = Новый Структура("Ключ", Заявка);
		ОткрытьФорму("Документ.ЗаявкиКлиентов.Форма.ФормаЭлемента", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НенужнаяФункция(Клиент)
	Возврат НайтиКонтрагентаПоКлиенту(Клиент);
КонецФункции

&НаКлиенте
Процедура ДанныеКлиентПриИзменении(Элемент)
	Строка = Элементы.Данные.ТекущиеДанные;
	Строка.Организация = НенужнаяФункция(Строка.Клиент);
	
	Если ЗначениеЗаполнено(Строка.Клиент) Тогда		
		Если СтатусОбслуживания(Строка.Клиент) = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровОбслуживания.ЧерныйСписок") Тогда
			Предупреждение("Данный клиент находится в черном списке!",,"Сомнительный клиент");
		ИначеЕсли СтатусОбслуживания(Строка.Клиент) = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровОбслуживания.Недействующий") Тогда
			Предупреждение("У данного клиента отсутствует действующий договор обслуживания!",,"Сомнительный клиент");
		КонецЕсли;		
	КонецЕсли;
	Строка.СомнительныйКлиент = ПроверитьКлиентаНаСомнительность(Строка.Клиент);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаявкаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Стр = ЭтаФорма.Элементы.Данные.ТекущиеДанные;
	
	Форма = ПолучитьФорму("Документ.ЗаявкиКлиентов.ФормаОбъекта",, Стр);
	
	НовОбъект = Форма.Объект;	 
	НовОбъект.Клиент = Стр.Клиент;	
	НовОбъект.ОтветственноеЛицо = Объект.Исполнитель;
	
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаявкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Стр = ЭтаФорма.Элементы.Данные.ТекущиеДанные;                             
	Если Не ЗначениеЗаполнено(Стр.Клиент) Тогда
		Клинет = ДанныеЗаявкаОбработкаВыбораНаСервере(ВыбранноеЗначение);
		Стр.Клиент = Клинет;
		Стр.Организация = НенужнаяФункция(Клинет);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЗаявкаОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Возврат ВыбранноеЗначение.Клиент;
КонецФункции

&НаКлиенте
Процедура ДанныеЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Стр = ЭтаФорма.Элементы.Данные.ТекущиеДанные;  
	Парам = Новый Структура;
	
	Если ЗначениеЗаполнено(Стр.Клиент) Тогда 
		Парам.Вставить("КлиентОтбор", Стр.Клиент);
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.ЗаявкиКлиентов.Форма.ФормаВыбора", Парам, Элемент);
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриИзменении(Элемент)
	ОбновитьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоги()
	ИтогЧасов = 0;
	Для Каждого СтрокаТЧ Из Объект.Данные Цикл
		ИтогЧасов = ИтогЧасов + ПолучитьОбъемРаботы(СтрокаТЧ.ВремяПрибытия,СтрокаТЧ.ВремяЗавершения,СтрокаТЧ.Удаленка);
	КонецЦикла;
	Объект.ОбъемРабот = ИтогЧасов;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВремяПрибытияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	ТекущиеДанные.ОбъемРабот = Строка(ПолучитьОбъемРаботы(ЭтаФорма.Элементы.Данные.ТекущиеДанные.ВремяПрибытия,ЭтаФорма.Элементы.Данные.ТекущиеДанные.ВремяЗавершения,ЭтаФорма.Элементы.Данные.ТекущиеДанные.Удаленка));
	//Если ТекущиеДанные.ВремяПрибытия - НачалоСверхурочки() > 0 ИЛИ ТекущиеДанные.ВремяПрибытия - КонецСверхурочки() < 0 Тогда
	//	ТекущиеДанные.Сверхурочка = Истина;
	//КонецЕсли;
	
	ПараметрыПроверки = Новый Структура("ВремяЗавершения,ВремяПрибытия,Сверхурочка,Период,Исполнитель");
	ЗаполнитьЗначенияСвойств(ПараметрыПроверки,ТекущиеДанные);
	ПараметрыПроверки.Период = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата());
	ПараметрыПроверки.Исполнитель = Объект.Исполнитель;
	ТекущиеДанные.НесоответствующаяСверхурочка = НесоответствующаяСверхурочка(ПараметрыПроверки);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВремяЗавершенияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	ТекущиеДанные.ОбъемРабот = Строка(ПолучитьОбъемРаботы(ЭтаФорма.Элементы.Данные.ТекущиеДанные.ВремяПрибытия,ЭтаФорма.Элементы.Данные.ТекущиеДанные.ВремяЗавершения,ЭтаФорма.Элементы.Данные.ТекущиеДанные.Удаленка));
	//Если ТекущиеДанные.ВремяЗавершения - НачалоСверхурочки() > 0 ИЛИ ТекущиеДанные.ВремяЗавершения - КонецСверхурочки() < 0 Тогда
	//	ТекущиеДанные.Сверхурочка = Истина;
	//КонецЕсли;
	ПараметрыПроверки = Новый Структура("ВремяЗавершения,ВремяПрибытия,Сверхурочка,Период");
	ЗаполнитьЗначенияСвойств(ПараметрыПроверки,ТекущиеДанные);
	ПараметрыПроверки.Период = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата());
	ТекущиеДанные.НесоответствующаяСверхурочка = НесоответствующаяСверхурочка(ПараметрыПроверки);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧасыВСтроках()                      
	Для Каждого Строка Из Объект.Данные Цикл
		Строка.ОбъемРабот = Строка(ПолучитьОбъемРаботы(Строка.ВремяПрибытия,Строка.ВремяЗавершения,Строка.Удаленка));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОбъемРаботПриИзменении(Элемент)
		Сообщить("");
КонецПроцедуры

&НаКлиенте
Процедура ДанныеУдаленкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	ТекущиеДанные.ОбъемРабот = Строка(ПолучитьОбъемРаботы(ЭтаФорма.Элементы.Данные.ТекущиеДанные.ВремяПрибытия,ЭтаФорма.Элементы.Данные.ТекущиеДанные.ВремяЗавершения,ЭтаФорма.Элементы.Данные.ТекущиеДанные.Удаленка));
КонецПроцедуры


&НаСервере
Процедура ОбновитьИтогиНаСервере()
	ДокОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ДневнойОтчетПочасовыхРабот"));
	ДокОбъект.ПолучитьОбъемРаботЗаДень();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьЧасыВСтроках();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущаяДата = ТекущаяДата();
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Параметры.Ключ.Пустая() ИЛИ НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата) Тогда
			ТекущиеДанные.ВремяПрибытия = Дата('00010101') + Час(ТекущаяДата) * 3600 + Минута(ТекущаяДата) * 60;
		КонецЕсли;
		ТекущиеДанные.ВремяЗавершения = Дата('00010101');
		Если Не Копирование Тогда
			ТекущиеДанные.Удаленка = Истина;
		КонецЕсли;
		ТекущиеДанные.ОбъемРабот = ПолучитьОбъемРаботы(ТекущиеДанные.ВремяПрибытия, ТекущиеДанные.ВремяЗавершения,ТекущиеДанные.Удаленка);
	КонецЕсли;
	ОбновитьИтоги();
КонецПроцедуры

&НаСервере
Функция НачалоСверхурочки()
	Возврат Константы.СверхурочкаНачало.Получить();
КонецФункции

&НаСервере
Функция КонецСверхурочки()
	Возврат Константы.СверхурочкаКонец.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИсполнителя(Пользователь=Неопределено)
	Если Пользователь = Неопределено Тогда
		Возврат ПользователиКлиентСервер.ТекущийПользователь().ФизическоеЛицо;
	Иначе
		Возврат ПользователиКлиентСервер.Пользователь.ФизическоеЛицо;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьКлиентаНаСомнительность(Клиент)
	СомнительныйКлиент = Ложь;
	Если ЗначениеЗаполнено(Клиент) И СтатусОбслуживания(Клиент) = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровОбслуживания.ЧерныйСписок") Тогда
		СомнительныйКлиент = Истина;
	ИначеЕсли ЗначениеЗаполнено(Клиент) И СтатусОбслуживания(Клиент) = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровОбслуживания.Недействующий") Тогда
		СомнительныйКлиент = Истина;
	КонецЕсли;
	Возврат СомнительныйКлиент;
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыСомнительности()
	Для Каждого Строка Из Объект.Данные Цикл
		Если ПроверитьКлиентаНаСомнительность(Строка.Клиент) Тогда
			Строка.СомнительныйКлиент = Истина;
		Иначе
			Строка.СомнительныйКлиент = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СтатусОбслуживания(Клиент)
	Возврат АутсорсРаботы.СтатусОбслуживания(Клиент,?(Параметры.Ключ.Пустая(),Неопределено,Объект.Дата));
КонецФункции

&НаСервере
Функция НесоответствующаяСверхурочка(ДанныеСтроки)
	НесоответствующаяСверхурочка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ВремяПрибытия КАК ВремяПрибытия,
		|	&ВремяЗавершения КАК ВремяЗавершения,
		|	&Сверхурочка КАК Сверхурочка,
		|	&Период КАК Дата
		|ГДЕ
		|	(НЕ &Сверхурочка
		|				И (&ВремяПрибытия < &СверхурочкаКонец
		|					ИЛИ &ВремяЗавершения > &СверхурочкаНачало
		|					ИЛИ ВЫБОР
		|						КОГДА &ВидДня = &ПредпраздничныйДень
		|							ТОГДА &ВремяЗавершения > ДОБАВИТЬКДАТЕ(&СверхурочкаНачало, ЧАС, -1)
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|					ИЛИ &ВидДня В (&НерабочиеДни)
		|						И ВЫБОР
		|							КОГДА &Дежурный
		|								ТОГДА &СверхурочноеДежурство
		|							ИНАЧЕ ИСТИНА
		|						КОНЕЦ)
		|			ИЛИ &Сверхурочка
		|				И НЕ(&ВремяПрибытия < &СверхурочкаКонец
		|						ИЛИ ВЫБОР
		|							КОГДА &ВидДня = &ПредпраздничныйДень
		|								ТОГДА &ВремяЗавершения > ДОБАВИТЬКДАТЕ(&СверхурочкаНачало, ЧАС, -1)
		|							ИНАЧЕ &ВремяЗавершения > &СверхурочкаНачало
		|						КОНЕЦ
		|						ИЛИ &ВидДня В (&НерабочиеДни)
		|							И ВЫБОР
		|								КОГДА &Дежурный
		|									ТОГДА &СверхурочноеДежурство
		|								ИНАЧЕ ИСТИНА
		|							КОНЕЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сверхурочка,
		|	Дата,
		|	ВремяПрибытия,
		|	ВремяЗавершения";
	
	
	ВидДняЗапись = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьМенеджерЗаписи();
	ВидДняЗапись.Дата = ДанныеСтроки.Период;
	ВидДняЗапись.ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
    ВидДняЗапись.Год = Год(ДанныеСтроки.Период);
	ВидДняЗапись.Прочитать();
	ВидДня = ВидДняЗапись.ВидДня;
	НерабочиеДни = Новый Массив;
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	Дежурный = АутсорсРаботы.ПолучитьДежурного(ДанныеСтроки.Период) = Объект.Исполнитель;
	СверхурочкаДежурства = АутсорсРаботы.СверхурочноеДежурство(ДанныеСтроки.Период) = Объект.Исполнитель;
	//Запрос.Параметры = ДанныеСтроки;
	Для каждого КлючЗначение из ДанныеСтроки Цикл
   		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидДня", ВидДня);
	//Запрос.УстановитьПараметр("ВремяЗавершения", ВремяЗавершения);
	//Запрос.УстановитьПараметр("ВремяПрибытия", ВремяПрибытия);
	Запрос.УстановитьПараметр("НерабочиеДни", НерабочиеДни);
	Запрос.УстановитьПараметр("ПредпраздничныйДень", Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	//Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	//Запрос.УстановитьПараметр("Сверхурочка", Сверхурочка);
	Запрос.УстановитьПараметр("СверхурочкаКонец", Константы.СверхурочкаКонец.Получить());
	Запрос.УстановитьПараметр("СверхурочкаНачало", Константы.СверхурочкаНачало.Получить());
	Запрос.УстановитьПараметр("Дежурный",Дежурный);
	Запрос.УстановитьПараметр("СверхурочноеДежурство",СверхурочкаДежурства);
	
		РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НесоответствующаяСверхурочка = Истина;
	КонецЕсли;
	
	Возврат НесоответствующаяСверхурочка;

КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьНесоответствующиеСверхурочки();
КонецПроцедуры

&НаКлиенте
Функция ОбновитьНесоответствующиеСверхурочки()
	Для Каждого СтрокаПочасовки Из Объект.Данные Цикл
		ПараметрыПроверки = Новый Структура("ВремяЗавершения,ВремяПрибытия,Сверхурочка,Период,Исполнитель");
		ЗаполнитьЗначенияСвойств(ПараметрыПроверки,СтрокаПочасовки);
		ПараметрыПроверки.Период = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата());
		ПараметрыПроверки.Исполнитель = Объект.Исполнитель;
		СтрокаПочасовки.НесоответствующаяСверхурочка = НесоответствующаяСверхурочка(ПараметрыПроверки);
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ДанныеСверхурочкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	ПараметрыПроверки = Новый Структура("ВремяЗавершения,ВремяПрибытия,Сверхурочка,Период");
	ЗаполнитьЗначенияСвойств(ПараметрыПроверки,ТекущиеДанные);
	ПараметрыПроверки.Период = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата());
	ТекущиеДанные.НесоответствующаяСверхурочка = НесоответствующаяСверхурочка(ПараметрыПроверки);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеСоставРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("СоставРаботЗавершениеВвода", ЭтотОбъект);
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования, НСтр("ru = 'Состав работ'"));
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("КомментарийРаботЗавершениеВвода", ЭтотОбъект);
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования, НСтр("ru = 'Комментарий'"));
КонецПроцедуры


&НаКлиенте
Процедура СоставРаботЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Данные.ТекущиеДанные.СоставРабот <> ВведенныйТекст Тогда
		
		Элементы.Данные.ТекущиеДанные.СоставРабот = ВведенныйТекст;
		Модифицированность = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийРаботЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Данные.ТекущиеДанные.Комментарий <> ВведенныйТекст Тогда
		
		Элементы.Данные.ТекущиеДанные.Комментарий = ВведенныйТекст;
		Модифицированность = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТемаЗаявки(Заявка)
	Если ЗначениеЗаполнено(Заявка) Тогда
		Тема = Заявка.ТемаЗаявки;
	Иначе
		Тема = "";
	КонецЕсли;
	Возврат Тема;
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЗаявки(Заявка)
	Если ЗначениеЗаполнено(Заявка) Тогда
		Описание = Заявка.ТекстЗаявки.Получить().ПолучитьТекст();
	Иначе
		Описание = "";
	КонецЕсли;
	Возврат Описание;
КонецФункции

&НаСервереБезКонтекста
Функция НомерЗаявки(Заявка)
	Если ЗначениеЗаполнено(Заявка) Тогда
		Номер = Заявка.Номер;
		Номер = "№" + Формат(Число(Номер),"ЧГ=")
	Иначе
		Номер = "-";
	КонецЕсли;
	Возврат Номер;
КонецФункции


// Возвращает контактное лицо заявки клиента
// 
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкиКлиентов - Заявка клиента
// 
// Возвращаемое значение:
//  СправочникСсылка.КонтактныеЛицаПартнеров - Контактное лицо
&НаСервереБезКонтекста
Функция Контакт(Заявка)
	Если ЗначениеЗаполнено(Заявка) Тогда
		Контакт = Заявка.КонтактноеЛицо;
	Иначе
		Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	Возврат Контакт;
КонецФункции

// Возвращает контактный телефон заявки клиента
// 
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкиКлиентов - Заявка клиента
// 
// Возвращаемое значение:
//  Строка - Контактный телефон
&НаСервереБезКонтекста
Функция КонтактныйТелефон(Заявка)
	Если ЗначениеЗаполнено(Заявка) Тогда
		Телефон = Заявка.КонтактныйТелефон;
	Иначе
		Телефон = "";
	КонецЕсли;
	
	Возврат Телефон;
КонецФункции