
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Автор = Пользователи.АвторизованныйПользователь();
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// регистр ПочасовыеРаботы
	Движения.ПочасовыеРаботы.Записывать = Истина;
	Для Каждого ТекСтрокаДанные Из Данные Цикл
		Движение = Движения.ПочасовыеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.ВремяПрибытия = ТекСтрокаДанные.ВремяПрибытия;
		Движение.ВремяЗавершения = ТекСтрокаДанные.ВремяЗавершения;
		Движение.Исполнитель = Исполнитель;
		Движение.Организация = ТекСтрокаДанные.Организация;
		Движение.Клиент = ТекСтрокаДанные.Клиент;
		Движение.Удаленка = ТекСтрокаДанные.Удаленка;
		Движение.Сверхурочка = ТекСтрокаДанные.Сверхурочка;
		Движение.СоставРабот = ТекСтрокаДанные.СоставРабот;
		Движение.Заявка = ТекСтрокаДанные.Заявка;
		Часы = (ТекСтрокаДанные.ВремяЗавершения - ТекСтрокаДанные.ВремяПрибытия)/60;
		Если ТекСтрокаДанные.Удаленка Тогда
			Движение.ВремяЗатраты = ПочасовкаУдаленка(Часы);
		Иначе
			Движение.ВремяЗатраты = ПочасовкаВыездная(Часы);
		КонецЕсли;
	КонецЦикла;


	// регистр РаботыПоЗаявкам
	Движения.РаботыПоЗаявкам.Записывать = Истина;
	Для Каждого ТекСтрокаДанные Из Данные Цикл
		Движение = Движения.РаботыПоЗаявкам.Добавить();
		Движение.Заявка = ТекСтрокаДанные.Заявка;
		Движение.ДатаИзменения = Дата;
		Движение.ВремяПрибытия = ТекСтрокаДанные.ВремяПрибытия;
		Движение.ВремяЗавершения = ТекСтрокаДанные.ВремяЗавершения;
		Движение.СоставРабот = ТекСтрокаДанные.СоставРабот;
		Движение.Исполнитель = Исполнитель;
		Движение.Клиент = ТекСтрокаДанные.Клиент;
		Движение.ОбъемРабот = ПолучитьОбъемРаботы(ТекСтрокаДанные.ВремяПрибытия,ТекСтрокаДанные.ВремяЗавершения,ТекСтрокаДанные.Удаленка);
	КонецЦикла;
КонецПроцедуры

Функция ПочасовкаВыездная(ОбъемРабот)
	
	//Если специалист был на выезде меньше часавсеравно
	//время работы оценивается в 1 час
	Если ОбъемРабот <= 60 Тогда
		ЧасыРабот = 1;
		Возврат ЧасыРабот;
	Иначе
		//Разделяем целую и дробную часть времени работы
		Хвостик = ОбъемРабот/60 - Цел(ОбъемРабот/60);
		//После одного часа работы тарификация считается по 
		//пол часа
		Если Хвостик = 0  Тогда
			ЧасыРабот = Цел(ОбъемРабот/60);
			Возврат ЧасыРабот;
		ИначеЕсли Хвостик <= 0.5  Тогда
			ЧасыРабот = Цел(ОбъемРабот/60) + 0.5;
			Возврат ЧасыРабот;
		Иначе
			ЧасыРабот = Цел(ОбъемРабот/60) + 1;
			Возврат ЧасыРабот;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

Функция ПочасовкаУдаленка(ОбъемРабот)
	
	Если ОбъемРабот <= 30 Тогда
		ЧасыРабот = 0.5;
		Возврат ЧасыРабот;
	ИначеЕсли ОбъемРабот > 30 И ОбъемРабот <= 60 Тогда		
		ЧасыРабот = 1;
		Возврат ЧасыРабот;
	Иначе
		Хвостик = ОбъемРабот/60 - Цел(ОбъемРабот/60);
		Если Хвостик = 0 Тогда
			ЧасыРабот = Цел(ОбъемРабот/60);
			Возврат ЧасыРабот;
		ИначеЕсли Хвостик > 0 И Хвостик <= 0.5 Тогда
			ЧасыРабот = Цел(ОбъемРабот/60) + 0.5;
			Возврат ЧасыРабот;
		Иначе
			ЧасыРабот = Цел(ОбъемРабот/60) + 1;
			Возврат ЧасыРабот;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ЗапросОтчета = Новый Запрос;
	ЗапросОтчета.Текст = 
		"ВЫБРАТЬ
		|	ДневнойОтчетПочасовыхРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДневнойОтчетПочасовыхРабот КАК ДневнойОтчетПочасовыхРабот
		|ГДЕ
		|	ДневнойОтчетПочасовыхРабот.Дата МЕЖДУ &От И &До
		|	И ДневнойОтчетПочасовыхРабот.Исполнитель = &Исполнитель";
	
	ЗапросОтчета.УстановитьПараметр("До", КонецДня(Дата));
	ЗапросОтчета.УстановитьПараметр("От", НачалоДня(Дата));
	ЗапросОтчета.УстановитьПараметр("Исполнитель", Исполнитель);
	
	РезультатЗапросаОтчета = ЗапросОтчета.Выполнить();
	
	ВыборкаОтчета = РезультатЗапросаОтчета.Выбрать();
	
	Если ВыборкаОтчета.Следующий() И Не ВыборкаОтчета.Ссылка = Ссылка Тогда
		Сообщить("ОШИБКА! На сегодня уже есть отчет почасовых работ.");
		Отказ = Истина;
	КонецЕсли;
	ОбъемРабот = ПолучитьОбъемРаботЗаДень();
КонецПроцедуры

Функция ПолучитьОбъемРаботЗаДень() Экспорт
	ИтогЧасов = 0;
	Для Каждого СтрокаТЧ Из Данные Цикл
		ИтогЧасов = ИтогЧасов + ПолучитьОбъемРаботы(СтрокаТЧ.ВремяПрибытия,СтрокаТЧ.ВремяЗавершения,СтрокаТЧ.Удаленка);
	КонецЦикла;
	Возврат ИтогЧасов;
КонецФункции


Процедура ПриЗаписи(Отказ)
	//Фиксация в истории изменений
	АутсорсФункцииДокументовСервер.УстановитьИзменениеДокумента(ЭтотОбъект.Ссылка);
КонецПроцедуры
