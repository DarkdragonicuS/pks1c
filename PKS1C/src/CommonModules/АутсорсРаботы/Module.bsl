//Возвращает список клиентов (контрагентов), с которыми велись работы
Функция ОбслуживащиесяКонтрагентыЗаПериод(ДатаНачала,ДатаОкончания) Экспорт
	СписокКонтрагентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПочасовыеРаботы.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ПочасовыеРаботы КАК ПочасовыеРаботы
		|ГДЕ
		|	ПочасовыеРаботы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокКонтрагентов.Добавить(ВыборкаДетальныеЗаписи.Организация);
	КонецЦикла;
	
	Возврат СписокКонтрагентов;
КонецФункции

//ИСТИНА, если после указанной даты для контрагента существует новый договор
Функция ЕстьНовыйДоговор(Контрагент,Дата) Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Запись
		|ИЗ
		|	РегистрСведений.ДоговораОбслуживания.СрезПоследних(
		|			,
		|			Контрагент = &Контрагент
		|				И Период > &Период) КАК ДоговораОбслуживанияСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

//Получить статус договора
Функция СтатусДоговора(ДокументДоговора) Экспорт
	Если ДокументДоговора.ЧерныйСписок Тогда
		Статус = Перечисления.СтатусыДоговоровОбслуживания.ЧерныйСписок;
	ИначеЕсли Не ЕстьНовыйДоговор(ДокументДоговора.Контрагент,ДокументДоговора.Дата) И (ДокументДоговора.СрокДействия > НачалоДня(ТекущаяДата()) Или Не ЗначениеЗаполнено(ДокументДоговора.СрокДействия)) Тогда
		Статус = Перечисления.СтатусыДоговоровОбслуживания.Действующий;
	Иначе
		Статус = Перечисления.СтатусыДоговоровОбслуживания.Недействующий;
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

//Получить статус обслуживани клиента
Функция СтатусОбслуживания(Знач Контрагент,Дата=Неопределено) Экспорт
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Клиенты") Тогда 
		Контрагент = Контрагент.Контрагент;
	КонецЕсли;
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговораОбслуживанияСрезПоследних.СрокДействия
		|ИЗ
		|	РегистрСведений.ДоговораОбслуживания.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК
		|		ДоговораОбслуживанияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		//Статус = СтатусДоговора(ВыборкаДетальныеЗаписи.Регистратор);
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СрокДействия) И ВыборкаДетальныеЗаписи.СрокДействия < Дата Тогда
			Статус = Перечисления.СтатусыДоговоровОбслуживания.Недействующий;
		Иначе
			Статус = Перечисления.СтатусыДоговоровОбслуживания.Действующий;
		КонецЕсли; 
	Иначе
		Статус = Перечисления.СтатусыДоговоровОбслуживания.Недействующий;
	КонецЕсли;

	Возврат Статус;
КонецФункции

//Получить дежурного на выбранную дату
Функция ПолучитьДежурного(Дата) Экспорт
	ГрафикДежурствМенеджер = РегистрыСведений.ГрафикДежурств.СоздатьМенеджерЗаписи();
	ГрафикДежурствМенеджер.Дата = Дата;
	ГрафикДежурствМенеджер.Прочитать();
	Возврат ГрафикДежурствМенеджер.Сотрудник;
КонецФункции

//Проверка на то, что дежурство сверхурочное
//Возвращает сотрудника, если дежурство сверхурочное
Функция СверхурочноеДежурство(Дата) Экспорт
	ГрафикДежурствМенеджер = РегистрыСведений.ГрафикДежурств.СоздатьМенеджерЗаписи();
	ГрафикДежурствМенеджер.Дата = Дата;
	ГрафикДежурствМенеджер.Прочитать();
	Если ГрафикДежурствМенеджер.Выбран() Тогда
		Возврат ?(ГрафикДежурствМенеджер.Сверхурочка,ГрафикДежурствМенеджер.Сотрудник,Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//Определяет конечную дату и время реагирования на заявку
Функция СрокРеагирования(ДатаПриемаЗаявки=Неопределено,СрокРеагированияПоДоговору=0) Экспорт
 	Если ДатаПриемаЗаявки = Неопределено Тогда
 		НачалоОтсчетаСрока = НачалоЧаса(ТекущаяДата() + 3600);
 	Иначе
 		НачалоОтсчетаСрока = НачалоЧаса(ДатаПриемаЗаявки + 3600);
 	КонецЕсли;
 	СрокРеагирования = НачалоОтсчетаСрока;
 	
 	Если СрокРеагированияПоДоговору = 0 Тогда
 		СрокРеагированияПоДоговору = Константы.СтандартныйСрокРеагирования.Получить();
 	КонецЕсли;
 	
 	Если Не ПроверитьНаНаличиеНерабочегоВремени(НачалоОтсчетаСрока, НачалоОтсчетаСрока + 3600 * СрокРеагированияПоДоговору) Тогда
 		//Срок реагирования укладывает в непрерывное рабочее время 
 		СрокРеагирования = НачалоОтсчетаСрока + 3600 * СрокРеагированияПоДоговору;  
 	Иначе
 		РабочийПериодДатыПриема = РабочееВремя(НачалоОтсчетаСрока);
 		ПериодОжиданияРеагирования = НачалоОтсчетаСрока;
 		Если РабочийПериодДатыПриема <> Неопределено Тогда
 			ОставшеесяВремяРеагирования = СрокРеагированияПоДоговору;  //часы на реагирование
 			
 			Пока ОставшеесяВремяРеагирования <> 0 Цикл
 				РабочийПериодДня = РабочееВремя(ПериодОжиданияРеагирования);
 				Если РабочийПериодДня.ПериодНачало <= ПериодОжиданияРеагирования И ПериодОжиданияРеагирования <= РабочийПериодДня.ПериодКонец Тогда
 					ОстатокРабочегоВремени = (РабочийПериодДня.ПериодКонец - ПериодОжиданияРеагирования)/3600;
 					Если ОстатокРабочегоВремени >= ОставшеесяВремяРеагирования Тогда
	 					//реагирование в течение текущего рабочего дня
 						СрокРеагирования = ПериодОжиданияРеагирования + ОставшеесяВремяРеагирования * 3600;
 						ОставшеесяВремяРеагирования = 0;				
 					Иначе
 						//реагирование в последующие рабочие дни
 						ОставшеесяВремяРеагирования = ОставшеесяВремяРеагирования - (РабочийПериодДня.ПериодКонец - ПериодОжиданияРеагирования)/3600;
 						ПериодОжиданияРеагирования = РабочееВремя(БлижайшийСледующийРабочийДень(РабочийПериодДня.ПериодКонец)).ПериодНачало;
 					КонецЕсли;
 				Иначе
 					//реагирование в последующие рабочие дни
 					ПериодОжиданияРеагирования = РабочееВремя(БлижайшийСледующийРабочийДень(РабочийПериодДня.ПериодКонец)).ПериодНачало;
 				КонецЕсли;
 			КонецЦикла;
 			
 		Иначе
 			СрокРеагирования = НачалоОтсчетаСрока + 3600 * СрокРеагированияПоДоговору;
 			//TODO:
 			//Сообщить о незаполненном производственном календаре
 		КонецЕсли;
 		
 		
 		//СледующийРабочийДень = БлижайшийСледующийРабочийДень(НачалоОтсчетаСрока + 3600 * СрокРеагированияПоДоговору);
 	КонецЕсли;
 	
	Возврат СрокРеагирования;
КонецФункции
 
 //Проверяет, есть ли в указанном промежутке нерабочее время
Функция ПроверитьНаНаличиеНерабочегоВремени(ПериодНачало,ПериодОкончание,ШагВЧасах=1) Экспорт
	ЕстьНерабочееВремя = Ложь;
	
	ДеньНачало = НачалоДня(ПериодНачало);
	ДеньОкончание = КонецДня(ПериодОкончание);
	
	День = ДеньНачало;
	
	//Проверка на наличие нерабочих дней
	Пока День < ДеньОкончание Цикл
		Если ПроверитьНаНерабочийДень(День) Тогда
			ЕстьНерабочееВремя = Истина;
			Прервать;
		КонецЕсли;
		День = День + 3600 * 24;
	КонецЦикла;
	
	Если Не ЕстьНерабочееВремя Тогда
		Время = ПериодНачало; 
		СверхурочкаНачало = Константы.СверхурочкаНачало.Получить();
		СверхурочкаКонец = Константы.СверхурочкаКонец.Получить();
		Пока Время <= ПериодОкончание Цикл
			Если ВидДня(Время) = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				СокращениеВремени = 3600;
			Иначе
				СокращениеВремени = 0;
			КонецЕсли;
			
			Если Время - НачалоДня(Время) >= СверхурочкаНачало - Дата(1,1,1,0,0,0) - СокращениеВремени ИЛИ Время - НачалоДня(Время) < СверхурочкаКонец - Дата(1,1,1,0,0,0) Тогда
				ЕстьНерабочееВремя = Истина;
				Прервать;
			КонецЕсли;
			
			Время = Время + 3600 * ШагВЧасах;
		КонецЦикла;
	КонецЕсли;
		
	Возврат ЕстьНерабочееВремя;
КонецФункции

//Формирует массив видов дней, относящихся к нерабочим
Функция НерабочиеДни()
	НерабочиеДни = Новый Массив;
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	
	Возврат НерабочиеДни;
КонецФункции

//Истина, если день нерабочий
//Если в этот день есть дежурных без сверхурочки, тогда данный день является рабочим
//Если указан сотрудник, не являющимся дежурным, то в дежурный день возвращается нерабочий день
Функция ПроверитьНаНерабочийДень(Период,Сотрудник=Неопределено) Экспорт
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Дежурный = АутсорсРаботы.ПолучитьДежурного(Период) = Сотрудник;
	СверхурочкаДежурства = АутсорсРаботы.СверхурочноеДежурство(Период) = Сотрудник;
		
	ВидДня = ВидДня(Период);
	Если НерабочиеДни().Найти(ВидДня) <> Неопределено Тогда
		Если Дежурный И ЗначениеЗаполнено(Сотрудник) И Не СверхурочкаДежурства Тогда
			НерабочийДень = Истина;
		Иначе
			НерабочийДень = Ложь;
		КонецЕсли;
	Иначе
		НерабочийДень = Ложь;
	КонецЕсли;
	
	Возврат НерабочийДень;
КонецФункции 

//Возвращает вид дня для указанной даты
Функция ВидДня(Дата) Экспорт
	ВидДняЗапись = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьМенеджерЗаписи();
	ВидДняЗапись.Дата = Дата;
	ВидДняЗапись.ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
    ВидДняЗапись.Год = Год(Дата);
	ВидДняЗапись.Прочитать();
	ВидДня = ВидДняЗапись.ВидДня;
	
	Возврат ВидДня;
КонецФункции 

//Возвращает ближайший следующий рабочий день
Функция БлижайшийСледующийРабочийДень(Период) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(ДанныеПроизводственногоКалендаря.Дата) КАК БлижайшийСледующийРабочийДень
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = ОсновнойКалендарьПредприятия.Значение.ПроизводственныйКалендарь
		|ГДЕ
		|	(ДанныеПроизводственногоКалендаря.ВидДня НЕ В(&НерабочиеДни)
		|	И ДанныеПроизводственногоКалендаря.Дата >= &Дата) 
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(ДанныеПроизводственногоКалендаря.Дата) ЕСТЬ NULL
		|";
	Запрос.УстановитьПараметр("Дата",Период);
	Запрос.УстановитьПараметр("НерабочиеДни",НерабочиеДни());
	
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Если Выборка.Следующий() Тогда
    	СледующийРабочийДень = Выборка.БлижайшийСледующийРабочийДень;
    Иначе
    	СледующийРабочийДень = Неопределено;
    КонецЕсли;
    
    Возврат СледующийРабочийДень;
КонецФункции

// Возвращает рабочий период дня для указанного сотрудника
// Если сотрудник не указан, то несверхурочное дежурство является рабочим периодом
// 
// Параметры:
//  Дата Дата
//  Сотрудник - Неопределено - Сотрудник
// 
// Возвращаемое значение:
//  Структура, Неопределено - Рабочее время:
// * ПериодНачало - Дата -
// * ПериодКонец - Дата -
Функция РабочееВремя(Дата,Сотрудник=Неопределено) Экспорт
	РабочееВремя = Неопределено;
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Дежурный = АутсорсРаботы.ПолучитьДежурного(Дата) = Сотрудник;
	СверхурочкаДежурства = АутсорсРаботы.СверхурочноеДежурство(Дата) = Сотрудник;
		
	ВидДня = ВидДня(Дата);
	Если НерабочиеДни().Найти(ВидДня) <> Неопределено Тогда
		Если Дежурный И ЗначениеЗаполнено(Сотрудник) И Не СверхурочкаДежурства Тогда
			НерабочийДень = Истина;
		Иначе
			НерабочийДень = Ложь;
		КонецЕсли;
	Иначе
		НерабочийДень = Ложь;
	КонецЕсли;
	
	Если Не НерабочийДень Тогда
		Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
			СокращениеВремени = 3600;
		Иначе
			СокращениеВремени = 0;
		КонецЕсли; 
		
		РабочееВремяНачало = НачалоДня(Дата) + (Константы.СверхурочкаКонец.Получить() - Дата(1,1,1,0,0,0));
		РабочееВремяКонец = НачалоДня(Дата) + (Константы.СверхурочкаНачало.Получить() - Дата(1,1,1,0,0,0)) - СокращениеВремени;
		РабочееВремя = Новый Структура("ПериодНачало,ПериодКонец",РабочееВремяНачало,РабочееВремяКонец);
	КонецЕсли;
	
	Возврат РабочееВремя;
КонецФункции


// Добавление контактного лица клиенту
// 
// Параметры:
//  Клиент - СправочникСсылка.Клиенты - Клиент
//  КонтактноеЛицо - СправочникСсылка.КонтактныеЛицаПартнеров - Контактное лицо клиента
Процедура ДобавлениеКонтактногоЛицаКлиента(Клиент,КонтактноеЛицо) Экспорт
	КлиентОбъект = Клиент.ПолучитьОбъект();
	СтрокаКонтактныеЛица = КлиентОбъект.КонтактныеЛица.Добавить();
	СтрокаКонтактныеЛица.КонтактноеЛицо = КонтактноеЛицо;
	КлиентОбъект.Записать();
КонецПроцедуры


// Очередь заявок.
// 
// Параметры:
//  Исполнитель - СправочникСсылка.ФизическиеЛица - Исполнитель заявки
//  Заявка - ДокументСсылка.ЗаявкиКлиентов - Заявка, до которой проверяется очередь невзятых в работу заявок
// 
// Возвращаемое значение:
//  Массив - Очередь заявок
//  
Функция ОчередьЗаявок(Исполнитель,Заявка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтатусыЗаявок.Регистратор КАК Заявка
		|ИЗ
		|	РегистрСведений.СтатусыЗаявок КАК СтатусыЗаявок
		|ГДЕ
		|	СтатусыЗаявок.Регистратор.ДатаОткрытия < &ДатаОткрытия
		|	И СтатусыЗаявок.Регистратор.ОтветственноеЛицо = &ОтветственноеЛицо
		|	И СтатусыЗаявок.Регистратор.Статус В (&СтатусыВРаботе)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыЗаявок.Регистратор.ДатаОткрытия";
	
	СтатусыВРаботе = Новый Массив;
	СтатусыВРаботе.Добавить(Перечисления.СтатусыЗаявок.Открыта);
	СтатусыВРаботе.Добавить(Перечисления.СтатусыЗаявок.ВРаботе);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатусыВРаботе", СтатусыВРаботе);
	Запрос.УстановитьПараметр("ДатаОткрытия", Заявка.ДатаОткрытия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаявкиВОчереди = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Заявка");
	
	Возврат ЗаявкиВОчереди;
КонецФункции


// Сохранить причину заявки, взятой вне очереди, со списком предшедствующих её необработанных заявок.
// 
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкиКлиентов - Заявка, которая взята вне очереди
//  Исполнитель - СправочникСсылка.ФизическиеЛица - Исполнитель, взявший заявку вне очереди 
//  ЗаявкиВОчереди - Массив - Список очереди заявок, невзятых в работу
//  ПричинаЗаявкиВнеОчереди - Строка - Причина взятия заявки вне очереди
//  Дата - Дата - Дата приема заявки вне очереди
Процедура СохранитьПричинуЗаявкиВнеОчереди(Заявка,Исполнитель,ЗаявкиВОчереди,ПричинаЗаявкиВнеОчереди,Дата) Экспорт
	МЗ = РегистрыСведений.ЗаявкиВнеОчереди.СоздатьМенеджерЗаписи();
	МЗ.Период = Дата;
	МЗ.Заявка = Заявка;
	МЗ.Исполнитель = Исполнитель;
	МЗ.Прочитать();
	
	МЗ.Период = Дата;
	МЗ.Заявка = Заявка;
	МЗ.Исполнитель = Исполнитель;
	МЗ.Причина = ПричинаЗаявкиВнеОчереди;
	МЗ.ИдентификаторСписка = СоздатьСписокЗаявокВОчереди(ЗаявкиВОчереди,МЗ.ИдентификаторСписка);
	
	МЗ.Записать();
КонецПроцедуры

// Создает список заявок в очереди для СохранитьПричинуЗаявкиВнеОчереди()
// 
// Параметры: 
//  ЗаявкиВОчереди - Массив - Список очереди заявок, невзятых в работу
//  ИдентификаторСписка - Строка - Уникальный идентификатор для связи с регистром ЗаявкиВнеОчереди
// Возвращаемое значение:
//  Строка - Идентификатор для связи с регистром ЗаявкиВнеОчереди
//  
Функция СоздатьСписокЗаявокВОчереди(ЗаявкиВОчереди,ИдентификаторСписка="")
	НЗ = РегистрыСведений.СписокЗаявокВОчереди.СоздатьНаборЗаписей();
	Если Не ЗначениеЗаполнено(ИдентификаторСписка) Тогда
		ИдентификаторСписка = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	НЗ.Отбор.ID.Установить(ИдентификаторСписка);
	НЗ.Очистить();
	
	Для Каждого ЗаявкаВОчереди Из ЗаявкиВОчереди Цикл
		Запись = НЗ.Добавить();
		Запись.ID = ИдентификаторСписка;
		Запись.Заявка = ЗаявкаВОчереди;
	КонецЦикла;
	 
	НЗ.Записать();
	
	Возврат ИдентификаторСписка;
КонецФункции