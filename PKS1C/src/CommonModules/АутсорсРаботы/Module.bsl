//Возвращает список клиентов (контрагентов), с которыми велись работы
Функция ОбслуживащиесяКонтрагентыЗаПериод(ДатаНачала,ДатаОкончания) Экспорт
	СписокКонтрагентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПочасовыеРаботы.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ПочасовыеРаботы КАК ПочасовыеРаботы
		|ГДЕ
		|	ПочасовыеРаботы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокКонтрагентов.Добавить(ВыборкаДетальныеЗаписи.Организация);
	КонецЦикла;
	
	Возврат СписокКонтрагентов;
КонецФункции

//ИСТИНА, если после указанной даты для контрагента существует новый договор
Функция ЕстьНовыйДоговор(Контрагент,Дата) Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Запись
		|ИЗ
		|	РегистрСведений.ДоговораОбслуживания.СрезПоследних(
		|			,
		|			Контрагент = &Контрагент
		|				И Период > &Период) КАК ДоговораОбслуживанияСрезПоследних";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Период", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

//Получить статус договора
Функция СтатусДоговора(ДокументДоговора) Экспорт
	Если ДокументДоговора.ЧерныйСписок Тогда
		Статус = Перечисления.СтатусыДоговоровОбслуживания.ЧерныйСписок;
	ИначеЕсли Не ЕстьНовыйДоговор(ДокументДоговора.Контрагент,ДокументДоговора.Дата) И (ДокументДоговора.СрокДействия > НачалоДня(ТекущаяДата()) Или Не ЗначениеЗаполнено(ДокументДоговора.СрокДействия)) Тогда
		Статус = Перечисления.СтатусыДоговоровОбслуживания.Действующий;
	Иначе
		Статус = Перечисления.СтатусыДоговоровОбслуживания.Недействующий;
	КонецЕсли;
	
	Возврат Статус;
КонецФункции

//Получить статус обслуживани клиента
Функция СтатусОбслуживания(Знач Контрагент,Дата=Неопределено) Экспорт
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Клиенты") Тогда 
		Контрагент = Контрагент.Контрагент;
	КонецЕсли;
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговораОбслуживанияСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ДоговораОбслуживания.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ДоговораОбслуживанияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Статус = СтатусДоговора(ВыборкаДетальныеЗаписи.Регистратор);
	Иначе
		Статус = Перечисления.СтатусыДоговоровОбслуживания.Недействующий;
	КонецЕсли;

	Возврат Статус;
КонецФункции

//Получить дежурного на выбранную дату
Функция ПолучитьДежурного(Дата) Экспорт
	ГрафикДежурствМенеджер = РегистрыСведений.ГрафикДежурств.СоздатьМенеджерЗаписи();
	ГрафикДежурствМенеджер.Дата = Дата;
	ГрафикДежурствМенеджер.Прочитать();
	Возврат ГрафикДежурствМенеджер.Сотрудник;
КонецФункции

//Проверка на то, что дежурство сверхурочное
//Возвращает сотрудника, если дежурство сверхурочное
Функция СверхурочноеДежурство(Дата) Экспорт
	ГрафикДежурствМенеджер = РегистрыСведений.ГрафикДежурств.СоздатьМенеджерЗаписи();
	ГрафикДежурствМенеджер.Дата = Дата;
	ГрафикДежурствМенеджер.Прочитать();
	Если ГрафикДежурствМенеджер.Выбран() Тогда
		Возврат ?(ГрафикДежурствМенеджер.Сверхурочка,ГрафикДежурствМенеджер.Сотрудник,Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//Определяет конечную дату и время реагирования на заявку
Функция СрокРеагирования(ДатаПриемаЗаявки=Неопределено,СрокРеагированияПоДоговору=0)
 	Если ДатаПриемаЗаявки = Неопределено Тогда
 		ДатаПриемаЗаявки = ТекущаяДата();
 	КонецЕсли;
 	СрокРеагирования = ДатаПриемаЗаявки;
 	
 	Если СрокРеагированияПоДоговору = 0 Тогда
 		СрокРеагированияПоДоговору = Константы.СтандартныйСрокРеагирования.Получить();
 	КонецЕсли;
 	
 	
 	
	Возврат СрокРеагирования;
КонецФункции
 
 //Проверяет, есть ли в указанном промежутке нерабочее время
Функция ПроверитьНаНаличиеНерабочегоВремени(ПериодНачало,ПериодОкончание,ШагВЧасах=1) Экспорт
	ЕстьНерабочееВремя = Ложь;
	
	ДеньНачало = НачалоДня(ПериодНачало);
	ДеньОкончание = КонецДня(ПериодОкончание);
	
	День = ДеньНачало;
	
	//Проверка на наличие нерабочих дней
	Пока День < ДеньОкончание Цикл
		Если ПроверитьНаНерабочийДень(День) Тогда
			ЕстьНерабочееВремя = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНерабочееВремя Тогда
		Время = ПериодНачало;
		СверхурочкаНачало = Константы.СверхурочкаНачало.Получить();
		СверхурочкаКонец = Константы.СверхурочкаКонец.Получить();
		Пока Время <= ПериодОкончание Цикл
			Если Время - НачалоДня(Время) >= СверхурочкаНачало ИЛИ Время - НачалоДня(Время) < СверхурочкаКонец Тогда
				ЕстьНерабочееВремя = Истина;
				Прервать;
			КонецЕсли;
			
			Время = Время + 3600 * ШагВЧасах;
		КонецЦикла;
	КонецЕсли;
		
	Возврат ЕстьНерабочееВремя;
КонецФункции

//Формирует массив видов дней, относящихся к нерабочим
Функция НерабочиеДни()
	НерабочиеДни = Новый Массив;
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Нерабочий);
	НерабочиеДни.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
	
	Возврат НерабочиеДни;
КонецФункции

//Истина, если день нерабочий
//Если в этот день есть дежурных без сверхурочки, тогда данный день является рабочим
//Если указан сотрудник, не являющимся дежурным, то в дежурный день возвращается нерабочий день
Функция ПроверитьНаНерабочийДень(Период,Сотрудник=Неопределено) Экспорт
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	Дежурный = АутсорсРаботы.ПолучитьДежурного(Период) = Сотрудник;
	СверхурочкаДежурства = АутсорсРаботы.СверхурочноеДежурство(Период) = Сотрудник;
		
	ВидДня = ВидДня(Период);
	Если НерабочиеДни().Найти(ВидДня) <> Неопределено Тогда
		Если Дежурный И ЗначениеЗаполнено(Сотрудник) И Не СверхурочкаДежурства Тогда
			НерабочийДень = Истина;
		Иначе
			НерабочийДень = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НерабочийДень;
КонецФункции 

//Возвращает вид дня для указанной даты
Функция ВидДня(Дата) Экспорт
	ВидДняЗапись = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьМенеджерЗаписи();
	ВидДняЗапись.Дата = Дата;
	ВидДняЗапись.ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
    ВидДняЗапись.Год = Год(Дата);
	ВидДняЗапись.Прочитать();
	ВидДня = ВидДняЗапись.ВидДня;
	
	Возврат ВидДня;
КонецФункции 