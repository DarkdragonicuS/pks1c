////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает свойства связанных наборов данных для стандартных бухгалтерских отчетов.
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	ИмяНабора - Строка - Имя связанного набора.
//	ПараметрыПоляВладельца - Структура - Содержит ключ:
//		* ИндексСубконто - Число - Номер субконто.
//		* ЗаголовокСубконто - Строка - Название вида субконто.
//	ИмяПоляПрефикс - Строка - Префикс для имени поля.
//
Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;

				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок, помещающийся без переноса при установленной в процедуре УстановитьШиринуПоказателей() ширине.
//
// Возвращаемое значение:
//	Строка - Текст заголовка для группы "Показатели".
//
Функция ЗаголовокГруппыПоказателей() Экспорт
	
	Возврат НСтр("ru = 'Показа-" + Символы.ПС + "тели'");
	
КонецФункции

// Устанавливает минимальную ширину полей с показателями,
// при которой умещается заголовок, заданный в функции ЗаголовокГруппыПоказателей().
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	НаборПоказателей - Массив - Содержит имена показателей отчета.
//
Процедура УстановитьМинимальнуюШиринуПоказателей(Схема, НаборПоказателей) Экспорт
	
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;
	
	Для Каждого Показатель Из НаборПоказателей Цикл
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "НачальныйОстаток"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "Оборот"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "КонечныйОстаток"));
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление для поля ТипГруппировки табличной части Группировка настроек отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - форма отчета.
//
Процедура УстановитьУсловноеОформлениеТипГруппировки(Форма) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;


	// Тип группировки "Без групп"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без групп'"));


	// Тип группировки "С группами"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'С группами'"));


	// Тип группировки "Только группы"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Только группы'"));

КонецПроцедуры

// Возвращает искомые значения из данных расшифровки.
//
// Параметры:
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки из СКД.
//  СоответствиеПолей - Соответствие - Ключи соответствуют именам искомых в данных расшифровки полей
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор элемента данных расшифровки
//                в иерархии которого нужно осуществлять поиск.
//
// Возвращаемое значение:
//  Соответствие - Ключи соответствуют именам запрошенных полей.
//
Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СоответствиеПолей, Расшифровка) Экспорт
	
	СоответствиеДанных = Новый Соответствие();
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				СоответствиеДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеДанных;

КонецФункции

// Возвращает строковое представление уникального идентификатора ссылки. Используется при выводе УИДа ссылки в СКД.
//
// Параметры:
//   Ссылка - СправочникСсылка.* - Ссылка на элемент справочника.
//
// Возвращаемое значение:
//	Строка - Строковое представление уникального идентификатора.
//
Функция ПолучитьУИДСсылкиСтрокой(Ссылка) Экспорт
	Возврат Строка(Ссылка.УникальныйИдентификатор());
КонецФункции

// Проверяет нужен ли для переданного типа сложный подбор.
//
// Параметры:
//	ТипЭлемента - Тип - Тип, который нужно проверить.
// Возвращаемое значение:
//	Булево - Истина если нужна сложная обработка подбора, ложь - в противном случае.
//
Функция ЭтоТипЭлементаСоСложнымПодбором(ТипЭлемента) Экспорт
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет отложенную инициализацию компоновщика настроек при загрузке пользовательских настроек.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма отчета
//  Настройки			 - ПользовательскиеНастройкиКомпоновкиДанных - загружаемые настройки
//  ИмяВариантаНастроек	 - Строка - Имя варианта настроек.
//                         Допустимо передавать пустую строку для основного варианта.
//
Процедура ИнициализироватьКомпоновщикНастроекПриЗагрузкеПользовательскихНастроек(Форма, Настройки, ИмяВариантаНастроек = "") Экспорт
	
	Если БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, Форма.УникальныйИдентификатор);
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ОрганизацияИзменилась = БухгалтерскиеОтчетыКлиентСервер.ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
		БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась, ИмяВариантаНастроек);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отложенную инициализацию компоновщика настроек при формировании отчета.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма отчета
//  ИмяВариантаНастроек	 - Строка - Имя варианта настроек.
//                         Допустимо передавать пустую строку для основного варианта.
//
Процедура ИнициализироватьКомпоновщикНастроекПриФормированииОтчета(Форма, ИмяВариантаНастроек = "") Экспорт
	
	Если БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИзменилась = БухгалтерскиеОтчетыКлиентСервер.ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
	// Выше убедились, что отложенная инициализация используется, поэтому ОрганизацияИзменилась отлична от Неопределено.
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась, ИмяВариантаНастроек);
	
КонецПроцедуры

// Определяет имя отчета (объекта метаданных), отображаемого в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ИмяОтчета(Форма) Экспорт
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ИмяОтчетаПоИмениФормы(Форма);
	Если ИмяОтчета <> Неопределено Тогда
		Возврат ИмяОтчета;
	КонецЕсли;
	
	// Основной реквизит формы должен называться Отчет
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Возврат ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

// Определяет значения по умолчанию, общие для всех отчетов.
//
// Возвращаемое значение:
//  Структура - базовые значения: НачалоПериода, КонецПериода, Организация.
//
Функция БазовыеРеквизитыЗначенияПоУмолчанию() Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("НачалоПериода", '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("КонецПериода",  '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("Организация",   Справочники.Организации.ПустаяСсылка());
	
	ЗначенияПоУмолчанию.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	ЗначенияПоУмолчанию.КонецПериода  = КонецМесяца(ЗначенияПоУмолчанию.НачалоПериода);
	ЗначенияПоУмолчанию.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции


#Область Оформление

// Удаляем из переданной коллекций настроек условного оформления автоотступ.
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Коллекция условного оформления.
//
Процедура УдалитьАвтоотступИзУсловногоОформления(УсловноеОформление) Экспорт

	// Удалим автоотступ из условного оформления.
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		ПараметрОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление, "Автоотступ");
		Если ПараметрОформления <> Неопределено И ПараметрОформления.Использование = Истина Тогда
			ЭлементыДляУдаления.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из ЭлементыДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности

// В отчетах используется расширенная подсказка с дополнительной информацией, из которой можно открыть справку, которая в ERP отсутствует.
// Для каждого отчета по определенному списку элементов будем очищать первоначальный заголовок и оставлять в нем только текстовую информацию, команду открытия справки - очистим.
//
// Параметры:
//  Форма - УправляемаяФорма - форма отчета, имеет основной реквизит "Отчет".
//
Процедура УдалитьСсылкуНаСправкуИзОписанияФорматированнойСтроки(Форма) Экспорт
	
	МассивРедактируемыхЭлементов = Новый Массив;
	МассивРедактируемыхЭлементов.Добавить("ТекстПриПроверкеАктуальностиРасширеннаяПодсказка");
	МассивРедактируемыхЭлементов.Добавить("ОтменитьАктуализациюРасширеннаяПодсказка");
	МассивРедактируемыхЭлементов.Добавить("ТекстПриАктуальныхДанныхРасширеннаяПодсказка");
	МассивРедактируемыхЭлементов.Добавить("ТекстПриНеобходимостиАктуализацииРасширеннаяПодсказка");
	МассивРедактируемыхЭлементов.Добавить("АктуализироватьРасширеннаяПодсказка");
	
	Для каждого РедактируемыйЭлемент Из МассивРедактируемыхЭлементов Цикл
		ЭлементФормы = Форма.Элементы.Найти(РедактируемыйЭлемент);
		Если ЭлементФормы <> Неопределено Тогда
			ПодсказкаТекстом = СтрПолучитьСтроку(ЭлементФормы.Заголовок, 1);
			ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(ПодсказкаТекстом);
		КонецЕсли;
	КонецЦикла;
	
	// Скрываем видимость команд:
	МассивРедактируемыхЭлементов = Новый Массив;
	МассивРедактируемыхЭлементов.Добавить("ОтменитьАктуализацию");
	МассивРедактируемыхЭлементов.Добавить("Актуализировать");
	
	Для каждого РедактируемыйЭлемент Из МассивРедактируемыхЭлементов Цикл
		ЭлементФормы = Форма.Элементы.Найти(РедактируемыйЭлемент);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Отменяем автообновление текста редактивования параметров:
	МассивРедактируемыхЭлементов = Новый Массив;
	МассивРедактируемыхЭлементов.Добавить("НачалоПериода");
	МассивРедактируемыхЭлементов.Добавить("КонецПериода");
	МассивРедактируемыхЭлементов.Добавить("Счет");
	МассивРедактируемыхЭлементов.Добавить("ВидСубконто");
	МассивРедактируемыхЭлементов.Добавить("ПолеОрганизация");
	
	Для каждого РедактируемыйЭлемент Из МассивРедактируемыхЭлементов Цикл
		ЭлементФормы = Форма.Элементы.Найти(РедактируемыйЭлемент);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет запуск фонового задания по получению актуальности данных закрытия месяца и последующую обработку результата.
//
//	Параметры:
//		ПараметрыПроверки - Структура - параметры выполнения фонового задания, см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//		ДанныеАктуализации - Структура - данные актуализации отчета, служит для последующего изменения данных формы отчета:
//			* ИдентификаторЗаданияАктуализации - Строка - идентификатор выполняемого задания актуализации;
//			* АдресХранилищаАктуализации - Строка - адрес хранения данных выполненного задания актуализации отчета.
//
Процедура ПроверитьАктуальность(ПараметрыПроверки, ДанныеАктуализации) Экспорт
	
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца)
		И ПравоДоступа("Использование", Метаданные.Обработки.ОперацииЗакрытияМесяца)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАктуализации.ИдентификаторЗаданияАктуализации) Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ДанныеАктуализации.ИдентификаторЗаданияАктуализации);
		Если ФоновоеЗадание <> Неопределено И ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ФоновоеЗадание.Отменить();
			ДанныеАктуализации.ИдентификаторЗаданияАктуализации = "";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыПроверки.УникальныйИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка актуальности данных'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.КлючФоновогоЗадания = Новый УникальныйИдентификатор;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчеты.ОпределитьСостояниеЭтаповРасчетаЗакрытияМесяца",
		ПараметрыПроверки,
		ПараметрыВыполнения);
	
	ОбработатьРезультатВыполненияАктуализации(РезультатВыполнения, ДанныеАктуализации);
	
КонецПроцедуры

// В зависимости от результата выполнения фонового задания, изменяет данные актуализации отчета.
//
//	Параметры:
//		РезультатВыполнения - Структура - см. возвращаемое значение ДлительныеОперации.ВыполнитьВФоне();
//		ДанныеАктуализации - Структура - данные актуализации отчета, служит для последующего изменения данных формы отчета:
//			* ИдентификаторЗаданияАктуализации - Строка - идентификатор выполняемого задания актуализации;
//			* АдресХранилищаАктуализации - Строка - адрес хранения данных выполненного задания актуализации отчета.
//
Процедура ОбработатьРезультатВыполненияАктуализации(РезультатВыполнения, ДанныеАктуализации) Экспорт
	
	Если Не РезультатВыполнения.Свойство("АдресРезультата") И ЗначениеЗаполнено(ДанныеАктуализации.АдресХранилищаАктуализации) Тогда
		РезультатВыполнения.Вставить("АдресРезультата", ДанныеАктуализации.АдресХранилищаАктуализации);
	КонецЕсли;
	
	Если РезультатВыполнения.Статус = "Выполняется" И РезультатВыполнения.Свойство("ИдентификаторЗадания") Тогда
		ДанныеАктуализации.ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДанныеАктуализации.АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		ДанныеАктуализации.ИдентификаторЗаданияАктуализации = "";
		ДанныеАктуализации.АдресХранилищаАктуализации = РезультатВыполнения.АдресРезультата;
	ИначеЕсли РезультатВыполнения.Статус = "Ошибка" Тогда
		ДанныеАктуализации.ИдентификаторЗаданияАктуализации = "";
		ДанныеАктуализации.АдресХранилищаАктуализации = ПоместитьВоВременноеХранилище(РезультатВыполнения);
	КонецЕсли;
		
КонецПроцедуры

// Для определения статуса выполнения регламентных операций в фоновом задании.
//
// Параметры:
//  Параметры - Структура - см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//  АдресХранилища - Строка - адрес временного хранилища, куда будет помещен результат определения состояний.
//
Процедура ОпределитьСостояниеЭтаповРасчетаЗакрытияМесяца(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаАктуальности", КонецМесяца(Параметры.КонецПериода));
	Результат.Вставить("СостоянияЭтапов", Новый Соответствие);
	Результат.Вставить("Состояние", "НеТребуется");
	
	Если РасчетЗакрытияМесяцаВыполняется(Параметры) Тогда
		Результат.Состояние = "Выполняется";
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
		
	Результат.СостоянияЭтапов = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
		Параметры.ЭтапыЗакрытияМесяца, Результат.ДатаАктуальности, Параметры.СписокОрганизаций);
		
	Для каждого Этап Из Параметры.ЭтапыЗакрытияМесяца Цикл
		
		Если Результат.СостоянияЭтапов.Получить(Этап) = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
	 		Или Результат.СостоянияЭтапов.Получить(Этап) = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			Или Результат.СостоянияЭтапов.Получить(Этап) = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
			
			Результат.Состояние = "НеВыполнено";
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Определяет факт выполнения расчета закрытия месяца
//
//	Параметры:
//		ПараметрыПроверки - Структура - параметры выполнения фонового задания, см. БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности();
//
//	Возвращаемое значение:
//		Булево - Истина, если в базе есть активные задания закрытия месяца.
//
Функция РасчетЗакрытияМесяцаВыполняется(ПараметрыПроверки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыполнениеОперацийЗакрытияМесяца.Организация КАК Организация,
	|	ВыполнениеОперацийЗакрытияМесяца.ПериодРасчета КАК ПериодРасчета,
	|	ВыполнениеОперацийЗакрытияМесяца.Операция КАК Операция,
	|	ВыполнениеОперацийЗакрытияМесяца.ДатаНачала КАК ДатаНачала,
	|	ВыполнениеОперацийЗакрытияМесяца.ДатаОкончания КАК ДатаОкончания,
	|	ВыполнениеОперацийЗакрытияМесяца.БылиОшибки КАК БылиОшибки,
	|	ВыполнениеОперацийЗакрытияМесяца.ИдентификаторРасчета КАК ИдентификаторРасчета,
	|	ВыполнениеОперацийЗакрытияМесяца.ИнформацияОЗапускеРасчета КАК ИнформацияОЗапускеРасчета
	|ИЗ
	|	РегистрСведений.ВыполнениеОперацийЗакрытияМесяца КАК ВыполнениеОперацийЗакрытияМесяца
	|ГДЕ
	|	ВыполнениеОперацийЗакрытияМесяца.Организация В(&СписокОрганизаций)
	|	И (ВыполнениеОперацийЗакрытияМесяца.Операция В(&ЭтапыЗакрытияМесяца)
	|	ИЛИ ВыполнениеОперацийЗакрытияМесяца.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПустаяСсылка))
	|	И ВыполнениеОперацийЗакрытияМесяца.РасчетВыполняется
	|	И ВыполнениеОперацийЗакрытияМесяца.ПериодРасчета МЕЖДУ &НачалоПериодаРасчета И &КонецПериодаРасчета";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыПроверки.СписокОрганизаций);
	Запрос.УстановитьПараметр("ЭтапыЗакрытияМесяца", ПараметрыПроверки.ЭтапыЗакрытияМесяца);
	Запрос.УстановитьПараметр("НачалоПериодаРасчета", ПараметрыПроверки.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", ПараметрыПроверки.КонецПериода);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеМинимальнойШириныПоля(Поле)
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 8);
	
КонецПроцедуры

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

// Процедура копирует элементы отбора компоновки данных из источника в приемник добавлением к существующим элементам.
// Копируются только отборы по полям, имена которых перечислены в ИменаПолей.
//
// Параметры:
//  ОтборПриемник	 - ОтборКомпоновкиДанных - отбор-получатель
//  ОтборИсточник	 - ОтборКомпоновкиДанных - отбор, из которого копируются элементы отбора
//  ИменаПолей		 - Строка - Список полей отбора через запятую
//
Процедура СкопироватьОтборКомпоновкиДанных(ОтборПриемник, ОтборИсточник, ИменаПолей)
	
	МассивСтрок = СтрРазделить(ИменаПолей, ",", Ложь);
	МассивПолей = Новый Массив;
	
	Для Каждого ИмяПоля Из МассивСтрок Цикл
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоля));
	КонецЦикла;
	
	Для Каждого Элемент Из ОтборИсточник.Элементы Цикл
		
		ТипЭлемента  = ТипЗнч(Элемент);
		
		Если ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных")
			И МассивПолей.Найти(Элемент.ЛевоеЗначение) = Неопределено Тогда
			Продолжить; 
		КонецЕсли;
		
		НовыйЭлемент = ОтборПриемник.Элементы.Добавить(ТипЭлемента);
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, Элемент, ИменаПолей); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти
