&НаСервере
Функция НайтиКонтрагентаПоКлиенту(Клиент) Экспорт
	ЗапросКонтрагентов = Новый Запрос;
	ЗапросКонтрагентов.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Контрагент КАК Контрагент
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Ссылка = &Клиент";
		
	ЗапросКонтрагентов.УстановитьПараметр("Клиент", Клиент);		
	РезультатЗапросаКонтрагентов = ЗапросКонтрагентов.Выполнить();		
	ВыборкаКонтрагентов = РезультатЗапросаКонтрагентов.Выбрать();
	ВыборкаКонтрагентов.Следующий();
	Возврат ВыборкаКонтрагентов.Контрагент;
КонецФункции

&НаСервере
Функция НайтиКлиентаПоКонтрагенту(Контрагент) Экспорт
	ЗапросКлиентов = Новый Запрос;
	ЗапросКлиентов.Текст = 
		"ВЫБРАТЬ
		|	Клиенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|ГДЕ
		|	Клиенты.Контрагент = &Контрагент";
		
	ЗапросКлиентов.УстановитьПараметр("Контрагент", Контрагент.Ссылка);		
	РезультатЗапросаКлиентов = ЗапросКлиентов.Выполнить();		
	ВыборкаКлиентов = РезультатЗапросаКлиентов.Выбрать();
	ВыборкаКлиентов.Следующий();
	Возврат ВыборкаКлиентов.Ссылка;
КонецФункции

&НаСервере
Функция ЗапросЦен(Организация, Дата) Экспорт		
	ЗапросЦен = Новый Запрос;
	ЗапросЦен.Текст =
	"ВЫБРАТЬ
	|	ДоговораОбслуживанияСрезПоследних.Тариф КАК Тариф,
	|	ДоговораОбслуживанияСрезПоследних.АбонентскаяПлата КАК АбонентскаяПлата,
	|	ДоговораОбслуживанияСрезПоследних.ТарифСверхурочный КАК ТарифСверхурочный
	|ИЗ
	|	РегистрСведений.ДоговораОбслуживания.СрезПоследних(
	|			&Дата,
	|			(СрокДействия > &Дата
	|				ИЛИ СрокДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|				И НЕ ЧерныйСписок) КАК ДоговораОбслуживанияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоговораОбслуживания.СрезПоследних(&Дата, ) КАК ДоговораОбслуживанияСрезПоследних1
	|		ПО ДоговораОбслуживанияСрезПоследних.Регистратор = ДоговораОбслуживанияСрезПоследних1.Регистратор
	|ГДЕ
	|	ДоговораОбслуживанияСрезПоследних.Период <= &Дата
	|	И ДоговораОбслуживанияСрезПоследних.Контрагент = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговораОбслуживанияСрезПоследних.Период УБЫВ";
	
	ЗапросЦен.УстановитьПараметр("Организация", Организация);
	ЗапросЦен.УстановитьПараметр("Дата", НачалоДня(Дата));         	
	РезультатЗапросаЦен = ЗапросЦен.Выполнить();
	ВыборкаЦен = РезультатЗапросаЦен.Выбрать();
	
	ВыборкаЦен.Следующий();
	
	Возврат ВыборкаЦен;	
КонецФункции

&НаСервере
Функция ПосчитатьТариф(Организация, Дата, От, До) Экспорт	
	Заработано = 0;
	Индекс = 0;
	Итог = 0;                                 
	Массив = Новый Массив;
	
	ВыборкаЦен = ЗапросЦен(Организация, Дата);                           	
	//ВыборкаЦен.Следующий();
	
	ЗапросРабот = Новый Запрос;
	ЗапросРабот.Текст = 
		"ВЫБРАТЬ
		|	ПочасовыеРаботы.Организация КАК Организация,
		|	ПочасовыеРаботы.ВремяЗатраты КАК ВремяЗатраты,
		|	ПочасовыеРаботы.Регистратор.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ПочасовыеРаботы КАК ПочасовыеРаботы
		|ГДЕ
		|	ПочасовыеРаботы.Организация = &Организация
		|	И ПочасовыеРаботы.Регистратор.Дата МЕЖДУ &От И &До";
	
	ЗапросРабот.УстановитьПараметр("До", До);
	ЗапросРабот.УстановитьПараметр("От", От);
	ЗапросРабот.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапросаРабот = ЗапросРабот.Выполнить();	
	ВыборкаРабот = РезультатЗапросаРабот.Выбрать();
	
	Пока ВыборкаРабот.Следующий() Цикл
		Итог = Итог + ВыборкаРабот.ВремяЗатраты;
	КонецЦикла;
	
	Если Итог = 0 Тогда
		СтоимостьЧаса = 0;
	Иначе 
		СтоимостьЧаса = ВыборкаЦен.Тариф / Итог;
	КонецЕсли;
	Массив.Добавить(СтоимостьЧаса);
	
	Возврат Окр(Массив[Индекс], 2);
КонецФункции

//Объем работы с шагом 0.5
//минимум для удаленки - 0.5, для выезда - 1
Функция ПолучитьОбъемРаботы(ВремяНачала,ВремяОкончания,УдаленнаяРабота=Ложь) Экспорт
	Результат = 0;
	
	//некорректное заполнение
	Если ВремяОкончания < ВремяНачала Тогда
		ФактическоеВремя = 0;
	Иначе	
		ФактическоеВремя = (ВремяОкончания - ВремяНачала) / 3600; //В часах
	КонецЕсли;
	Результат = (Цел(ФактическоеВремя/0.5) + ?(ФактическоеВремя%0.5 <> 0,1,0))*0.5;
	Если НЕ УдаленнаяРабота И Результат < 1 И Результат > 0 Тогда
		Результат = 1;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура Подождать(Секунд, Shell = Неопределено) Экспорт
    
    Попытка
        Если Shell = Неопределено Тогда
            Shell = Новый COMОбъект("WScript.Shell"); 
        КонецЕсли;
        Shell.Run("timeout /T " + Секунд + " /nobreak" ,0,True);    
    Исключение
        // обработка не требуется
    КонецПопытки;
    
КонецПроцедуры

Функция ПолучитьРеквизит(Объект,ИмяРеквизита) Экспорт
	Возврат Объект[ИмяРеквизита];
КонецФункции


// Округляет число до целого в большую сторону
// 
// Параметры:
//  Число Число
// 
// Возвращаемое значение:
//  Число
Функция ОкруглитьВерх(Число) Экспорт
	Возврат ?(Число=Цел(Число),Число, Окр((Число+0.5),0));
КонецФункции


// Возвращает хеш md5 от входной строки
// 
// Параметры:
//  Строка - Строка для хеширования
// 
// Возвращаемое значение:
//  Строка - md5 строки
&НаСервере
Функция md5(Строка) Экспорт
    ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
    ХешированиеДанных.Добавить(Строка);
    ХешСумма = НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма)," ",""));
    Возврат ХешСумма;
КонецФункции

// Возвращает хеш SHA1 от входной строки с указанным ключом
// 
// Параметры:
//  Строка - Строка для хеширования
// 
// Возвращаемое значение:
//  Строка - md5 строки
&НаСервере
Функция sha1(Строка, Ключ="") Экспорт
    ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
    ХешированиеДанных.Добавить(Ключ);
    ХешированиеДанных.Добавить(Строка);
    ХешСумма = НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма)," ",""));
    Возврат ХешСумма;
КонецФункции


// Генерирует изображения с QR-кодом входной строки
// 
// Параметры:
//  Строка - Кодируемая строка
// 
// Возвращаемое значение:
//  Картинка,Неопределено - QR в виде изображения, если есть входные данный, Неопределено - если отсутсвуют входные данные 
Функция ПолучитьQR(Строка) Экспорт
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина" , 100);
	ПараметрыШтрихкода.Вставить("Высота" , 100);
	ПараметрыШтрихкода.Вставить("ТипКода" , 16);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст" , Ложь);
	ПараметрыШтрихкода.Вставить("РазмерШрифта", 12);
	ПараметрыШтрихкода.Вставить("УголПоворота" , Число(0));
	ПараметрыШтрихкода.Вставить("ПрозрачныйФон" , Истина);
	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
	ПараметрыШтрихкода.Вставить("Масштабировать" , Истина);
	ПараметрыШтрихкода.Вставить("СохранятьПропорции" , Ложь);
	
	Если ЗначениеЗаполнено(Строка) Тогда
		ПараметрыШтрихкода.Вставить("Штрихкод" , Строка);

		QRКод = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	Иначе
		QRКод = Неопределено;
	КонецЕсли;
	
	Возврат QRКод;
КонецФункции

&НаСервере
Функция ПолучитьКарточкуЛицензии(Лицензия) Экспорт
	Если ТипЗнч(Лицензия) = Тип("Строка") Тогда
		тЛицензия = ПолучитьДанныеЛицензииПоИдентификатору(Лицензия)
	ИначеЕсли ТипЗнч(Лицензия) = Тип("Структура") Тогда
		тЛицензия = Лицензия;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	КарточкаЛицензии = Новый ТабличныйДокумент;
	КарточкаЛицензии.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицензииОстаткиИОбороты.Регистратор КАК Регистратор,
		|	ЛицензииОстаткиИОбороты.Номенклатура КАК Номенклатура,
		|	ЛицензииОстаткиИОбороты.Серия КАК Серия,
		|	ЛицензииОстаткиИОбороты.Номер КАК Номер,
		|	ЛицензииОстаткиИОбороты.КодАктивации КАК КодАктивации,
		|	ЛицензииОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
		|	ЛицензииОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
		|	ЛицензииОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.Лицензии.ОстаткиИОбороты(,, Запись,,) КАК ЛицензииОстаткиИОбороты
		|ГДЕ
		|	ЛицензииОстаткиИОбороты.КодАктивации = &КодАктивации
		|	И ЛицензииОстаткиИОбороты.Серия = &Серия
		|	И ЛицензииОстаткиИОбороты.Номер = &Номер
		|	И ЛицензииОстаткиИОбороты.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура",тЛицензия.Номенклатура);
	Запрос.УстановитьПараметр("КодАктивации",тЛицензия.КодАктивации);
	Запрос.УстановитьПараметр("Серия",тЛицензия.Серия);
	Запрос.УстановитьПараметр("Номер",тЛицензия.Номер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НомерЗаписи = 0;
	Макет = Обработки.КарточкаЛицензии.ПолучитьМакет("КарточкаЛицензии");
	КонтрагентПолучатель = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерЗаписи = НомерЗаписи + 1;
		Если НомерЗаписи = 1 Тогда	
			
			//Реквизиты
			Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		
			ЗапросДанных = Новый Запрос;
			ЗапросДанных.Текст = 
				"ВЫБРАТЬ
				|	ЛицензииОстатки.КоличествоОстаток КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.Лицензии.Остатки(
				|			&Дата,
				|			КодАктивации = &КодАктивации
				|				И Номер = &Номер
				|				И Серия = &Серия) КАК ЛицензииОстатки";
			
			ЗапросДанных.УстановитьПараметр("Дата", ТекущаяДата());
			ЗапросДанных.УстановитьПараметр("КодАктивации", ВыборкаДетальныеЗаписи.КодАктивации);
			ЗапросДанных.УстановитьПараметр("Номер", ВыборкаДетальныеЗаписи.Номер);
			ЗапросДанных.УстановитьПараметр("Серия", ВыборкаДетальныеЗаписи.Серия);
			
			РезультатЗапросаДанных = ЗапросДанных.Выполнить();
			
			ВыборкаДанных = РезультатЗапросаДанных.Выбрать();
			
			Если ВыборкаДанных.Следующий() Тогда
				Если ВыборкаДанных.КоличествоОстаток < 1 Тогда
					ЛицензияПродана = Истина
				Иначе
					ЛицензияПродана = Ложь;
				КонецЕсли;
			Иначе
				ЛицензияПродана = Истина;
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////
			///ШапкаБезШК
			ОбластьШапкаБезШК = Макет.ПолучитьОбласть("ШапкаБезШК");
			ОбластьШапкаБезШК.Параметры.ЛицензияПредставление = ПолучитьПредставлениеЛицензии(
																  ВыборкаДетальныеЗаписи.Серия,
																  ВыборкаДетальныеЗаписи.Номер,
																  ВыборкаДетальныеЗаписи.КодАктивации
																  );
			КарточкаЛицензии.Вывести(ОбластьШапкаБезШК);
			
			/////////////////////////////////////////////////////////////////////
			////Шапка
			ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапка.Параметры.Серия = ВыборкаДетальныеЗаписи.Серия;
			ОбластьШапка.Параметры.Номер = ВыборкаДетальныеЗаписи.Номер;
			ОбластьШапка.Параметры.КодАктивации = ВыборкаДетальныеЗаписи.КодАктивации;
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("Ширина" , 100);
			ПараметрыШтрихкода.Вставить("Высота" , 100);
			ПараметрыШтрихкода.Вставить("ТипКода" , 16);
			ПараметрыШтрихкода.Вставить("ОтображатьТекст" , Ложь);
			ПараметрыШтрихкода.Вставить("РазмерШрифта", 12);
			ПараметрыШтрихкода.Вставить("УголПоворота" , Число(0));
			ПараметрыШтрихкода.Вставить("ПрозрачныйФон" , Истина);
			ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
			ПараметрыШтрихкода.Вставить("Масштабировать" , Истина);
			ПараметрыШтрихкода.Вставить("СохранятьПропорции" , Ложь);
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Серия) Тогда
				ПараметрыШтрихкода.Вставить("Штрихкод" , ВыборкаДетальныеЗаписи.Серия);
				//ОбластьШапка.Рисунки["QRСерия"].ВыводитьНаПечать = Истина;
				ОбластьШапка.Рисунки["QRСерия"].Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			Иначе
				//ОбластьШапка.Рисунки["QRСерия"].ВыводитьНаПечать = Ложь;
				ОбластьШапка.Рисунки["QRСерия"].Картинка = Новый Картинка;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номер) Тогда
				ПараметрыШтрихкода.Вставить("Штрихкод" , ВыборкаДетальныеЗаписи.Номер);
				ОбластьШапка.Рисунки["QRНомер"].Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			Иначе
				ОбластьШапка.Рисунки["QRНомер"].Картинка = Новый Картинка;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодАктивации) Тогда
				ПараметрыШтрихкода.Вставить("Штрихкод" , ВыборкаДетальныеЗаписи.КодАктивации);
				ОбластьШапка.Рисунки["QRКодАктивации"].Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			Иначе
				ОбластьШапка.Рисунки["QRКодАктивации"].Картинка = Новый Картинка;
			КонецЕсли;
			КарточкаЛицензии.Вывести(ОбластьШапка);
			
			////////////////////////////////////////////////////////////////
			///ДанныеЛицензии
			ОбластьДанныеЛицензии = Макет.ПолучитьОбласть("ДанныеЛицензии");
			ОбластьДанныеЛицензии.Параметры.Номенклатура = Номенклатура;
			ОбластьДанныеЛицензии.Параметры.Продан = ЛицензияПродана;
		
			//Результат.Вывести(ОбластьДанныеЛицензии);
			
			
			//////////////////////////////////////////////////////////////////
			///ДвиженияШапка
			ОбластьДвиженияШапка = Макет.ПолучитьОбласть("ДвиженияШапка");
			
			МакетДвижения = Новый ТабличныйДокумент;
			МакетДвижения.Вывести(ОбластьДвиженияШапка);
			//Результат.Вывести(ОбластьДвиженияШапка);
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////
		///ДвиженияСтрока		
		ОбластьДвиженияСтрока = Макет.ПолучитьОбласть("ДвиженияСтрока");
		ОбластьДвиженияСтрока.Параметры.ДокументДвиженияПредставление = ВыборкаДетальныеЗаписи.Регистратор;
		ОбластьДвиженияСтрока.Параметры.Приход = ВыборкаДетальныеЗаписи.КоличествоПриход;
		ОбластьДвиженияСтрока.Параметры.Расход = ВыборкаДетальныеЗаписи.КоличествоРасход;
		ОбластьДвиженияСтрока.Параметры.ОстатокНаКонец = ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток;
		
		МакетДвижения.Вывести(ОбластьДвиженияСтрока);
		
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.РеализацияЛицензий") Тогда			
			КонтрагентПолучатель = ВыборкаДетальныеЗаписи.Регистратор.Контрагент;
		КонецЕсли;
		//Результат.Вывести(ОбластьДвиженияСтрока);
	КонецЦикла;
	
	Если НомерЗаписи <> 0 Тогда
		Если ЗначениеЗаполнено(КонтрагентПолучатель) И ЛицензияПродана Тогда
			ОбластьДанныеЛицензии.Параметры.Контрагент = КонтрагентПолучатель;
		КонецЕсли;
		КарточкаЛицензии.Вывести(ОбластьДанныеЛицензии);
		
		КарточкаЛицензии.Вывести(МакетДвижения);
		
	    КонечныйОстатокЛицензии = ВыборкаДетальныеЗаписи.КоличествоКонечныйОстаток;
		///////////////////////////////////////////////////////////////////
		///Остатки
		ОбластьОстатки = Макет.ПолучитьОбласть("Остатки");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ЛицензииОстатки.КоличествоОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.Лицензии.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ЛицензииОстатки";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ОбластьОстатки.Параметры.ОстаткиЛицензий = ВыборкаДетальныеЗаписи.КоличествоОстаток;
		Иначе
			ОбластьОстатки.Параметры.ОстаткиЛицензий = 0;
		КонецЕсли;
		КарточкаЛицензии.Вывести(ОбластьОстатки);
		
		Если КонечныйОстатокЛицензии < 0 Тогда
			////////////////////////////////////////////////////////
			///ПроблемнаяЛицензия
			ОбластьПроблемнаяЛицензия = Макет.ПолучитьОбласть("ПроблемнаяЛицензия");
			КарточкаЛицензии.Вывести(ОбластьПроблемнаяЛицензия);
		КонецЕсли;
	Иначе
		КарточкаЛицензии = Неопределено;
	КонецЕсли;

	Возврат КарточкаЛицензии;
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеЛицензии(Серия,Номер,КодАктивации)
	СтрокаПредставление = "S(" + Серия + ")" +
						  "R(" + Номер + ")" +
						  "K(" + КодАктивации + ")";
	Возврат СтрокаПредставление;
КонецФункции


&НаСервере
Функция ПолучитьДанныеЛицензииПоИдентификатору(ЛицензияID) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Лицензии.Номенклатура,
		|	Лицензии.Серия,
		|	Лицензии.Номер,
		|	Лицензии.КодАктивации
		|ИЗ
		|	РегистрНакопления.Лицензии КАК Лицензии";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Номенклатура = Неопределено;
	Серия = "";
	Номер = "";
	КодАктивации = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		тНоменклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		тСерия = ВыборкаДетальныеЗаписи.Серия;
		тНомер = ВыборкаДетальныеЗаписи.Номер;
		тКодАктивации = ВыборкаДетальныеЗаписи.КодАктивации;
		Если ЛицензияID = ПолучитьИдентификаторЛицензии(тНоменклатура,тСерия,тНомер,тКодАктивации) Тогда
			Номенклатура = тНоменклатура;
			Серия = тСерия;
			Номер = тНомер;
			КодАктивации = тКодАктивации;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Номенклатура,Серия,Номер,КодАктивации",Номенклатура,Серия,Номер,КодАктивации);
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторЛицензии(Номенклатура,Серия="",РегистрационныйНомер="",КодАктивации="") Экспорт
	ИдентификаторЛицензии = md5(md5(Строка(Номенклатура.УникальныйИдентификатор())) + md5(Серия) + md5(РегистрационныйНомер) + md5(КодАктивации));
	Возврат ИдентификаторЛицензии;
КонецФункции

&НаСервере
Функция ПодсветитьСлова(ИсходнаяСтрока,МассивСтрокПоиска) Экспорт
	МассивРезультирующихСтрок = Новый Массив;
	
//	Если ТипЗнч(ИсходнаяСтрока) = Тип("Строка") Тогда
	ШрифтПодсветки = Новый Шрифт(,, Истина);
	Если ЗначениеЗаполнено(МассивСтрокПоиска) Тогда
		ЦветПодсветки = Новый Цвет(0, 153, 0);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивСтрокПоиска) Тогда
		Возврат Новый ФорматированнаяСтрока(ИсходнаяСтрока,ШрифтПодсветки);
	КонецЕсли;
	
	ИсходнаяСтрокаНормализованная = НРег(ИсходнаяСтрока);
	ДлинаИсходнойСтроки = СтрДлина(ИсходнаяСтрокаНормализованная);
	
	// получим список диапазонов символов для подсветки
	СписокДиапазонов = Новый СписокЗначений;
	Для НомерСлова = 1 По МассивСтрокПоиска.Количество() Цикл
		СловоПодсветки = НРег(МассивСтрокПоиска[НомерСлова - 1]);
		ПозицияНачалаСлова = 1;
		ДлинаСлова = СтрДлина(СловоПодсветки);
		Пока ПозицияНачалаСлова <> 0 И ПозицияНачалаСлова <= ДлинаИсходнойСтроки Цикл
			ПозицияНачалаСлова = СтрНайти(ИсходнаяСтрокаНормализованная, СловоПодсветки, , ПозицияНачалаСлова);
			Если ПозицияНачалаСлова > 0 Тогда
				МассивДиапазона = Новый Массив;
				МассивДиапазона.Добавить(ПозицияНачалаСлова);
				МассивДиапазона.Добавить(ПозицияНачалаСлова + ДлинаСлова - 1);
				СписокДиапазонов.Добавить(МассивДиапазона, Формат(ПозицияНачалаСлова, "ЧЦ=3; ЧВН="));
				ПозицияНачалаСлова = ПозицияНачалаСлова + ДлинаСлова;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СписокДиапазонов.СортироватьПоПредставлению();
	
	// сформируем массив результирующих строк с разным оформлением (подсветкой)
	СтартоваяПозиция = 1;
	Для Каждого ЭлементДиапазона Из СписокДиапазонов Цикл
		НачалоДиапазона = ЭлементДиапазона.Значение[0];
		КонецДиапазона = ЭлементДиапазона.Значение[1];
		Если НачалоДиапазона > СтартоваяПозиция Тогда // часть строки без подсветки
			ЧастьБезВыделения = Сред(ИсходнаяСтрока, СтартоваяПозиция, НачалоДиапазона - СтартоваяПозиция);
			МассивРезультирующихСтрок.Добавить(Новый ФорматированнаяСтрока(ЧастьБезВыделения));
			СтартоваяПозиция = НачалоДиапазона;
		КонецЕсли;
		Если КонецДиапазона >= СтартоваяПозиция Тогда // часть строки с подсветкой
			ЧастьВыделяемая = Сред(ИсходнаяСтрока, СтартоваяПозиция, КонецДиапазона - СтартоваяПозиция + 1);
			МассивРезультирующихСтрок.Добавить(Новый ФорматированнаяСтрока(ЧастьВыделяемая, ШрифтПодсветки, ЦветПодсветки));
			СтартоваяПозиция = КонецДиапазона + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтартоваяПозиция <= ДлинаИсходнойСтроки Тогда // "хвост" без выделения
		Хвост = Сред(ИсходнаяСтрока, СтартоваяПозиция, ДлинаИсходнойСтроки - СтартоваяПозиция + 1);
		МассивРезультирующихСтрок.Добавить(Новый ФорматированнаяСтрока(Хвост));
	КонецЕсли;
//	Иначе
//		Для Каждого СтрокаСтруктура Из ИсходнаяСтрока Цикл
//			Строка = СтрокаСтруктура.ИсходнаяСтрока;
//			ШрифтПодсветки = СтрокаСтруктура.ШрифтПодсветки;
//			ЦветПодсветки = СтрокаСтруктура.ЦветПодсветки;
//			
//			ИсходнаяСтрокаНормализованная = НРег(Строка);
//			ДлинаИсходнойСтроки = СтрДлина(ИсходнаяСтрокаНормализованная);
//			
//			// получим список диапазонов символов для подсветки
//			СписокДиапазонов = Новый СписокЗначений;
//			Для НомерСлова = 1 По МассивСтрокПоиска.Количество() Цикл
//				СловоПодсветки = НРег(МассивСтрокПоиска[НомерСлова - 1]);
//				ПозицияНачалаСлова = 1;
//				ДлинаСлова = СтрДлина(СловоПодсветки);
//				Пока ПозицияНачалаСлова <> 0 И ПозицияНачалаСлова <= ДлинаИсходнойСтроки Цикл
//					ПозицияНачалаСлова = СтрНайти(ИсходнаяСтрокаНормализованная, СловоПодсветки, , ПозицияНачалаСлова);
//					Если ПозицияНачалаСлова > 0 Тогда
//						МассивДиапазона = Новый Массив;
//						МассивДиапазона.Добавить(ПозицияНачалаСлова);
//						МассивДиапазона.Добавить(ПозицияНачалаСлова + ДлинаСлова - 1);
//						СписокДиапазонов.Добавить(МассивДиапазона, Формат(ПозицияНачалаСлова, "ЧЦ=3; ЧВН="));
//						ПозицияНачалаСлова = ПозицияНачалаСлова + ДлинаСлова;
//					КонецЕсли;
//				КонецЦикла;
//			КонецЦикла;
//			
//			СписокДиапазонов.СортироватьПоПредставлению();
//			
//			// сформируем массив результирующих строк с разным оформлением (подсветкой)
//			СтартоваяПозиция = 1;
//			Для Каждого ЭлементДиапазона Из СписокДиапазонов Цикл
//				НачалоДиапазона = ЭлементДиапазона.Значение[0];
//				КонецДиапазона = ЭлементДиапазона.Значение[1];
//				Если НачалоДиапазона > СтартоваяПозиция Тогда // часть строки без подсветки
//					ЧастьБезВыделения = Сред(Строка, СтартоваяПозиция, НачалоДиапазона - СтартоваяПозиция);
//					МассивРезультирующихСтрок.Добавить(Новый ФорматированнаяСтрока(ЧастьБезВыделения));
//					СтартоваяПозиция = НачалоДиапазона;
//				КонецЕсли;
//				Если КонецДиапазона >= СтартоваяПозиция Тогда // часть строки с подсветкой
//					ЧастьВыделяемая = Сред(Строка, СтартоваяПозиция, КонецДиапазона - СтартоваяПозиция + 1);
//					МассивРезультирующихСтрок.Добавить(Новый ФорматированнаяСтрока(ЧастьВыделяемая, ШрифтПодсветки, ЦветПодсветки));
//					СтартоваяПозиция = КонецДиапазона + 1;
//				КонецЕсли;
//			КонецЦикла;
//			
//			Если СтартоваяПозиция <= ДлинаИсходнойСтроки Тогда // "хвост" без выделения
//				Хвост = Сред(Строка, СтартоваяПозиция, ДлинаИсходнойСтроки - СтартоваяПозиция + 1);
//				МассивРезультирующихСтрок.Добавить(Новый ФорматированнаяСтрока(Хвост));
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивРезультирующихСтрок);
КонецФункции

//Читает JSON в структуру
Функция ПолучитьСтруктурированныеДанныеJSON(СтрокаJSON) Экспорт
	Попытка
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		Данные = ПрочитатьJSON(Чтение,Ложь);
		Чтение.Закрыть();
	Исключение
		Данные = Неопределено;
	КонецПопытки;
	
	Возврат Данные;
КонецФункции


//Записывает JSON из структуры
Функция ПолучитьСтрокуJSONИзСтруктуры(Структура) Экспорт
	Попытка
		Запись = Новый ЗаписьJSON();
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Структура);
		СтрокаJSON = Запись.Закрыть();
	Исключение
		СтрокаJSON = Неопределено;
	КонецПопытки;
	
	Возврат СтрокаJSON;
КонецФункции